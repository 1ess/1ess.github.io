<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A Sort Of A Blog</title>
  
  
  <link href="https://1ess.github.io/atom.xml" rel="self"/>
  
  <link href="https://1ess.github.io/"/>
  <updated>2022-02-22T07:55:08.181Z</updated>
  <id>https://1ess.github.io/</id>
  
  <author>
    <name>Stephen Chang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式-备忘录</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E5%BF%98%E5%BD%95/</id>
    <published>2022-03-02T00:00:00.000Z</published>
    <updated>2022-02-22T07:55:08.181Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;备忘录模式(Memento Pattern)是一种行为型设计模式，允许在不暴露对象实现细节的情况下保存和恢复对象之前的状态。&lt;/p&gt;
&lt;h2 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-中介者</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E8%80%85/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E8%80%85/</id>
    <published>2022-03-01T00:00:00.000Z</published>
    <updated>2022-02-22T07:55:08.181Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;中介者模式(Mediator Pattern)是一种行为型设计模式，能让你减少对象之间混乱无序的依赖关系。该模式会限制对象之间的直接交互，迫使它们通过一个中介者对象进行合作。&lt;/p&gt;
&lt;h2 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-迭代器</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8/</id>
    <published>2022-02-28T00:00:00.000Z</published>
    <updated>2022-02-22T07:55:08.181Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;迭代器模式(Iterator Pattern)是一种行为型设计模式，让你能在不暴露集合底层表现形式(列表、栈和树等)的情况下遍历集合中所有的元素。&lt;/p&gt;
&lt;h2 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-命令</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4/</id>
    <published>2022-02-27T00:00:00.000Z</published>
    <updated>2022-02-22T07:55:08.181Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;命令模式(Command Pattern)是一种行为型设计模式，它可将请求转换为一个包含与请求相关的所有信息的独立对象。该转换让你能根据不同的请求将方法参数化、 延迟请求执行或将其放入队列中，且能实现可撤销操作。&lt;/p&gt;
&lt;h2 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-责任链</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%B4%A3%E4%BB%BB%E9%93%BE/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%B4%A3%E4%BB%BB%E9%93%BE/</id>
    <published>2022-02-26T00:00:00.000Z</published>
    <updated>2022-02-22T07:55:08.181Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;责任链模式(Chain of Responsibility Pattern)是一种行为型设计模式，允许你将请求沿着处理者链进行发送。收到请求后，每个处理者均可对请求进行处理，或将其传递给链上的下个处理者。&lt;/p&gt;
&lt;h2 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-代理</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86/</id>
    <published>2022-02-25T00:00:00.000Z</published>
    <updated>2022-02-22T07:55:08.181Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;代理模式(Proxy Pattern)是一种结构型设计模式，让你能够提供对象的替代品或其占位符。代理控制着对于原对象的访问，并允许在将请求提交给对象前后进行一些处理。&lt;/p&gt;
&lt;h2 id=&quot;代理模式-UML&quot;&gt;&lt;a href=&quot;#代理模式-UML&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-享元</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83/</id>
    <published>2022-02-24T00:00:00.000Z</published>
    <updated>2022-02-22T07:55:08.181Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;享元模式(Flyweight Pattern)是一种结构型设计模式，它摒弃了在每个对象中保存所有数据的方式，通过共享多个对象所共有的相同状态，让你能在有限的内存容量中载入更多对象。&lt;/p&gt;
&lt;h2 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-门面</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%97%A8%E9%9D%A2/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%97%A8%E9%9D%A2/</id>
    <published>2022-02-23T00:00:00.000Z</published>
    <updated>2022-02-22T07:55:08.181Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;门面模式(Facade Pattern)是一种结构型设计模式，能为程序库、框架或其他复杂类提供一个简单的接口。&lt;/p&gt;
&lt;h2 id=&quot;门面模式-UML&quot;&gt;&lt;a href=&quot;#门面模式-UML&quot; class=&quot;headerlink&quot; title=&quot;门面模式</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-装饰器</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E5%99%A8/</id>
    <published>2022-02-22T00:00:00.000Z</published>
    <updated>2022-02-22T07:55:08.181Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;装饰器模式(Decorator Pattern)是一种结构型设计模式，允许你通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。&lt;/p&gt;
&lt;h2 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-组合</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88/</id>
    <published>2022-02-21T00:00:00.000Z</published>
    <updated>2022-02-22T07:55:08.181Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;组合模式(Composite Pattern)是一种结构型设计模式，你可以使用它将对象组合成树状结构，并且能像使用独立对象一样使用它们。&lt;/p&gt;
&lt;h2 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-桥接</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5/</id>
    <published>2022-02-20T00:00:00.000Z</published>
    <updated>2022-02-22T07:55:08.181Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;桥接模式(Bridge Pattern)是一种结构型设计模式，可将一个大类或一系列紧密相关的类拆分为抽象和实现两个独立的层次结构，从而能在开发时分别使用。&lt;/p&gt;
&lt;h2 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-适配器</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8/</id>
    <published>2022-02-19T00:00:00.000Z</published>
    <updated>2022-02-22T07:55:08.181Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;适配器模式(Adapter Pattern)是一种结构型设计模式，它能使接口不兼容的对象能够相互合作。&lt;/p&gt;
&lt;h2 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-单例</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B/</id>
    <published>2022-02-18T00:00:00.000Z</published>
    <updated>2022-02-22T07:55:08.181Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;单例模式(Singleton Pattern)是一种创建型设计模式，让你能够保证一个类只有一个实例，并提供一个访问该实例的全局节点。&lt;/p&gt;
&lt;h2 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-原型</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B/</id>
    <published>2022-02-17T00:00:00.000Z</published>
    <updated>2022-02-22T07:55:08.181Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;原型模式(Prototype Pattern)是一种创建型设计模式，使你能够复制已有对象，而又无需使代码依赖它们所属的类。&lt;/p&gt;
&lt;h2 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-生成器</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%94%9F%E6%88%90%E5%99%A8/</id>
    <published>2022-02-16T00:00:00.000Z</published>
    <updated>2022-02-22T07:55:08.181Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;生成器模式(Builder Pattern)是一种创建型设计模式，使你能够&lt;strong&gt;分步骤创建复杂对象&lt;/strong&gt;。该模式允许你&lt;strong&gt;使用相同的创建代码生成不同类型和形式&lt;/strong&gt;的对象。&lt;/p&gt;
&lt;h2 id=&quot;解释&quot;&gt;&lt;a</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-抽象工厂</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/</id>
    <published>2022-02-15T00:00:00.000Z</published>
    <updated>2022-02-22T07:55:08.181Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;抽象工厂模式(Abstract Factory Pattern)是一种创建型设计模式，它能创建一系列相关的对象，而无需指定其具体类。&lt;/p&gt;
&lt;h2 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-工厂方法</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95/</id>
    <published>2022-02-14T00:00:00.000Z</published>
    <updated>2022-02-22T07:55:08.181Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;创建型模式是为了绕开 new 来避免对象创建过程中所导致的紧耦合(依赖具体类)，从而支持对象创建的稳定。他是接口抽象之后的第一步工作。&lt;/p&gt;
&lt;p&gt;工厂方法模式(Factory Method</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-概述</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A6%82%E8%BF%B0/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A6%82%E8%BF%B0/</id>
    <published>2022-02-13T00:00:00.000Z</published>
    <updated>2022-02-22T07:55:08.181Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;设计模式是软件设计中常见问题的典型解决方案。设计模式与方法或库的使用方式不同，你很难直接在自己的程序中套用某个设计模式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;模式并不是一段特定的代码，而是解决特定问题的一般性概念。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你可以根据模式来实现符合自己程序</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Synchronous and Asynchronous Blocking and Non-Blocking</title>
    <link href="https://1ess.github.io/Synchronous%20and%20Asynchronous%20Blocking%20and%20Non-Blocking/"/>
    <id>https://1ess.github.io/Synchronous%20and%20Asynchronous%20Blocking%20and%20Non-Blocking/</id>
    <published>2022-02-12T00:00:00.000Z</published>
    <updated>2022-02-22T07:55:08.181Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;概念解释&quot;&gt;&lt;a href=&quot;#概念解释&quot; class=&quot;headerlink&quot; title=&quot;概念解释&quot;&gt;&lt;/a&gt;概念解释&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;在软件开发中，这两对概念是非常容易搞混的。我们再此给其做一个明确的解释，用以区分:</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SQL 经典练习题</title>
    <link href="https://1ess.github.io/SQL%20%E7%BB%8F%E5%85%B8%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    <id>https://1ess.github.io/SQL%20%E7%BB%8F%E5%85%B8%E7%BB%83%E4%B9%A0%E9%A2%98/</id>
    <published>2022-02-10T00:00:00.000Z</published>
    <updated>2022-02-22T07:55:08.181Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;数据准备&quot;&gt;&lt;a href=&quot;#数据准备&quot; class=&quot;headerlink&quot; title=&quot;数据准备&quot;&gt;&lt;/a&gt;数据准备&lt;/h3&gt;&lt;p&gt;1.学生表&lt;br&gt;2.课程表&lt;br&gt;3.教师表&lt;br&gt;4.成绩表&lt;/p&gt;
&lt;figure class=&quot;highlight</summary>
        
      
    
    
    
    
  </entry>
  
</feed>
