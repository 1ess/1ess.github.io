<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A Sort Of A Blog</title>
  
  
  <link href="https://1ess.github.io/atom.xml" rel="self"/>
  
  <link href="https://1ess.github.io/"/>
  <updated>2021-07-14T03:38:32.409Z</updated>
  <id>https://1ess.github.io/</id>
  
  <author>
    <name>Stephen Chang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/ASP.Net%20MVC(%E4%BA%94)/"/>
    <id>https://1ess.github.io/ASP.Net%20MVC(%E4%BA%94)/</id>
    <published>2021-07-14T03:38:32.409Z</published>
    <updated>2021-07-14T03:38:32.409Z</updated>
    
    <content type="html"><![CDATA[<p>本篇，我们再来详细说说 ASP.Net MVC 中的 Razor 语法。</p><h3 id="什么是-Razor"><a href="#什么是-Razor" class="headerlink" title="什么是 Razor"></a>什么是 Razor</h3><p>Razor 是 ASP.Net MVC 中支持的视图引擎，它允许我们混写服务端代码如 C#、VB 等和 HTML 标签，如果使用 C#，那么文件以 .cshtml 作为后缀。</p><p>下面我们具体来讲解 C# Razor 语法。</p><h3 id="单行表达式"><a href="#单行表达式" class="headerlink" title="单行表达式"></a>单行表达式</h3><p>以 @ 符号开始，在 .cshtml 文件中开始写服务端代码。如下: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token operator">&lt;</span>h2<span class="token operator">></span>Razor Syntax<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span>h2<span class="token operator">></span>@DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToShortDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意: 在单行表达式在表达式的末尾不需要分号。</p><h3 id="多行语句代码块"><a href="#多行语句代码块" class="headerlink" title="多行语句代码块"></a>多行语句代码块</h3><p>如果要写多行服务端代码，必须写在 @{…} 中，服务端代码每行的末尾以分号结束。在代码块中声明的变量，之后可以用 @variable 来使用。</p><pre class="line-numbers language-csharp"><code class="language-csharp">@<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> date <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToShortDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token string">"Hello Razor!"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>h1<span class="token operator">></span>@msg<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span>h2<span class="token operator">></span>@date<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码块中展示文本"><a href="#代码块中展示文本" class="headerlink" title="代码块中展示文本"></a>代码块中展示文本</h3><p>如果想在 @{…} 中展示文本，需要使用 @: 或者 &lt;text&gt;&lt;/text&gt; 标记: </p><pre class="line-numbers language-csharp"><code class="language-csharp">@<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> date <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToShortDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token string">"Hello Razor!"</span><span class="token punctuation">;</span>    @<span class="token punctuation">:</span> Today <span class="token keyword">is</span> @date<span class="token punctuation">.</span> <span class="token operator">&lt;</span>br<span class="token operator">></span>    @msg<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>@<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> date <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToShortDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token string">"Hello Razor!"</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span>text<span class="token operator">></span>Today <span class="token keyword">is</span><span class="token operator">&lt;</span><span class="token operator">/</span>text<span class="token operator">></span> @date<span class="token punctuation">.</span><span class="token operator">&lt;</span>br<span class="token operator">></span>    @msg<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><p>在 Razor 中可以使用条件语句 if-else，但是必须以 @ 开头，语句内容必须包裹在代码块{…}中: </p><pre class="line-numbers language-csharp"><code class="language-csharp">@<span class="token keyword">if</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span><span class="token function">IsLeapYear</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>Year<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    @DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>Year @<span class="token punctuation">:</span> <span class="token keyword">is</span> leap year<span class="token punctuation">.</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    @DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>Year @<span class="token punctuation">:</span> <span class="token keyword">is</span> not leap year<span class="token punctuation">.</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="for-循环语句"><a href="#for-循环语句" class="headerlink" title="for 循环语句"></a>for 循环语句</h3><pre class="line-numbers language-csharp"><code class="language-csharp">@<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    @i<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>我们可以使用 @model 在视图中使用模型对象。</p><pre class="line-numbers language-csharp"><code class="language-csharp">@model Student<span class="token operator">&lt;</span>h2<span class="token operator">></span>@Model<span class="token punctuation">.</span>Age<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本篇，我们再来详细说说 ASP.Net MVC 中的 Razor 语法。&lt;/p&gt;
&lt;h3 id=&quot;什么是-Razor&quot;&gt;&lt;a href=&quot;#什么是-Razor&quot; class=&quot;headerlink&quot; title=&quot;什么是 Razor&quot;&gt;&lt;/a&gt;什么是 Razor&lt;/h3&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/ASP.Net%20MVC(%E5%85%AD)/"/>
    <id>https://1ess.github.io/ASP.Net%20MVC(%E5%85%AD)/</id>
    <published>2021-07-14T03:38:32.409Z</published>
    <updated>2021-07-14T03:38:32.409Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇，我们详细讲讲 .Net MVC 中的 HTML Helper。</p><p>HtmlHelper 类使用模型类对象生成 html 元素。它将模型对象绑定到 html 元素，以将模型属性的值显示为 html 元素，并在提交 Web 表单时将 html 元素的值分配给模型属性。<br>我们最好在 Razor 视图中使用 HtmlHelper 类而不是手动编写 html 标签。</p><p>我们使用 @Html 来表示一个 HtmlHelper 对象。</p><p>HtmlHelper 类生成 html 元素。如: </p><pre class="line-numbers language-csharp"><code class="language-csharp">@Html<span class="token punctuation">.</span><span class="token function">ActionLink</span><span class="token punctuation">(</span><span class="token string">"Create New"</span><span class="token punctuation">,</span> <span class="token string">"Create"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将生成标记: </p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/Foo/Create<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Create New<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="HtmlHelper-扩展方法"><a href="#HtmlHelper-扩展方法" class="headerlink" title="HtmlHelper 扩展方法"></a>HtmlHelper 扩展方法</h2><hr><p>调用 HtmlHelper 扩展方法和使用 html 标记之间的区别在于: HtmlHelper 扩展方法可以使绑定模型数据变得容易。</p><h3 id="TextBox"><a href="#TextBox" class="headerlink" title="TextBox"></a>TextBox</h3><p>我们有两个生成 textbox(&lt;input type=”text” /&gt;)的方法: </p><ul><li>TextBox()，松散类型</li><li>TextBoxFor()，强类型</li></ul><h4 id="TextBox-1"><a href="#TextBox-1" class="headerlink" title="TextBox()"></a>TextBox()</h4><p>方法签名: </p><pre class="line-numbers language-csharp"><code class="language-csharp">MvcHtmlString Html<span class="token punctuation">.</span><span class="token function">TextBox</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">,</span> <span class="token keyword">string</span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token keyword">object</span> htmlAttributes<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意: TextBox() 方法有很多重载，并且 TextBox() 方法是松散类型，因为 name 属性是字符串类型。<br>使用: </p><pre class="line-numbers language-csharp"><code class="language-csharp">@model Student@Html<span class="token punctuation">.</span><span class="token function">TextBox</span><span class="token punctuation">(</span><span class="token string">"StudentName"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> @<span class="token keyword">class</span> <span class="token operator">=</span> <span class="token string">"form-control"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成的 html 元素如下: </p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span>         <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentName<span class="token punctuation">"</span></span>         <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentName<span class="token punctuation">"</span></span>         <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>         <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意: 第一个参数是字符串，它将被设置为 input 元素的 name 和 id 属性，第二个参数是要在文本框中显示的值，第三个参数是 HtmlAttributes 参数，属性名称将是以 @ 符号开头的属性。</p><h4 id="TextBoxFor"><a href="#TextBoxFor" class="headerlink" title="TextBoxFor()"></a>TextBoxFor()</h4><p>方法签名: </p><pre class="line-numbers language-csharp"><code class="language-csharp">MvcHtmlString <span class="token function">TextBoxFor</span><span class="token punctuation">(</span>Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>TModel<span class="token punctuation">,</span> TValue<span class="token operator">></span><span class="token operator">></span> expression<span class="token punctuation">,</span> <span class="token keyword">object</span> htmlAttributes<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用: </p><pre class="line-numbers language-csharp"><code class="language-csharp">@model Student@Html<span class="token punctuation">.</span><span class="token function">TextBoxFor</span><span class="token punctuation">(</span>m <span class="token operator">=</span><span class="token operator">></span> m<span class="token punctuation">.</span>StudentName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> @<span class="token keyword">class</span> <span class="token operator">=</span> <span class="token string">"form-control"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成的 html 元素如下: </p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span>         <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentName<span class="token punctuation">"</span></span>         <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentName<span class="token punctuation">"</span></span>         <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>         <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1ess<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="TextArea"><a href="#TextArea" class="headerlink" title="TextArea"></a>TextArea</h3><p>TextArea() 方法和 TextAreaFor() 方法与 TextBox() 方法以及 TextBoxFor() 方法类似，我们就不多说了。</p><h3 id="CheckBox"><a href="#CheckBox" class="headerlink" title="CheckBox"></a>CheckBox</h3><p>我们有两个生成 checkbox(&lt;input type=”checkbox” /&gt;)的方法: </p><ul><li>CheckBox()，松散类型</li><li>CheckBoxFor()，强类型</li></ul><h4 id="CheckBox-1"><a href="#CheckBox-1" class="headerlink" title="CheckBox()"></a>CheckBox()</h4><p>方法签名: </p><pre class="line-numbers language-csharp"><code class="language-csharp">MvcHtmlString <span class="token function">CheckBox</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">,</span> <span class="token keyword">bool</span> isChecked<span class="token punctuation">,</span> <span class="token keyword">object</span> htmlAttributes<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用: </p><pre class="line-numbers language-csharp"><code class="language-csharp">@Html<span class="token punctuation">.</span><span class="token function">CheckBox</span><span class="token punctuation">(</span><span class="token string">"isNewlyEnrolled"</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成的 html 元素如下: </p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span>         <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isNewlyEnrolled<span class="token punctuation">"</span></span>         <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isNewlyEnrolled<span class="token punctuation">"</span></span>         <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span>         <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="CheckBoxFor"><a href="#CheckBoxFor" class="headerlink" title="CheckBoxFor()"></a>CheckBoxFor()</h4><p>方法签名: </p><pre class="line-numbers language-csharp"><code class="language-csharp">MvcHtmlString <span class="token function">CheckBoxFor</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>TModel<span class="token punctuation">,</span>TValue<span class="token operator">></span><span class="token operator">></span> expression<span class="token punctuation">,</span> <span class="token keyword">object</span> htmlAttributes<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用: </p><pre class="line-numbers language-csharp"><code class="language-csharp">@model Student@Html<span class="token punctuation">.</span><span class="token function">CheckBoxFor</span><span class="token punctuation">(</span>m <span class="token operator">=</span><span class="token operator">></span> m<span class="token punctuation">.</span>isNewlyEnrolled<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成的 html 元素如下: </p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">data-val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>         <span class="token attr-name">data-val-required</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>The isNewlyEnrolled field is required.<span class="token punctuation">"</span></span>         <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isNewlyEnrolled<span class="token punctuation">"</span></span>         <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isNewlyEnrolled<span class="token punctuation">"</span></span>         <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span>         <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isNewlyEnrolled<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RadioButton"><a href="#RadioButton" class="headerlink" title="RadioButton"></a>RadioButton</h3><p>我们有两个生成 radio(&lt;input type=”radio” /&gt;)的方法: </p><ul><li>RadioButton()，松散类型</li><li>RadioButtonFor()，强类型</li></ul><h4 id="RadioButton-1"><a href="#RadioButton-1" class="headerlink" title="RadioButton()"></a>RadioButton()</h4><p>方法签名: </p><pre class="line-numbers language-csharp"><code class="language-csharp">MvcHtmlString <span class="token function">RadioButton</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">,</span> <span class="token keyword">object</span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token keyword">bool</span> isChecked<span class="token punctuation">,</span> <span class="token keyword">object</span> htmlAttributes<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用: </p><pre class="line-numbers language-csharp"><code class="language-csharp">Male<span class="token punctuation">:</span>   @Html<span class="token punctuation">.</span><span class="token function">RadioButton</span><span class="token punctuation">(</span><span class="token string">"Gender"</span><span class="token punctuation">,</span> <span class="token string">"Male"</span><span class="token punctuation">)</span>  Female<span class="token punctuation">:</span> @Html<span class="token punctuation">.</span><span class="token function">RadioButton</span><span class="token punctuation">(</span><span class="token string">"Gender"</span><span class="token punctuation">,</span> <span class="token string">"Female"</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成的 html 元素如下: </p><pre class="line-numbers language-html"><code class="language-html">Male: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span>         <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Gender<span class="token punctuation">"</span></span>         <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Gender<span class="token punctuation">"</span></span>         <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span>         <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Male<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>Female: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Gender<span class="token punctuation">"</span></span>         <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Gender<span class="token punctuation">"</span></span>         <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span>         <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Female<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="RadioButtonFor"><a href="#RadioButtonFor" class="headerlink" title="RadioButtonFor()"></a>RadioButtonFor()</h4><p>方法签名: </p><pre class="line-numbers language-csharp"><code class="language-csharp">MvcHtmlString <span class="token function">RadioButtonFor</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>TModel<span class="token punctuation">,</span> TValue<span class="token operator">></span><span class="token operator">></span> expression<span class="token punctuation">,</span> <span class="token keyword">object</span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token keyword">object</span> htmlAttributes<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用: </p><pre class="line-numbers language-csharp"><code class="language-csharp">@model Student@Html<span class="token punctuation">.</span><span class="token function">RadioButtonFor</span><span class="token punctuation">(</span>m <span class="token operator">=</span><span class="token operator">></span> m<span class="token punctuation">.</span>Gender<span class="token punctuation">,</span> <span class="token string">"Male"</span><span class="token punctuation">)</span>@Html<span class="token punctuation">.</span><span class="token function">RadioButtonFor</span><span class="token punctuation">(</span>m <span class="token operator">=</span><span class="token operator">></span> m<span class="token punctuation">.</span>Gender<span class="token punctuation">,</span> <span class="token string">"Female"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>生成的 html 元素如下: </p><pre class="line-numbers language-html"><code class="language-html">Male: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span>         <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Gender<span class="token punctuation">"</span></span>         <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Gender<span class="token punctuation">"</span></span>         <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span>         <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Male<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>Female: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Gender<span class="token punctuation">"</span></span>         <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Gender<span class="token punctuation">"</span></span>         <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span>         <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Female<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DropDownList"><a href="#DropDownList" class="headerlink" title="DropDownList"></a>DropDownList</h3><p>我们有两个生成 select 元素的方法: </p><ul><li>DropDownList()，松散类型</li><li>DropDownListFor()，强类型</li></ul><h4 id="DropDownList-1"><a href="#DropDownList-1" class="headerlink" title="DropDownList()"></a>DropDownList()</h4><p>方法签名: </p><pre class="line-numbers language-csharp"><code class="language-csharp">MvcHtmlString Html<span class="token punctuation">.</span><span class="token function">DropDownList</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">,</span> IEnumerable<span class="token operator">&lt;</span>SelectLestItem<span class="token operator">></span> selectList<span class="token punctuation">,</span> <span class="token keyword">string</span> optionLabel<span class="token punctuation">,</span> <span class="token keyword">object</span> htmlAttributes<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用: </p><pre class="line-numbers language-csharp"><code class="language-csharp">@<span class="token keyword">using</span> MyMVCApp<span class="token punctuation">.</span>Models@model Student@Html<span class="token punctuation">.</span><span class="token function">DropDownList</span><span class="token punctuation">(</span><span class="token string">"StudentGender"</span><span class="token punctuation">,</span>                     <span class="token keyword">new</span> <span class="token class-name">SelectList</span><span class="token punctuation">(</span>Enum<span class="token punctuation">.</span><span class="token function">GetValues</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>Gender<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token string">"Select Gender"</span><span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> @<span class="token keyword">class</span> <span class="token operator">=</span> <span class="token string">"form-control"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成的 html 元素如下: </p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentGender<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentGender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Select Gender<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Male<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Female<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DropDownListFor"><a href="#DropDownListFor" class="headerlink" title="DropDownListFor()"></a>DropDownListFor()</h4><p>方法签名: </p><pre class="line-numbers language-csharp"><code class="language-csharp">MvcHtmlString Html<span class="token punctuation">.</span><span class="token function">DropDownListFor</span><span class="token punctuation">(</span>Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">,</span> TProperty<span class="token operator">></span><span class="token operator">></span> expression<span class="token punctuation">,</span> IEnumerable<span class="token operator">&lt;</span>SelectLestItem<span class="token operator">></span> selectList<span class="token punctuation">,</span> <span class="token keyword">string</span> optionLabel<span class="token punctuation">,</span> <span class="token keyword">object</span> htmlAttributes<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用: </p><pre class="line-numbers language-csharp"><code class="language-csharp">@<span class="token keyword">using</span> MyMVCApp<span class="token punctuation">.</span>Models@model Student@Html<span class="token punctuation">.</span><span class="token function">DropDownListFor</span><span class="token punctuation">(</span>m <span class="token operator">=</span><span class="token operator">></span> m<span class="token punctuation">.</span>StudentGender<span class="token punctuation">,</span>                     <span class="token keyword">new</span> <span class="token class-name">SelectList</span><span class="token punctuation">(</span>Enum<span class="token punctuation">.</span><span class="token function">GetValues</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>Gender<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                     <span class="token string">"Select Gender"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成的 html 元素如下: </p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentGender<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentGender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Select Gender<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Male<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Female<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>还有一些扩展方法如: </p><ul><li>Password</li><li>Display</li><li>Label</li><li>Editor</li><li>Hidden</li></ul><p>等，我们就先不介绍了，等用到的时候再查文档即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇，我们详细讲讲 .Net MVC 中的 HTML Helper。&lt;/p&gt;
&lt;p&gt;HtmlHelper 类使用模型类对象生成 html 元素。它将模型对象绑定到 html 元素，以将模型属性的值显示为 html 元素，并在提交 Web 表单时将 html 元素的值分配给</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/ASP.Net%20MVC(%E4%B8%83)/"/>
    <id>https://1ess.github.io/ASP.Net%20MVC(%E4%B8%83)/</id>
    <published>2021-07-14T03:38:32.409Z</published>
    <updated>2021-07-14T03:38:32.409Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇，我们讲讲数据验证、布局试图以及 Controller 向 View 传递少量数据的方式。</p><h2 id="数据注释-DataAnnotations"><a href="#数据注释-DataAnnotations" class="headerlink" title="数据注释(DataAnnotations)"></a>数据注释(DataAnnotations)</h2><hr><p>ASP.Net MVC 使用 DataAnnotations attribute 实现数据验证。<br>DataAnnotations 为不同的验证规则内建了许多验证特性，可以应用于模型类的属性。ASP.NET MVC 将自动强制执行这些验证规则并在视图中显示验证消息。</p><p>DataAnnotations attribute 位于 System.ComponentModel.DataAnnotations 命名空间。<br>下面列出 DataAnnotations attribute: </p><table><thead><tr><th>Attribute</th><th>描述</th></tr></thead><tbody><tr><td>Required</td><td>表示该属性是必填字段</td></tr><tr><td>StringLength</td><td>定义字符串字段的最大长度</td></tr><tr><td>Range</td><td>定义数字字段的最大值和最小值</td></tr><tr><td>RegularExpression</td><td>指定字段值必须与指定的正则表达式匹配</td></tr><tr><td>CustomValidation</td><td>指定的自定义验证方法以验证字段</td></tr><tr><td>EmailAddress</td><td>使用电子邮件地址格式验证</td></tr><tr><td>FileExtension</td><td>使用文件扩展名进行验证</td></tr><tr><td>MaxLength</td><td>指定字符串字段的最大长度</td></tr><tr><td>MinLength</td><td>指定字符串字段的最小长度</td></tr><tr><td>Phone</td><td>指定该字段是使用电话号码的正则表达式的电话号码</td></tr></tbody></table><p>我们在 Controller 的 Action 方法中使用 ModelState.IsValid 属性，来判断模型是否通过验证。</p><p>它为每个字段调用 HtmlHelper 的扩展方法 ValidationMessageFor，并在顶部调用 ValidationSummary 方法。<br>ValidationMessageFor 负责显示指定字段的错误消息。ValidationSummary 一次显示所有错误消息的列表。</p><h2 id="Layout-View"><a href="#Layout-View" class="headerlink" title="Layout View"></a>Layout View</h2><hr><p>一个应用程序可能会有一些公共 UI 部分，如 logo、导航部分、footer 部分等。ASP.NET MVC 引入了一个 Layout 视图，使得我们不必在每个页面中编写相同的代码。</p><p>Razor 的布局视图和普通视图一样，以 .cshtml 作为后缀，存储在 View/Shared 文件夹中。脚手架会自动创建一个 _Layout.cshtml 文件。<br>布局视图中会调用 RenderBody 方法和 RenderSection 方法。RenderBody 就像其他视图的占位符一样，将使用该布局文件的视图注入。</p><h3 id="使用布局视图"><a href="#使用布局视图" class="headerlink" title="使用布局视图"></a>使用布局视图</h3><p>默认情况下，Views 文件夹中有一个 _ViewStart.cshtml。它使用 Layout 属性为文件夹及其子文件夹中的所有视图设置默认布局页面。您可以将任何布局页面的有效路径分配给布局属性。<br>我们也可以在单个视图中设置 Layout 属性，覆盖 _ViewStart.cshtml 中的布局视图。可以设置为 null，不使用布局视图。</p><h3 id="渲染方法"><a href="#渲染方法" class="headerlink" title="渲染方法"></a>渲染方法</h3><p>ASP.NET MVC 布局视图使用以下方法呈现子视图: </p><ul><li>RenderBody，呈现子视图中不在命名部分内的部分。布局视图必须包含 RenderBody 方法。</li><li>RenderSection，呈现命名部分的内容并指定该部分是否是必需的。RenderSection 方法在布局视图中是可选的。</li></ul><p>RenderSection 方法指定一个部分的名称，在子视图中使用 @section 定义命名部分，在运行时，子视图将在调用 RenderSection 方法的适当位置呈现。<br>索引视图的其余部分(不在任何已命名的部分中)将呈现调用 RenderBody 方法的位置。</p><h2 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h2><hr><p>模型对象用于在 Razor 视图中发送数据。但是，在某些情况下，您可能希望向视图发送少量临时数据。有三种方法: </p><ul><li>ViewBag</li><li>ViewData</li><li>TempData</li></ul><h3 id="ViewBag"><a href="#ViewBag" class="headerlink" title="ViewBag"></a>ViewBag</h3><p>viewBag 是 ControllerBase 类的动态类型属性，ControllerBase 是之前我们说的 Controller 类型的基类。</p><p>使用点语法将属性附加到 ViewBag，并在控制器中为其指定其值，可以在视图中使用 @ViewBag. 方法获取该属性。<br>注意: ViewBag 仅将数据从控制器传输到视图，反之不行。如果发生重定向，ViewBag 值将为 null。<br>ViewBag 是 ViewData 的包装器。</p><h3 id="ViewData"><a href="#ViewData" class="headerlink" title="ViewData"></a>ViewData</h3><p>ViewData 类似于 ViewBag。它在将数据从 Controller 传输到 View 时非常有用。<br>ViewData 是一个字典，可以包含键值对，其中每个键必须是字符串。</p><p>ViewData 仅将数据从控制器传输到视图。它仅在当前请求期间有效。</p><p>注意: 我们必须将 ViewData 值强制转换为适当的数据类型。<br>ViewData 和 ViewBag 都在内部使用相同的字典。因此，您不能将 ViewData Key 与 ViewBag 的属性名称匹配，否则会抛出运行时异常。</p><h3 id="TempData"><a href="#TempData" class="headerlink" title="TempData"></a>TempData</h3><p>TempData 可用于存储可在后续请求中使用的临时数据。在完成后续请求后，TempData 将被清除。</p><p>当您想要将非敏感数据从一个 Action 方法传输到相同或不同控制器的另一个 Action 方法以及重定向时，TempData 非常有用。</p><p>假如我们在第一个请求中的 TempData 中添加了测试数据，在第二个后续请求中，我们从 TempData 访问了我们存储在第一个请求中的测试数据。但是，您无法在第三个请求中获取相同的数据，因为 TempData 将在第二个请求后被清除。</p><p>调用 TempData.Keep() 可以在第三个连续请求中保留 TempData 值。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇，我们讲讲数据验证、布局试图以及 Controller 向 View 传递少量数据的方式。&lt;/p&gt;
&lt;h2 id=&quot;数据注释-DataAnnotations&quot;&gt;&lt;a href=&quot;#数据注释-DataAnnotations&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/ASP.Net%20MVC(%E5%85%AB)/"/>
    <id>https://1ess.github.io/ASP.Net%20MVC(%E5%85%AB)/</id>
    <published>2021-07-14T03:38:32.409Z</published>
    <updated>2021-07-14T03:38:32.409Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇，我们详细讲讲 .Net MVC 中的 Filter。</p><p>默认情况，在 ASP.NET MVC 中，用户请求被路由到适当的控制器和 Action 方法。<br>但是，在某些情况下，您可能希望在执行 Action 方法之前或之后执行某些逻辑。ASP.NET MVC 为此提供了过滤器(filters)。</p><p>ASP.NET MVC Filter 是一个自定义类，您可以在其中编写自定义逻辑，以便在执行 Action 方法之前或之后执行。<br>过滤器(filters)可以以声明或编程方式应用于 Action 方法或控制器。<br>声明方式是指通过提供一个 Filter attribute 给 Action 方法或控制器。<br>编程方式是指通过实现对应的接口。</p><p>MVC 提供不同类型的过滤器: </p><table><thead><tr><th>过滤器类型</th><th>描述</th><th>内建过滤器</th><th>Interface</th></tr></thead><tbody><tr><td>Authorization filters</td><td>在执行 Action 方法之前执行身份验证和授权。</td><td>[Authorize], [RequireHttps]</td><td>IAuthorizationFilter</td></tr><tr><td>Action  filters</td><td>在执行 Action 方法之前执行某些操作。</td><td></td><td>IActionFilter</td></tr><tr><td>Result  filters</td><td>在执行 view result 之前执行身份验证和授权。</td><td>[OutputCache]</td><td>IResultFilter</td></tr><tr><td>Exception  filters</td><td>如果在执行 ASP.NET MVC 管道期间抛出未处理的异常，则执行某些操作。</td><td>[HandleError]</td><td>IExceptionFilter</td></tr></tbody></table><p>如: 当发生未处理的异常时，此内置 HandleErrorAttribute 类在默认情况下呈现 Shared 文件夹中包含的 Error.cshtml。<br>注意: 请确保在 web.config 的 System.web 部分中启用了 CustomError 模式，以便 HandleErrorAttribute 正常工作。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>customErrors</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>On<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，未处理的异常是指 try-catch 块未处理的异常。</p><h2 id="注册-Filters"><a href="#注册-Filters" class="headerlink" title="注册 Filters"></a>注册 Filters</h2><hr><p>Filters 可以被应用于三个等级: </p><ul><li>Global 等级</li><li>Controller 等级</li><li>Action 方法等级</li></ul><h3 id="Global-等级"><a href="#Global-等级" class="headerlink" title="Global 等级"></a>Global 等级</h3><p>在 Global.asax.cs 文件的 Applicaton_Start 方法中，调用 FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters); 来注册一个全局等级的过滤器。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">Application_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    FilterConfig<span class="token punctuation">.</span><span class="token function">RegisterGlobalFilters</span><span class="token punctuation">(</span>GlobalFilters<span class="token punctuation">.</span>Filters<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>默认情况下，在使用 Visual Studio 创建的每个 MVC 应用程序中，[HandleError]过滤器在 MVC 应用程序中全局应用。</p><h3 id="Controller-等级"><a href="#Controller-等级" class="headerlink" title="Controller 等级"></a>Controller 等级</h3><p>过滤器也可以应用于控制器类。因此，如果将过滤器应用于控制器类，则过滤器将适用于 Controller 类的所有 Action 方法。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span>HandleError<span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeController</span> <span class="token punctuation">:</span> Controller<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ActionResult <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Action-方法等级"><a href="#Action-方法等级" class="headerlink" title="Action 方法等级"></a>Action 方法等级</h3><p>也可以将过滤器应用于单个 Action 方法。因此，过滤器仅适用于该特定的 Action 方法。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeController</span> <span class="token punctuation">:</span> Controller<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>HandleError<span class="token punctuation">]</span>    <span class="token keyword">public</span> ActionResult <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Filter-顺序"><a href="#Filter-顺序" class="headerlink" title="Filter 顺序"></a>Filter 顺序</h2><hr><p>如上所述，MVC 包括不同类型的过滤器，并且多个过滤器可以应用于单个控制器类或动作方法。因此，过滤器按以下顺序运行: </p><ul><li>Authorization filters</li><li>Action filters</li><li>Result filters</li><li>Exception filters</li></ul><h2 id="Action-Filters"><a href="#Action-Filters" class="headerlink" title="Action Filters"></a>Action Filters</h2><hr><h3 id="OutputCache-attribute"><a href="#OutputCache-attribute" class="headerlink" title="OutputCache attribute"></a>OutputCache attribute</h3><p>OutputCache 是​​一个内置的动作过滤器 attribute，可以应用于我们想要缓存输出的 Action 方法。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token function">OutputCache</span><span class="token punctuation">(</span>Duration<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> ActionResult <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义-Action-Filter"><a href="#自定义-Action-Filter" class="headerlink" title="自定义 Action Filter"></a>自定义 Action Filter</h3><p>您可以通过两种方式创建自定义 Action 过滤器: </p><ul><li>实现 IActionFilter 接口，以及使用 FilterAttribute 类</li><li>继承 ActionFilterAttribute 抽象类</li></ul><p>IActionFilter 接口要实现下面方法: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">void</span> <span class="token function">OnActionExecuted</span><span class="token punctuation">(</span>ActionExecutedContext filterContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OnActionExecuting</span><span class="token punctuation">(</span>ActionExecutingContext filterContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ActionFilterAttribute 抽象类则要 override 如下方法: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">void</span> <span class="token function">OnActionExecuted</span><span class="token punctuation">(</span>ActionExecutedContext filterContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OnActionExecuting</span><span class="token punctuation">(</span>ActionExecutingContext filterContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OnResultExecuted</span><span class="token punctuation">(</span>ResultExecutedContext filterContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OnResultExecuting</span><span class="token punctuation">(</span>ResultExecutingContext filterContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Action 过滤器通常用于日志记录，缓存，授权等。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAttribute</span> <span class="token punctuation">:</span> ActionFilterAttribute<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnActionExecuted</span><span class="token punctuation">(</span>ActionExecutedContext filterContext<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"OnActionExecuted"</span><span class="token punctuation">,</span> filterContext<span class="token punctuation">.</span>RouteData<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnActionExecuting</span><span class="token punctuation">(</span>ActionExecutingContext filterContext<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"OnActionExecuting"</span><span class="token punctuation">,</span> filterContext<span class="token punctuation">.</span>RouteData<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnResultExecuted</span><span class="token punctuation">(</span>ResultExecutedContext filterContext<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"OnResultExecuted"</span><span class="token punctuation">,</span> filterContext<span class="token punctuation">.</span>RouteData<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnResultExecuting</span><span class="token punctuation">(</span>ResultExecutingContext filterContext<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"OnResultExecuting "</span><span class="token punctuation">,</span> filterContext<span class="token punctuation">.</span>RouteData<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">Log</span><span class="token punctuation">(</span><span class="token keyword">string</span> methodName<span class="token punctuation">,</span> RouteData routeData<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> controllerName <span class="token operator">=</span> routeData<span class="token punctuation">.</span>Values<span class="token punctuation">[</span><span class="token string">"controller"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> actionName <span class="token operator">=</span> routeData<span class="token punctuation">.</span>Values<span class="token punctuation">[</span><span class="token string">"action"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> message <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;0&amp;#125;- controller:&amp;#123;1&amp;#125; action:&amp;#123;2&amp;#125;"</span><span class="token punctuation">,</span> methodName<span class="token punctuation">,</span>                                                                     controllerName<span class="token punctuation">,</span>                                                                     actionName<span class="token punctuation">)</span><span class="token punctuation">;</span>        Debug<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">[</span>Log<span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FooController</span> <span class="token punctuation">:</span> Controller<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ActionResult <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ActionResult <span class="token function">About</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ActionResult <span class="token function">Contact</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇，我们详细讲讲 .Net MVC 中的 Filter。&lt;/p&gt;
&lt;p&gt;默认情况，在 ASP.NET MVC 中，用户请求被路由到适当的控制器和 Action 方法。&lt;br&gt;但是，在某些情况下，您可能希望在执行 Action 方法之前或之后执行某些逻辑。ASP.NET </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/ASP.Net%20MVC(%E4%B9%9D)/"/>
    <id>https://1ess.github.io/ASP.Net%20MVC(%E4%B9%9D)/</id>
    <published>2021-07-14T03:38:32.409Z</published>
    <updated>2021-07-14T03:38:32.409Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇，我们详细讲讲 .Net MVC 中的 Bundling 和 Minification。</p><h2 id="Bundling"><a href="#Bundling" class="headerlink" title="Bundling"></a>Bundling</h2><hr><p>在 MVC 4 中引入了 Bundling 和 Minification 技术以改善请求加载时间。Bundling 允许我们将来自服务器的一堆静态文件加载到一个 http 请求中。会通过最小化文件大小和请求数量来加快页面加载速度。</p><h2 id="Minification"><a href="#Minification" class="headerlink" title="Minification"></a>Minification</h2><hr><p>Minification 技术通过删除不必要的空格和注释以及将变量名缩短为一个字符来优化脚本或 css 文件大小。如:<br>源文件如下: </p><pre class="line-numbers language-javascript"><code class="language-javascript">sayHello <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//this is comment</span>    <span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token string">"Hello"</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上 JavaScript 将被优化并最小化到以下脚本中: </p><pre class="line-numbers language-javascript"><code class="language-javascript">sayHello<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">var</span> t<span class="token operator">=</span><span class="token string">"Hello"</span><span class="token operator">+</span>n<span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Bundle-Types"><a href="#Bundle-Types" class="headerlink" title="Bundle Types"></a>Bundle Types</h2><hr><p>MVC 5 在 System.web.Optimization 命名空间中包含以下 bundle 类: </p><ul><li>ScriptBundle: ScriptBundle 负责单个或多个脚本文件的 JavaScript 缩小</li><li>StyleBundle: StyleBundle 负责单个或多个样式表文件的 CSS 缩小。</li><li>DynamicFolderBundle: 表示 ASP.NET 从包含相同类型文件的文件夹创建的 Bundle 对象。</li></ul><p>所有上述 bundle 类都包含在 System.Web.Optimization.Bundle 命名空间中，并从 Bundle 类派生。</p><h2 id="ScriptBundle-in-ASP-NET-MVC"><a href="#ScriptBundle-in-ASP-NET-MVC" class="headerlink" title="ScriptBundle in ASP.NET MVC"></a>ScriptBundle in ASP.NET MVC</h2><hr><p>我们将学习如何在一个 http 请求中创建多个 JavaScript 文件的包。</p><p>在 MVC 文件夹中打开 App_Start/BundleConfig.cs 文件。BundleConfig.cs 文件默认由 MVC 框架创建。应该在 BundleConfig.RegisterBundles 方法中编写所有 Bundle 代码。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BundleConfig</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 有关捆绑的详细信息，请访问 https://go.microsoft.com/fwlink/?LinkId=301862</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">RegisterBundles</span><span class="token punctuation">(</span>BundleCollection bundles<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        bundles<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ScriptBundle</span><span class="token punctuation">(</span><span class="token string">"~/bundles/jquery"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>                        <span class="token string">"~/Scripts/jquery-&amp;#123;version&amp;#125;.js"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bundles<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ScriptBundle</span><span class="token punctuation">(</span><span class="token string">"~/bundles/jqueryval"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>                        <span class="token string">"~/Scripts/jquery.validate*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 使用要用于开发和学习的 Modernizr 的开发版本。然后，当你做好</span>            <span class="token comment" spellcheck="true">// 生产准备就绪，请使用 https://modernizr.com 上的生成工具仅选择所需的测试。</span>        bundles<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ScriptBundle</span><span class="token punctuation">(</span><span class="token string">"~/bundles/modernizr"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>                        <span class="token string">"~/Scripts/modernizr-*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bundles<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ScriptBundle</span><span class="token punctuation">(</span><span class="token string">"~/bundles/bootstrap"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>                      <span class="token string">"~/Scripts/bootstrap.js"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bundles<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StyleBundle</span><span class="token punctuation">(</span><span class="token string">"~/Content/css"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>                      <span class="token string">"~/Content/bootstrap.css"</span><span class="token punctuation">,</span>                      <span class="token string">"~/Content/site.css"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BundleTable<span class="token punctuation">.</span>EnableOptimizations <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>通过将包名称指定为构造函数参数来创建 ScriptBundle 类的实例，此捆绑包名称是以 ~/ 开头的虚拟路径。建议提供一个易于识别的 bundle 路径</li><li>使用 Include 方法将一个或多个JS文件的相对路径的作为参数，添加到 bundle 中</li><li>将 bundle 添加到 BundleCollection 实例中，该实例在 RegisterBundle 方法中指定为参数。</li><li>BundleTable.EnableOptimizations = true 在 Debug 下启用优化，还可以使用 bundle 类的 IncludeDirectory 方法添加特定目录下的所有文件: </li></ol><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">RegisterBundles</span><span class="token punctuation">(</span>BundleCollection bundles<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                bundles<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ScriptBundle</span><span class="token punctuation">(</span><span class="token string">"~/bundles/scripts"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IncludeDirectory</span><span class="token punctuation">(</span><span class="token string">"~/Scripts/"</span><span class="token punctuation">,</span> <span class="token string">"*.js"</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>我们在 Global.asax.cs 文件的 Application_Start 事件调用方法: </li></ol><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">Application_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    BundleConfig<span class="token punctuation">.</span><span class="token function">RegisterBundles</span><span class="token punctuation">(</span>BundleTable<span class="token punctuation">.</span>Bundles<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用通配符"><a href="#使用通配符" class="headerlink" title="使用通配符"></a>使用通配符</h3><p>有时第三方脚本文件包含脚本文件名称中的版本。我们就可以使用通配符: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BundleConfig</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">RegisterBundles</span><span class="token punctuation">(</span>BundleCollection bundles<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    bundles<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ScriptBundle</span><span class="token punctuation">(</span><span class="token string">"~/bundles/jquery"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span> <span class="token string">"~/Scripts/jquery-&amp;#123;version&amp;#125;.js"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在-Razor-View-中包含-ScriptBundle"><a href="#在-Razor-View-中包含-ScriptBundle" class="headerlink" title="在 Razor View 中包含 ScriptBundle"></a>在 Razor View 中包含 ScriptBundle</h2><hr><p>使用 @Scripts.Render() 方法在运行时包含指定的脚本包。</p><h2 id="StyleBundle"><a href="#StyleBundle" class="headerlink" title="StyleBundle"></a>StyleBundle</h2><hr><p>与 ScriptBundle 使用基本类似，只是创建的是 StyleBundle 实例，并且在 Razor 中使用 @Styles.Render() 方法在运行时包含该 CSS bundle。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇，我们详细讲讲 .Net MVC 中的 Bundling 和 Minification。&lt;/p&gt;
&lt;h2 id=&quot;Bundling&quot;&gt;&lt;a href=&quot;#Bundling&quot; class=&quot;headerlink&quot; title=&quot;Bundling&quot;&gt;&lt;/a&gt;Bundlin</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/ASP.Net%20MVC(%E5%8D%81)/"/>
    <id>https://1ess.github.io/ASP.Net%20MVC(%E5%8D%81)/</id>
    <published>2021-07-14T03:38:32.409Z</published>
    <updated>2021-07-14T03:38:32.409Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇，我们详细讲讲 ASP.Net MVC 中的 Area。</p><p>我们知道在大型应用程序可以包含大量控制器、视图和模型类，因此，使用默认的 ASP.NET MVC 项目结构维护大量视图、模型和控制器可能变得难以管理。</p><p>ASP.NET MVC 2 引入了 Area。Area 允许我们将大型应用程序划分为更小的单元，其中每个单元包含单独的 MVC 文件夹结构，与默认的 MVC 文件夹结构相同。<br>每个 Area 都包含 {area name}AreaRegistration.cs 文件中的 {area name}AreaRegistration 类。</p><p>{area name}AreaRegistration 类重写 RegisterArea 方法以映射该区域的路由: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminAreaRegistration</span> <span class="token punctuation">:</span> AreaRegistration <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">string</span> AreaName     <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">get</span>         <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"Admin"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">RegisterArea</span><span class="token punctuation">(</span>AreaRegistrationContext context<span class="token punctuation">)</span>     <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">MapRoute</span><span class="token punctuation">(</span>            <span class="token string">"Admin_default"</span><span class="token punctuation">,</span>            <span class="token string">"Admin/&amp;#123;controller&amp;#125;/&amp;#123;action&amp;#125;/&amp;#123;id&amp;#125;"</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> action <span class="token operator">=</span> <span class="token string">"Index"</span><span class="token punctuation">,</span> id <span class="token operator">=</span> UrlParameter<span class="token punctuation">.</span>Optional <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的示例中，任何以 admin 开头的 URL 都将由 Area 文件夹下的管理文件夹结构中包含的控制器处理。如: <a href="http://localhost/admin/profile">http://localhost/admin/profile</a> 将由 Areas/admin/controller/ProfileController 处理。</p><p>注意，所有 area 必须在 Global.asax.cs 中的 Application_Start 事件中注册: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">Application_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        AreaRegistration<span class="token punctuation">.</span><span class="token function">RegisterAllAreas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过这种方式，您可以为大型应用程序创建和维护多个 Area。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇，我们详细讲讲 ASP.Net MVC 中的 Area。&lt;/p&gt;
&lt;p&gt;我们知道在大型应用程序可以包含大量控制器、视图和模型类，因此，使用默认的 ASP.NET MVC 项目结构维护大量视图、模型和控制器可能变得难以管理。&lt;/p&gt;
&lt;p&gt;ASP.NET MVC 2 引</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/ASP.Net%20API(%E4%B8%80)/"/>
    <id>https://1ess.github.io/ASP.Net%20API(%E4%B8%80)/</id>
    <published>2021-07-14T03:38:32.409Z</published>
    <updated>2021-07-14T03:38:32.409Z</updated>
    
    <content type="html"><![CDATA[<p>ASP.Net Web MVC 的知识我们也复习了大概，基础内容已经覆盖了大部分，从本篇开始，我们来认识一下 ASP.Net Web API。</p><h2 id="Web-API-是什么"><a href="#Web-API-是什么" class="headerlink" title="Web API 是什么"></a>Web API 是什么</h2><hr><p>简单来说，API 是某种接口，它具有一组允许程序员访问应用程序，操作系统或其他服务的特定功能或数据的功能。<br>Web API 顾名思义，是一个可以使用 HTTP 协议访问的 Web 上的 API。这是一个概念，而不是一种技术。我们可以使用不同的技术(如 Java，.NET 等)构建 Web API。</p><h2 id="ASP-NET-Web-API"><a href="#ASP-NET-Web-API" class="headerlink" title="ASP.NET Web API"></a>ASP.NET Web API</h2><hr><p>ASP.NET Web API 是一个可扩展的框架，用于构建基于 HTTP 的服务。它的工作方式与 ASP.NET MVC Web 应用程序的工作方式大致相同，只是它将数据作为响应而不是 HTML 视图。</p><h3 id="创建-Web-API-项目"><a href="#创建-Web-API-项目" class="headerlink" title="创建 Web API 项目"></a>创建 Web API 项目</h3><p>可以通过两种方式创建 Web API 项目。</p><ul><li>带有 MVC 项目的 Web API</li><li>独立 Web API 项目</li></ul><p>注意: 通常我们直接创建带有 MVC 项目的 Web API。</p><h3 id="带有-MVC-项目的-Web-API"><a href="#带有-MVC-项目的-Web-API" class="headerlink" title="带有 MVC 项目的 Web API"></a>带有 MVC 项目的 Web API</h3><p>此项目与默认 MVC 项目相同，其中包含 Web API 的两个特定文件，App_Start 文件夹中的 WebApiConfig.cs 和 Controllers 文件夹中的 ValuesController.cs</p><p>WebApiConfig.cs 是 Web API 的配置文件。您可以为 Web API 配置路由和其他内容，类似于 RouteConfig.cs 用于配置 MVC 路由。它还默认创建 Web API 控制器 ValuesController.cs。</p><h2 id="Web-API-Controller"><a href="#Web-API-Controller" class="headerlink" title="Web API Controller"></a>Web API Controller</h2><hr><p>Web API Controller 类似于 ASP.NET MVC Controller。它处理传入的 HTTP 请求并将响应发送回调用者。</p><p>Web API Controller 是一个类，可以在 Controllers 文件夹下或项目根文件夹下的任何其他文件夹下创建。控制器类的名称必须以 Controller 结尾，并且必须继承自 System.Web.Http.ApiController。同 MVC 一样，控制器的所有 public 方法都称为 Action 方法。</p><p>基于传入的请求 URL 和 HTTP 动词(GET / POST / PUT / PATCH / DELETE)，Web API 决定执行哪个 Web API Controller 和 Action 方法，例如 Get() 方法和 GetFoos() 方法都将处理 HTTP GET 请求，Post() 方法将处理 HTTP POST 请求，Put() 方法将处理 HTTP PUT 请求，Delete() 方法将处理上述 Web API 的 HTTP DELETE 请求。</p><p>如果你想编写不以 HTTP 动词开头的方法，那么你可以在方法上应用适当的 HttpVerbs Attribute，如 HttpGet、HttpPost、HttpPut 等，与 MVC 控制器相同。</p><h3 id="Action-方法命名约定"><a href="#Action-方法命名约定" class="headerlink" title="Action 方法命名约定"></a>Action 方法命名约定</h3><p>Action 方法名称可以与 HTTP 动词相同，如 Get、Post、Put、Patch 或 Delete。也可以使用 HTTP 谓词附加任何后缀以提高可读性，如 GetFoos()、PostBar() 等。</p><h2 id="配置-Web-API"><a href="#配置-Web-API" class="headerlink" title="配置 Web API"></a>配置 Web API</h2><hr><p>Web API 只支持基于代码的配置，它无法在 Web.config 文件中配置。<br>我们可以配置 Web API 来自定义 Web API 托管和组件的行为，例如 Route、Formatter、Filters、DependencyResolver、MessageHandler、ParamterBindingRules 等。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//WebApiConfig.cs</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WebApiConfig</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Register</span><span class="token punctuation">(</span>HttpConfiguration config<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Web API 配置和服务</span>        <span class="token comment" spellcheck="true">// Web API 路由</span>        config<span class="token punctuation">.</span><span class="token function">MapHttpAttributeRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span>Routes<span class="token punctuation">.</span><span class="token function">MapHttpRoute</span><span class="token punctuation">(</span>            name<span class="token punctuation">:</span> <span class="token string">"DefaultApi"</span><span class="token punctuation">,</span>            routeTemplate<span class="token punctuation">:</span> <span class="token string">"api/&amp;#123;controller&amp;#125;/&amp;#123;id&amp;#125;"</span><span class="token punctuation">,</span>            defaults<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id <span class="token operator">=</span> RouteParameter<span class="token punctuation">.</span>Optional <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Global.asax</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">Application_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    GlobalConfiguration<span class="token punctuation">.</span><span class="token function">Configure</span><span class="token punctuation">(</span>WebApiConfig<span class="token punctuation">.</span>Register<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HttpConfiguration 主类包含以下属性，可以使用这些属性覆盖 Web API 的默认行为: </p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>DependencyResolver</td><td>获取或设置依赖项注入的依赖项解析程序</td></tr><tr><td>Filters</td><td>获取或设置 filters</td></tr><tr><td>Formatters</td><td>获取或设置 media-type 格式化</td></tr><tr><td>IncludeErrorDetailPolicy</td><td>获取或设置一个指示错误消息中是否应包含错误详细信息的值</td></tr><tr><td>MessageHandlers</td><td>获取或设置 message handlers</td></tr><tr><td>ParameterBindingRules</td><td>获取有关如何绑定参数的规则集合。</td></tr><tr><td>Routes</td><td>获取为 Web API 配置的路由集合</td></tr><tr><td>Services</td><td>获取 Web API 服务</td></tr></tbody></table><p>接下来，我们会详细讲解每个属性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ASP.Net Web MVC 的知识我们也复习了大概，基础内容已经覆盖了大部分，从本篇开始，我们来认识一下 ASP.Net Web API。&lt;/p&gt;
&lt;h2 id=&quot;Web-API-是什么&quot;&gt;&lt;a href=&quot;#Web-API-是什么&quot; class=&quot;headerlink</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/ASP.Net%20API(%E4%BA%8C)/"/>
    <id>https://1ess.github.io/ASP.Net%20API(%E4%BA%8C)/</id>
    <published>2021-07-14T03:38:32.409Z</published>
    <updated>2021-07-14T03:38:32.409Z</updated>
    
    <content type="html"><![CDATA[<p>之前我们说过 Web MVC 中的路由，本篇，我们看看如何配置 Web API 路由。</p><p>Web API 路由类似于 ASP.NET MVC 路由。它将传入的 HTTP 请求路由到 Web API Controller 上的特定 Action 方法。</p><p>Web API 支持两种方式的路由: </p><ul><li>基于约定的路由(Convention-Based Routing)</li><li>特性路由(Attribute Routing)</li></ul><h2 id="基于约定的路由"><a href="#基于约定的路由" class="headerlink" title="基于约定的路由"></a>基于约定的路由</h2><hr><p>在基于约定的路由中，Web API 使用路由模板来确定要执行的 Controller 和 Action 方法。必须至少将一个路由模板添加到路由表中才能处理各种 HTTP 请求。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WebApiConfig</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Register</span><span class="token punctuation">(</span>HttpConfiguration config<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Enable attribute routing</span>        config<span class="token punctuation">.</span><span class="token function">MapHttpAttributeRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Add default route using convention-based routing</span>        config<span class="token punctuation">.</span>Routes<span class="token punctuation">.</span><span class="token function">MapHttpRoute</span><span class="token punctuation">(</span>            name<span class="token punctuation">:</span> <span class="token string">"DefaultApi"</span><span class="token punctuation">,</span>            routeTemplate<span class="token punctuation">:</span> <span class="token string">"api/&amp;#123;controller&amp;#125;/&amp;#123;id&amp;#125;"</span><span class="token punctuation">,</span>            defaults<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id <span class="token operator">=</span> RouteParameter<span class="token punctuation">.</span>Optional <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的 config.MapHttpAttributeRoutes() 方法作用是启用特性路由。<br>config.Routes 是 HttpRouteCollection 类型的路由表或路由集合，使用 MapHttpRoute() 扩展方法在路由表中添加 DefaultApi 路由。</p><p>可以创建 IHttpRoute 实例并手动将其添加到集合中，如下: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// define route</span>IHttpRoute defaultRoute <span class="token operator">=</span> config<span class="token punctuation">.</span>Routes<span class="token punctuation">.</span><span class="token function">CreateRoute</span><span class="token punctuation">(</span><span class="token string">"api/&amp;#123;controller&amp;#125;/&amp;#123;id&amp;#125;"</span><span class="token punctuation">,</span>                                             <span class="token keyword">new</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id <span class="token operator">=</span> RouteParameter<span class="token punctuation">.</span>Optional <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Add route</span>config<span class="token punctuation">.</span>Routes<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"DefaultApi"</span><span class="token punctuation">,</span> defaultRoute<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果 Web API 框架找不到传入请求的匹配路由，同 Web MVC 一样，将发送 404 错误响应。<br>注意: Web API 还支持与 ASP.NET MVC 相同的路由，在 URL 中包含 Action 方法名称。</p><h3 id="多路由"><a href="#多路由" class="headerlink" title="多路由"></a>多路由</h3><p>可以使用 HttpConfiguration 对象在 Web API 中配置多个路由: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WebApiConfig</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Register</span><span class="token punctuation">(</span>HttpConfiguration config<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">MapHttpAttributeRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// foo route</span>        config<span class="token punctuation">.</span>Routes<span class="token punctuation">.</span><span class="token function">MapHttpRoute</span><span class="token punctuation">(</span>            name<span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">,</span>            routeTemplate<span class="token punctuation">:</span> <span class="token string">"api/foo/&amp;#123;id&amp;#125;"</span><span class="token punctuation">,</span>            defaults<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> controller<span class="token operator">=</span><span class="token string">"foo"</span><span class="token punctuation">,</span> id <span class="token operator">=</span> RouteParameter<span class="token punctuation">.</span>Optional <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            constraints<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id <span class="token operator">=</span><span class="token string">"/d+"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// default route</span>        config<span class="token punctuation">.</span>Routes<span class="token punctuation">.</span><span class="token function">MapHttpRoute</span><span class="token punctuation">(</span>            name<span class="token punctuation">:</span> <span class="token string">"DefaultApi"</span><span class="token punctuation">,</span>            routeTemplate<span class="token punctuation">:</span> <span class="token string">"api/&amp;#123;controller&amp;#125;/&amp;#123;id&amp;#125;"</span><span class="token punctuation">,</span>            defaults<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id <span class="token operator">=</span> RouteParameter<span class="token punctuation">.</span>Optional <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在 DefaultApi 路由之前配置了 Foo 路由。因此，任何传入的请求将首先与 Foo 路由匹配，如果不匹配，则再与 DefaultApi 路由进行匹配。</p><p>注意: 在路由模板中使用 api 的原因只是为了避免 MVC 控制器和 Web API 控制器混淆。</p><h3 id="特性路由"><a href="#特性路由" class="headerlink" title="特性路由"></a>特性路由</h3><p>Web API 2 支持特性路由。顾名思义，属性路由使用[Route()]特性来定义路由。该特性可以应用于任何 Controller 或 Action 方法。</p><p>要使用 Web API 进行特性路由，必须通过调用 config.MapHttpAttributeRoutes() 方法在 WebApiConfig 中启用它。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FooController</span> <span class="token punctuation">:</span> ApiController<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token function">Route</span><span class="token punctuation">(</span><span class="token string">"api/foo/bars"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">public</span> IEnumerable<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">"bar1"</span><span class="token punctuation">,</span> <span class="token string">"bar2"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>则我们通过 <a href="http://localhost:1234/api/foo/bars">http://localhost:1234/api/foo/bars</a> 访问上面的 Get 方法。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前我们说过 Web MVC 中的路由，本篇，我们看看如何配置 Web API 路由。&lt;/p&gt;
&lt;p&gt;Web API 路由类似于 ASP.NET MVC 路由。它将传入的 HTTP 请求路由到 Web API Controller 上的特定 Action 方法。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/ASP.Net%20API(%E4%B8%89)/"/>
    <id>https://1ess.github.io/ASP.Net%20API(%E4%B8%89)/</id>
    <published>2021-07-14T03:38:32.409Z</published>
    <updated>2021-07-14T03:38:32.409Z</updated>
    
    <content type="html"><![CDATA[<p>了解了 Web API 如何将 HTTP 请求路由到 Controller 和 Action 方法。我们将再看看 Web API 如何将 HTTP 请求数据绑定到操作方法的参数。</p><h2 id="Model-Binding"><a href="#Model-Binding" class="headerlink" title="Model Binding"></a>Model Binding</h2><hr><p>Web API 将操作方法​​参数与 URL 的 Query String 或 Request Body 绑定，具体取决于参数类型。<br>默认情况下，如果参数类型是 .NET 基本类型，则它从 Query String 设置参数的值，如果参数类型是复杂类型，则 Web API 会尝试默认从 Request Body 中获取值。</p><h3 id="默认-Binding-规则"><a href="#默认-Binding-规则" class="headerlink" title="默认 Binding 规则"></a>默认 Binding 规则</h3><table><thead><tr><th>HTTP Method</th><th>Query String</th><th>Request Body</th></tr></thead><tbody><tr><td>GET</td><td>Primitive Type，Complex Type</td><td>NA</td></tr><tr><td>POST</td><td>Primitive Type</td><td>Complex Type</td></tr><tr><td>PUT</td><td>Primitive Type</td><td>Complex Type</td></tr><tr><td>PATCH</td><td>Primitive Type</td><td>Complex Type</td></tr><tr><td>DELETE</td><td>Primitive Type，Complex Type</td><td>NA</td></tr></tbody></table><h3 id="FromUri-和-FromBody"><a href="#FromUri-和-FromBody" class="headerlink" title="[FromUri] 和 [FromBody]"></a>[FromUri] 和 [FromBody]</h3><p>使用 [FromUri] 特性强制 Web API 从 Query String 获取复杂类型的值，[FromBody] 特性从 Request Body 获取基本类型的值。</p><p>注意: FromBody 特性只能应用于 Action 方法的一个基本参数。它不能应用于同一个 Action 方法的多个原始参数。</p><p>注意与 Web MVC 的区别:<br>Web MVC 中，不论是复杂类型还是简单类型，只要是 Get 请求，都从 Query String 获取值，只要是 Post 请求，都从 Request Body 中获取值。<br>Web API 中，默认情况，简单类型从 Query String 中获取值，复杂类型根据请求方法: Get请求，从 Query String 获取值，Post 请求从 Request Body 获取值。<br>我们可以使用 [FromUri] 和 [FromBody] 特性强制 Post 请求中简单类型可以从 Request Body 获取，复杂类型可以从 Query String 获取。</p><h2 id="Action-方法返回类型"><a href="#Action-方法返回类型" class="headerlink" title="Action 方法返回类型"></a>Action 方法返回类型</h2><hr><p>Web API Action 方法可以具有以下返回类型: </p><ul><li>void</li><li>原始类型或复杂类型</li><li>HttpResponseMessage</li><li>IHttpActionResult</li></ul><h3 id="void"><a href="#void" class="headerlink" title="void"></a>void</h3><p>并非所有 Action 方法都必须返回某些内容。它可以有 void 返回类型。</p><h3 id="原始类型或复杂类型"><a href="#原始类型或复杂类型" class="headerlink" title="原始类型或复杂类型"></a>原始类型或复杂类型</h3><p>Action 方法可以返回原始或其他自定义复杂类型。</p><h3 id="HttpResponseMessage"><a href="#HttpResponseMessage" class="headerlink" title="HttpResponseMessage"></a>HttpResponseMessage</h3><p>Web API Controller 始终将 HttpResponseMessage 的对象返回到托管基础结构.<br>从 Action 方法发送 HttpResponseMessage 响应的优点是可以按照自己的方式配置响应。如状态码或错误消息等。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> HttpResponseMessage <span class="token function">Get</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token function">GetFooFromDB</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>foo <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Request<span class="token punctuation">.</span><span class="token function">CreateResponse</span><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>NotFound<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Request<span class="token punctuation">.</span><span class="token function">CreateResponse</span><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>OK<span class="token punctuation">,</span> foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="IHttpActionResult"><a href="#IHttpActionResult" class="headerlink" title="IHttpActionResult"></a>IHttpActionResult</h3><p>IHttpActionResult 是在 Web API 2(.NET 4.5)中引入的。 Web API 2 中的 Action 方法可以返回IHttpActionResult 类的实现，类似于 MVC 中的 ActionResult。</p><p>我们可以创建自己的类来实现 IHttpActionResult 或者使用 ApiController 类方法返回 IHttpActionResult 的对象。</p><p>下面是 ApiController 类方法，它返回实现 IHttpActionResult 接口的类的对象。</p><table><thead><tr><th>ApiController Method</th><th>描述</th></tr></thead><tbody><tr><td>BadRequest()</td><td>创建一个 BadRequestResult 对象，状态码 400.</td></tr><tr><td>Conflict()</td><td>创建一个 ConflictResult 对象，状态码 409.</td></tr><tr><td>Content()</td><td>创建一个特殊状态码和内容的 NegotiatedContentResult 对象</td></tr><tr><td>Created()</td><td>创建一个 CreatedNegotiatedContentResult 对象，状态码 201</td></tr><tr><td>CreatedAtRoute()</td><td>创建一个 CreatedAtRouteNegotiatedContentResult 对象，状态码 201</td></tr><tr><td>InternalServerError()</td><td>创建一个 InternalServerErrorResult  对象，状态码 500 Internal server error.</td></tr><tr><td>NotFound()</td><td>创建一个 NotFoundResult 对象，状态码 404</td></tr><tr><td>Ok()</td><td>创建一个 OkResult 对象，状态码 200</td></tr><tr><td>Redirect()</td><td>创建一个 RedirectResult 对象，状态码 302</td></tr><tr><td>RedirectToRoute()</td><td>创建一个 RedirectToRouteResult 对象，状态码 302</td></tr><tr><td>ResponseMessage()</td><td>创建一个特殊的 HttpResponseMessage 的 ResponseMessageResult 对象</td></tr><tr><td>StatusCode()</td><td>创建一个特殊状态码的 StatusCodeResult</td></tr><tr><td>Unauthorized()</td><td>创建一个 UnauthorizedResult 对象，状态码 401</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;了解了 Web API 如何将 HTTP 请求路由到 Controller 和 Action 方法。我们将再看看 Web API 如何将 HTTP 请求数据绑定到操作方法的参数。&lt;/p&gt;
&lt;h2 id=&quot;Model-Binding&quot;&gt;&lt;a href=&quot;#Model-Bind</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/ASP.Net%20API(%E5%9B%9B)/"/>
    <id>https://1ess.github.io/ASP.Net%20API(%E5%9B%9B)/</id>
    <published>2021-07-14T03:38:32.409Z</published>
    <updated>2021-07-14T03:38:32.409Z</updated>
    
    <content type="html"><![CDATA[<p>本篇，我们讲讲 Web API 如何处理不同格式的请求和响应数据。</p><p>Web API 包括对 JSON，XML，BSON 和 form-urlencoded 数据的内置支持，这意味着它会自动将请求/响应数据转换为这些格式(开箱即用)。</p><h2 id="Media-Type-Formatters"><a href="#Media-Type-Formatters" class="headerlink" title="Media-Type Formatters"></a>Media-Type Formatters</h2><hr><p>Web API 包括以下内置媒体类型格式化程序。</p><table><thead><tr><th>JsonMediaTypeFormatter</th><th>MIME Type</th><th>描述</th></tr></thead><tbody><tr><td>JsonMediaTypeFormatter</td><td>application/json, text/json</td><td>处理 JSON 格式</td></tr><tr><td>XmlMediaTypeFormatter</td><td>application/xml, text/xml</td><td>处理 XML 格式</td></tr><tr><td>FormUrlEncodedMediaTypeFormatter</td><td>application/x-www-form-urlencoded</td><td>处理 HTML form URL-encoded 数据</td></tr><tr><td>JQueryMvcFormUrlEncodedFormatter</td><td>application/x-www-form-urlencoded</td><td>处理 model-bound HTML form URL-encoded 数据</td></tr></tbody></table><p>GlobalConfiguration.Configuration.Formatters 返回包含所有格式化程序类: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FormattersController</span> <span class="token punctuation">:</span> ApiController<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> IEnumerable<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        IList<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> formatters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> GlobalConfiguration<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span>Formatters<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            formatters<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> formatters<span class="token punctuation">.</span><span class="token generic-method function">AsEnumerable<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*[    "System.Net.Http.Formatting.JsonMediaTypeFormatter",    "System.Net.Http.Formatting.XmlMediaTypeFormatter",    "System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter",    "System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter"]*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置-JSON-序列化"><a href="#配置-JSON-序列化" class="headerlink" title="配置 JSON 序列化"></a>配置 JSON 序列化</h2><hr><p>在内部，JsonMediaTypeFormatter 使用名为 Json.NET 的第三方开源库来执行序列化。</p><p>可以在 WebApiConfig 类中配置 JSON 格式化程序。JsonMediaTypeFormatter 类包括各种属性和方法，您可以使用它们自定义 JSON 序列化。例如，Web API 默认使用 PascalCase 写入 JSON 属性名称。要使用 camelCase 编写 JSON 属性名称，请在序列化程序设置上设置 CamelCasePropertyNamesContractResolver。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WebApiConfig</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Register</span><span class="token punctuation">(</span>HttpConfiguration config<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Web API 配置和服务</span>        <span class="token comment" spellcheck="true">// Web API 路由</span>        config<span class="token punctuation">.</span><span class="token function">MapHttpAttributeRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span>Routes<span class="token punctuation">.</span><span class="token function">MapHttpRoute</span><span class="token punctuation">(</span>        name<span class="token punctuation">:</span> <span class="token string">"DefaultApi"</span><span class="token punctuation">,</span>        routeTemplate<span class="token punctuation">:</span> <span class="token string">"api/&amp;#123;controller&amp;#125;/&amp;#123;id&amp;#125;"</span><span class="token punctuation">,</span>        defaults<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id <span class="token operator">=</span> RouteParameter<span class="token punctuation">.</span>Optional <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span>Formatters<span class="token punctuation">.</span>JsonFormatter<span class="token punctuation">.</span>SerializerSettings<span class="token punctuation">.</span>ContractResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CamelCasePropertyNamesContractResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//new DefaultContractResolver() 默认 PascalCase 命名属性 </span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们还可以自定义命名策略: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//WebApiConfig class</span>DefaultContractResolver defaultContractResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultContractResolver</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    NamingStrategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>config<span class="token punctuation">.</span>Formatters<span class="token punctuation">.</span>JsonFormatter<span class="token punctuation">.</span>SerializerSettings<span class="token punctuation">.</span>ContractResolver <span class="token operator">=</span> defaultContractResolver<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//MyStrategy class</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyStrategy</span><span class="token punctuation">:</span> NamingStrategy<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token keyword">string</span> <span class="token function">ResolvePropertyName</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//策略</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Web-API-Filters"><a href="#Web-API-Filters" class="headerlink" title="Web API Filters"></a>Web API Filters</h2><hr><p>Filters 可用于提供例如日志记录、异常处理、性能测量、身份验证和授权等功能。<br>Web API 使用 Filters 在执行 Action 方法前后来添加一些额外的逻辑。<br>Filters 实际上是可以应用于 Web API Controller 或 Action 方法的 Attribute。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本篇，我们讲讲 Web API 如何处理不同格式的请求和响应数据。&lt;/p&gt;
&lt;p&gt;Web API 包括对 JSON，XML，BSON 和 form-urlencoded 数据的内置支持，这意味着它会自动将请求/响应数据转换为这些格式(开箱即用)。&lt;/p&gt;
&lt;h2 id=&quot;M</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/%E9%97%B2%E8%81%8A/"/>
    <id>https://1ess.github.io/%E9%97%B2%E8%81%8A/</id>
    <published>2021-07-14T03:38:32.409Z</published>
    <updated>2021-07-14T03:38:32.409Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>你们这伙没胆量的下流东西！不要跑！来跟你们厮杀的只是个单枪匹马的骑士！</p></blockquote><p>一周多没更新 Blog 了，主要是最近又开始有些忙碌。</p><h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>最近这段时间，公司重新做了一款 toB 的 app。经过半年多服务器端开发，再回头进行移动端开发时，能从更高的角度来看待业务问题，进行更好的流程设计。我们可以从数据库的设计、用户的使用习惯等多维度进行评估，判断设计的合理性。例如某些表是否应该有某个字段，我们就可以根据取值的难易以及数据的冗余来平衡设计。</p><h3 id="个人"><a href="#个人" class="headerlink" title="个人"></a>个人</h3><p>最近利用休息时间重构了 Blog 风格，为 Bulma 打 call！<br>昨天晚上在京东云服务器上把 Jenkins 配置好了，以后终于不需要手动复制更新文件到服务器了，webhook 确实好用，以前在开发中忽略了自动化这一点，忽视了 CI 带来的便利。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p>买了一台米家热水壶，双十一打算买台 Dyson V7 吸尘器。这是第一次买小米的产品，也是第一次买的高端生活用品，希望不会让我失望吧。<br>上周还看了两季英剧:《贴身保镖》和《新闻编辑室》，值得观看。</p><h3 id="打算"><a href="#打算" class="headerlink" title="打算"></a>打算</h3><p>休闲上，最近打算再找两部英剧看看。学习上，最近看了一些关于前端工程自动化的东西，但是现在不打算深入研究。之后计划是数据库这方面，数据库是自己的一个短板，准备从其基本原理入手，直到工程实践全都好好看一下。</p><p><img src="https://cdn.jsdelivr.net/gh/1ess/cdn/contentImg/other/other2.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;你们这伙没胆量的下流东西！不要跑！来跟你们厮杀的只是个单枪匹马的骑士！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一周多没更新 Blog 了，主要是最近又开始有些忙碌。&lt;/p&gt;
&lt;h3 id=&quot;工作&quot;&gt;&lt;a href=&quot;#工作&quot; class=&quot;he</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E6%9C%89%E6%84%9F/"/>
    <id>https://1ess.github.io/%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E6%9C%89%E6%84%9F/</id>
    <published>2021-07-14T03:38:32.409Z</published>
    <updated>2021-07-14T03:38:32.409Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司准备开发微信小程序，之前也研究过一段时间，写过几个 Demo，感觉原生开发有些笨重，决定调研一些开源框架来加速开发，因为自己熟悉 React，经过对比，决定采用京东开源的 <a href="https://github.com/NervJS/taro">Taro</a>，没想到就此进入深坑。<br>从脚手架的使用，再到视图框架 Taro-UI，就是一个坑接着一个坑，已经到了让人恶心的地步，CLI 的使用我认为应该越简单越好，create-react-app 在我看来是构建工具的典范，好用而舒心，反观 Taro/CLI，真该多学习借鉴其他的优秀产品的 CLI 工具。个人感觉有些愧对一万多颗 star 所能产生的价值，虽然其官网宣传</p><blockquote><p>Taro 是一套遵循 React 语法规范的 多端开发 解决方案。</p></blockquote><p>但是我还是希望能在一端做好，步子别迈太大，容易<strong>扯到蛋</strong>。</p><p>再说腾讯官方开源的微信小程序 UI 框架 <a href="https://github.com/Tencent/weui-wxss">weui-wxss</a>，离上一个 release 版本已经一年了。阿里的很多开源项目更是如此，对比国外的很多开源项目，阿里产品唯 KPI 导向的严重程度可见一斑。</p><p>我并不是反对开源，只是希望开源之前能做到最起码的使用，而不是扔给社区一个烂摊子，等到实在无法填坑就舍弃之。</p><hr><p>再说说最近自己做了什么吧，虽然之前一直说要看看数据库，但是时间有些紧，只看了几章的《数据库系统概念》，还是准备看完理解理解再记一下笔记。</p><p>这两天把 Blog 用 React 重写了一下，并且基于 Jenkins 建立了自动构建，自动部署的功能，很多重复性的工作不需要人为来做了，解放生产力！ </p><p><img src="https://cdn.jsdelivr.net/gh/1ess/cdn/contentImg/other/other3.gif"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近公司准备开发微信小程序，之前也研究过一段时间，写过几个 Demo，感觉原生开发有些笨重，决定调研一些开源框架来加速开发，因为自己熟悉 React，经过对比，决定采用京东开源的 &lt;a href=&quot;https://github.com/NervJS/taro&quot;&gt;Taro&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/%E8%A3%85%E4%BF%AE/"/>
    <id>https://1ess.github.io/%E8%A3%85%E4%BF%AE/</id>
    <published>2021-07-14T03:38:32.409Z</published>
    <updated>2021-07-14T03:38:32.409Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>西风吹老洞庭波，一夜湘君白发多。<br>醉后不知天在水，满船清梦压星河。</p></blockquote><p>这两周家里忙着装修，跑了几次建材市场，每次坐公交来回要花上将近 4 个小时，都要坐吐了。<br>因为预算有限，选砖看砖都精打细算，因为女朋友比较喜欢暖色调，今年的主色又是偏冷，所以将近一百多家都看过之后，都没有特别满意的，没想到最后一家都不报什么希望了，反而眼前一亮。</p><p><img src="https://cdn.jsdelivr.net/gh/1ess/cdn/contentImg/83/1.jpg"><br><img src="https://cdn.jsdelivr.net/gh/1ess/cdn/contentImg/83/2.jpg"></p><p>之后就是贴砖了，这周末应该可以全部粘贴完毕。到时候再整体看看效果。</p><p>在这期间，也多亏了父母对我的帮助，自己总是在想什么时候才能挣上钱让父母不在这么奔波呢？</p><hr><p>因为装修的缘故，这一段时间也没看什么技术，只是把 Blog 用 React 重写了，部署了数据库，通过 API 获取数据。</p><p>前端: </p><ul><li>React</li><li>React-router</li><li>marked</li><li>highlight.js</li></ul><p>后台</p><ul><li>ASP.Net Core API</li><li>LinQ</li><li>Entity Framework</li></ul><p>数据库</p><ul><li>MySql</li></ul><p>昨天又发生一件小事:<br>因为自己买的服务器内存只有 1核 1G 1M，同时运行网站，API，MySql，Jenkins 已经吃不消了。MySql 就在晚上崩溃了，日志显示的也是内存问题。以后再买的话真就不能买配置这么低的了，真不够用，就当是一个教训吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;西风吹老洞庭波，一夜湘君白发多。&lt;br&gt;醉后不知天在水，满船清梦压星河。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这两周家里忙着装修，跑了几次建材市场，每次坐公交来回要花上将近 4 个小时，都要坐吐了。&lt;br&gt;因为预算有限，选砖看砖都精打细算，因</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/LinQ%20%E6%9F%A5%E8%AF%A2%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://1ess.github.io/LinQ%20%E6%9F%A5%E8%AF%A2%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2021-07-14T03:38:32.409Z</published>
    <updated>2021-07-14T03:38:32.409Z</updated>
    
    <content type="html"><![CDATA[<p>最近的工作是对一个复杂数据库进行操作，模型类之间的关系很复杂。操作方式使用了 LINQ，之前一直对 LINQ 的查询语法不太喜欢，这次使用之后，感觉比方法语法更容易接受，因此详细总结一下查询表达式的语法。</p><p>数据查询历来都表示为简单的字符串，没有编译时类型检查。 此外，对于每种数据源，还需要学习不同的查询语言: SQL 数据库、XML 文档以及各种 Web 服务等。借助 LINQ，查询成为了最高级的语言构造，就像类、方法和事件一样。</p><p>LINQ 最明显的”语言集成”部分就是查询表达式。 使用相同的基本查询表达式模式来查询和转换 SQL 数据库、ADO .NET 数据集、XML 文档以及 .NET 集合中的数据。<br>从应用程序的角度来看，原始源数据的特定类型和结构并不重要。应用程序始终将源数据视为 IEnumerable<T> 或 IQueryable<T> 集合。 </p><p>对于源序列，查询可能会执行三种操作之一: </p><ul><li>检索元素的子集以生成新序列，而不修改各个元素</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// scores 是 int[]</span>IEnumerable<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> highScoresQuery <span class="token operator">=</span>    <span class="token keyword">from</span> score <span class="token keyword">in</span> scores    <span class="token keyword">where</span> score <span class="token operator">></span> <span class="token number">80</span>    <span class="token keyword">orderby</span> score <span class="token keyword">descending</span>    <span class="token keyword">select</span> score<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将序列转换为新类型的对象</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp">IEnumerable<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> highScoresQuery2 <span class="token operator">=</span>    <span class="token keyword">from</span> score <span class="token keyword">in</span> scores    <span class="token keyword">where</span> score <span class="token operator">></span> <span class="token number">80</span>    <span class="token keyword">orderby</span> score <span class="token keyword">descending</span>    <span class="token keyword">select</span> $<span class="token string">"The score is &amp;#123;score&amp;#125;"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>检索有关源数据的单独值</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">int</span> highScoreCount <span class="token operator">=</span>    <span class="token punctuation">(</span><span class="token keyword">from</span> score <span class="token keyword">in</span> scores     <span class="token keyword">where</span> score <span class="token operator">></span> <span class="token number">80</span>     <span class="token keyword">select</span> score<span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询表达式是什么"><a href="#查询表达式是什么" class="headerlink" title="查询表达式是什么"></a>查询表达式是什么</h3><p>查询表达式是以查询语法表示的查询。 </p><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><p>查询表达式必须以 from 子句开头，且必须以 select 或 group 子句结尾。 在第一个 from 子句与最后一个 select 或 group 子句之间，可以包含以下这些可选子句中的一个或多个: where、orderby、join、let 甚至是其他 from 子句。 还可以使用 into 关键字，使 join 或 group 子句的结果可以充当相同查询表达式中的其他查询子句的源。</p><h3 id="查询变量"><a href="#查询变量" class="headerlink" title="查询变量"></a>查询变量</h3><p>在 LINQ 中，查询变量是存储查询而不是查询结果的任何变量。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// Query Expression.</span>    IEnumerable<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> scoreQuery <span class="token operator">=</span> <span class="token comment" spellcheck="true">//query variable</span>        <span class="token keyword">from</span> score <span class="token keyword">in</span> scores <span class="token comment" spellcheck="true">//required</span>        <span class="token keyword">where</span> score <span class="token operator">></span> <span class="token number">80</span> <span class="token comment" spellcheck="true">// optional</span>        <span class="token keyword">orderby</span> score <span class="token keyword">descending</span> <span class="token comment" spellcheck="true">// optional</span>        <span class="token keyword">select</span> score<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//must end with select or group</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的示例中，scoreQuery 是查询变量，它有时仅仅称为查询。 </p><p>查询变量可以存储采用查询语法、方法语法或是两者的组合进行表示的查询。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//Query syntax</span>IEnumerable<span class="token operator">&lt;</span>City<span class="token operator">></span> queryMajorCities <span class="token operator">=</span>    <span class="token keyword">from</span> city <span class="token keyword">in</span> cities    <span class="token keyword">where</span> city<span class="token punctuation">.</span>Population <span class="token operator">></span> <span class="token number">100000</span>    <span class="token keyword">select</span> city<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Method-based syntax</span>IEnumerable<span class="token operator">&lt;</span>City<span class="token operator">></span> queryMajorCities2 <span class="token operator">=</span> cities<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c<span class="token punctuation">.</span>Population <span class="token operator">></span> <span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="开始查询表达式"><a href="#开始查询表达式" class="headerlink" title="开始查询表达式"></a>开始查询表达式</h3><p>查询表达式必须以 from 子句开头，它指定数据源以及范围变量，范围变量表示遍历源序列时，源序列中的每个连续元素。范围变量基于数据源中元素的类型进行强类型化。<br>因为范围变量是强类型，所以可以使用点运算符访问该类型的任何可用成员。</p><pre class="line-numbers language-csharp"><code class="language-csharp">IEnumerable<span class="token operator">&lt;</span>Country<span class="token operator">></span> countryAreaQuery <span class="token operator">=</span>    <span class="token keyword">from</span> country <span class="token keyword">in</span> countries    <span class="token keyword">where</span> country<span class="token punctuation">.</span>Area <span class="token operator">></span> <span class="token number">500000</span> <span class="token comment" spellcheck="true">//sq km</span>    <span class="token keyword">select</span> country<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查询表达式可能会包含多个 from 子句。在源序列中的每个元素本身是集合或包含集合时，可使用其他 from 子句。 </p><pre class="line-numbers language-csharp"><code class="language-csharp">IEnumerable<span class="token operator">&lt;</span>City<span class="token operator">></span> cityQuery <span class="token operator">=</span>    <span class="token keyword">from</span> country <span class="token keyword">in</span> countries    <span class="token keyword">from</span> city <span class="token keyword">in</span> country<span class="token punctuation">.</span>Cities    <span class="token keyword">where</span> city<span class="token punctuation">.</span>Population <span class="token operator">></span> <span class="token number">10000</span>    <span class="token keyword">select</span> city<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结束查询表达式"><a href="#结束查询表达式" class="headerlink" title="结束查询表达式"></a>结束查询表达式</h3><p>查询表达式必须以 group 子句或 select 子句结尾。</p><h4 id="group-子句"><a href="#group-子句" class="headerlink" title="group 子句"></a>group 子句</h4><p>使用 group 子句可生成按指定键组织的组的序列。键可以是任何数据类型。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">var</span> queryCountryGroups <span class="token operator">=</span>    <span class="token keyword">from</span> country <span class="token keyword">in</span> countries    <span class="token keyword">group</span> country by country<span class="token punctuation">.</span>Name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="select-子句"><a href="#select-子句" class="headerlink" title="select 子句"></a>select 子句</h4><p>使用 select 子句可生成所有其他类型的序列。简单 select 子句只生成类型与数据源中包含的对象相同的对象的序列。</p><pre class="line-numbers language-csharp"><code class="language-csharp">IEnumerable<span class="token operator">&lt;</span>Country<span class="token operator">></span> sortedQuery <span class="token operator">=</span>    <span class="token keyword">from</span> country <span class="token keyword">in</span> countries    <span class="token keyword">orderby</span> country<span class="token punctuation">.</span>Area    <span class="token keyword">select</span> country<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>select 子句可以用于将源数据转换为新类型的序列，此转换也称为投影。<br>请注意，新对象使用对象初始值设定项进行初始化。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// Here var is required because the query</span><span class="token comment" spellcheck="true">// produces an anonymous type.</span><span class="token keyword">var</span> queryNameAndPop <span class="token operator">=</span>    <span class="token keyword">from</span> country <span class="token keyword">in</span> countries    <span class="token keyword">select</span> <span class="token keyword">new</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Name <span class="token operator">=</span> country<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> Pop <span class="token operator">=</span> country<span class="token punctuation">.</span>Population <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-into-进行延续"><a href="#使用-into-进行延续" class="headerlink" title="使用 into 进行延续"></a>使用 into 进行延续</h3><p>可以在 select 或 group 子句中使用 into 关键字创建存储查询的临时标识符。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// percentileQuery is an IEnumerable&lt;IGrouping&lt;int, Country>></span><span class="token keyword">var</span> percentileQuery <span class="token operator">=</span>    <span class="token keyword">from</span> country <span class="token keyword">in</span> countries    <span class="token keyword">let</span> percentile <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> country<span class="token punctuation">.</span>Population <span class="token operator">/</span> 10_000_000    <span class="token keyword">group</span> country by percentile <span class="token keyword">into</span> countryGroup    <span class="token keyword">where</span> countryGroup<span class="token punctuation">.</span>Key <span class="token operator">>=</span> <span class="token number">20</span>    <span class="token keyword">orderby</span> countryGroup<span class="token punctuation">.</span>Key    <span class="token keyword">select</span> countryGroup<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="筛选、排序和联接"><a href="#筛选、排序和联接" class="headerlink" title="筛选、排序和联接"></a>筛选、排序和联接</h3><p>在开头 from 子句与结尾 select 或 group 子句之间，所有其他子句(where、join、orderby、from、let)都是可选的。任何可选子句都可以在查询正文中使用零次或多次。</p><h4 id="where-子句"><a href="#where-子句" class="headerlink" title="where 子句"></a>where 子句</h4><p>使用 where 子句可基于一个或多个谓词表达式，从源数据中筛选出元素。</p><pre class="line-numbers language-csharp"><code class="language-csharp">IEnumerable<span class="token operator">&lt;</span>City<span class="token operator">></span> queryCityPop <span class="token operator">=</span>    <span class="token keyword">from</span> city <span class="token keyword">in</span> cities    <span class="token keyword">where</span> city<span class="token punctuation">.</span>Population <span class="token operator">&lt;</span> <span class="token number">200000</span> <span class="token operator">&amp;&amp;</span> city<span class="token punctuation">.</span>Population <span class="token operator">></span> <span class="token number">100000</span>    <span class="token keyword">select</span> city<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="orderby-子句"><a href="#orderby-子句" class="headerlink" title="orderby 子句"></a>orderby 子句</h4><p>使用 orderby 子句可按升序或降序对结果进行排序。还可以指定次要排序顺序。</p><pre class="line-numbers language-csharp"><code class="language-csharp">IEnumerable<span class="token operator">&lt;</span>Country<span class="token operator">></span> querySortedCountries <span class="token operator">=</span>    <span class="token keyword">from</span> country <span class="token keyword">in</span> countries    <span class="token keyword">orderby</span> country<span class="token punctuation">.</span>Area<span class="token punctuation">,</span> country<span class="token punctuation">.</span>Population <span class="token keyword">descending</span>    <span class="token keyword">select</span> country<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意: ascending 关键字是可选的，如果未指定任何顺序，则它是默认排序顺序。</p><h4 id="join-子句"><a href="#join-子句" class="headerlink" title="join 子句"></a>join 子句</h4><p>使用 join 子句可基于每个元素中指定的键之间的相等比较，将一个数据源中的元素与另一个数据源中的元素进行关联和/或合并。在 LINQ 中，联接操作是对元素属于不同类型的对象序列执行。联接了两个序列之后，必须使用 select 或 group 语句指定要存储在输出序列中的元素，还可以使用匿名类型将每组关联元素中的属性合并到输出序列的新类型中。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">var</span> categoryQuery <span class="token operator">=</span>    <span class="token keyword">from</span> cat <span class="token keyword">in</span> categories    <span class="token keyword">join</span> prod <span class="token keyword">in</span> products on cat equals prod<span class="token punctuation">.</span>Category    <span class="token keyword">select</span> <span class="token keyword">new</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Category <span class="token operator">=</span> cat<span class="token punctuation">,</span> Name <span class="token operator">=</span> prod<span class="token punctuation">.</span>Name <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>还可以通过使用 into 关键字将 join 操作的结果存储到临时变量中来执行分组联接。 </p><h4 id="let-子句"><a href="#let-子句" class="headerlink" title="let 子句"></a>let 子句</h4><p>使用 let 子句可将表达式(如方法调用)的结果存储在新范围变量中。 </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">"Svetlana Omelchenko"</span><span class="token punctuation">,</span> <span class="token string">"Claire O'Donnell"</span><span class="token punctuation">,</span> <span class="token string">"Sven Mortensen"</span><span class="token punctuation">,</span> <span class="token string">"Cesar Garcia"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>IEnumerable<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> queryFirstNames <span class="token operator">=</span>    <span class="token keyword">from</span> name <span class="token keyword">in</span> names    <span class="token keyword">let</span> firstName <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">select</span> firstName<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询表达式中的子查询"><a href="#查询表达式中的子查询" class="headerlink" title="查询表达式中的子查询"></a>查询表达式中的子查询</h3><p>查询子句本身可能包含查询表达式，这有时称为子查询。每个子查询都以自己的 from 子句开头，该子句不一定指向第一个 from 子句中的相同数据源。 </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">var</span> queryGroupMax <span class="token operator">=</span>    <span class="token keyword">from</span> student <span class="token keyword">in</span> students    <span class="token keyword">group</span> student by student<span class="token punctuation">.</span>GradeLevel <span class="token keyword">into</span> studentGroup    <span class="token keyword">select</span> <span class="token keyword">new</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Level <span class="token operator">=</span> studentGroup<span class="token punctuation">.</span>Key<span class="token punctuation">,</span>        HighestScore <span class="token operator">=</span>            <span class="token punctuation">(</span><span class="token keyword">from</span> student2 <span class="token keyword">in</span> studentGroup             <span class="token keyword">select</span> student2<span class="token punctuation">.</span>Scores<span class="token punctuation">.</span><span class="token function">Average</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近的工作是对一个复杂数据库进行操作，模型类之间的关系很复杂。操作方式使用了 LINQ，之前一直对 LINQ 的查询语法不太喜欢，这次使用之后，感觉比方法语法更容易接受，因此详细总结一下查询表达式的语法。&lt;/p&gt;
&lt;p&gt;数据查询历来都表示为简单的字符串，没有编译时类型检查。</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(%E4%B8%80)/"/>
    <id>https://1ess.github.io/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(%E4%B8%80)/</id>
    <published>2021-07-14T03:38:32.409Z</published>
    <updated>2021-07-14T03:38:32.409Z</updated>
    
    <content type="html"><![CDATA[<p>数据结构和算法是计算机软件相关专业的基础课程，要想从事编程工作，无论是否是科班出身，都不可能绕过这部分知识。<br>从本篇开始，我会详细的复习一遍数据结构以及算法。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><hr><p>数据结构: 是相互之间存在一种或多种特定关系的数据元素的集和。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h4><p>数据: 是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的符号的集和。<br>数据包括: 整型等数值类型，以及声音图片等非数值类型。</p><h4 id="数据元素"><a href="#数据元素" class="headerlink" title="数据元素"></a>数据元素</h4><p>数据元素: 是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理。也被称为记录。</p><h4 id="数据项"><a href="#数据项" class="headerlink" title="数据项"></a>数据项</h4><p>数据项: 一个数据元素可以由若干个数据项组成。数据项是数据不可分割的最小单位。</p><h4 id="数据对象"><a href="#数据对象" class="headerlink" title="数据对象"></a>数据对象</h4><p>数据对象: 性质相同的数据元素的集和，是数据的子集。</p><h3 id="逻辑结构和物理结构"><a href="#逻辑结构和物理结构" class="headerlink" title="逻辑结构和物理结构"></a>逻辑结构和物理结构</h3><p>我们把数据结构划分为<strong>逻辑结构</strong>和<strong>物理结构</strong>。</p><h4 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h4><p>逻辑结构: 是指数据对象中数据元素之间的相互关系。</p><p>逻辑结构可分为以下四种: </p><ol><li>集合结构: 集合结构中的数据元素除了同属于一个集合之外，他们之间没有其他关系</li><li>线性结构: 线性结构中的数据元素之间是一对一的关系</li><li>树形结构: 树形结构中的数据元素之间存在一种一对多的关系</li><li>图形结构: 图形结构的数据元素之间是多对多关系</li></ol><h4 id="物理结构-存储结构"><a href="#物理结构-存储结构" class="headerlink" title="物理结构(存储结构)"></a>物理结构(存储结构)</h4><p>物理结构: 是指数据的逻辑结构在计算机中的存储形式。<br>根据物理结构的定义，实际上就是如何把数据元素存储到计算机的存储器中。存储器主要针对内存而言，外部存储器的数据组织通常用文件结构来描述。</p><p>物理结构可分为以下两种: </p><ol><li>顺序存储: 是把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的</li><li>链式存储: 把数据元素放在任意的存储单元，这组存储单元可以是连续的，也可以是不连续的</li></ol><h3 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h3><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>数据类型: 是指一组性质相同的值的集合以及在此集合上的一些操作的总称。<br>抽象是指抽取出事物具有的普遍性的本质。抽象是一种思考问题的方式，隐藏了繁杂的细节，只保留实现目标所必须的信息。</p><h4 id="抽象数据类型-1"><a href="#抽象数据类型-1" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h4><p>抽象数据类型(Abstruct Data Type，ADT): 指一个数学模型及定义在该模型上的一组操作。</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><hr><p>算法: 是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。</p><h3 id="算法的特性"><a href="#算法的特性" class="headerlink" title="算法的特性"></a>算法的特性</h3><p>算法具有五个基本特性: <strong>输入</strong>、<strong>输出</strong>、<strong>有穷性</strong>、<strong>确定性</strong>和<strong>可行性</strong>。</p><h4 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h4><p>算法具有零个或多个输入，算法至少有一个或多个输出。</p><h4 id="有穷性"><a href="#有穷性" class="headerlink" title="有穷性"></a>有穷性</h4><p>有穷性: 指算法在执行有限的步骤后，自动结束而不会出现无限循环，并且每个步骤在可接受的时间内完成。</p><h4 id="确定性"><a href="#确定性" class="headerlink" title="确定性"></a>确定性</h4><p>确定性: 算法的每一步骤都具有确定的含义，不会出现二义性。</p><h4 id="可行性"><a href="#可行性" class="headerlink" title="可行性"></a>可行性</h4><p>可行性: 算法的每一步都必须是可行的。</p><h3 id="算法的设计要求"><a href="#算法的设计要求" class="headerlink" title="算法的设计要求"></a>算法的设计要求</h3><ol><li>正确性</li><li>可读性</li><li>健壮性</li><li>时间效率高和存储量低</li></ol><h3 id="函数的渐进增长"><a href="#函数的渐进增长" class="headerlink" title="函数的渐进增长"></a>函数的渐进增长</h3><p>函数的渐进增长: 给定两个函数 f(n) 和 g(n)，如果存在一个整数 N，使得对于所有的 n &gt; N，f(n) 总是比 g(n) 大，那么，我们就说 f(n) 的增长渐进快于 g(n)。</p><p>判断一个算法的效率时，函数中的常数和其他次要项可以忽略，而更应关注最高阶项的阶数。</p><h3 id="算法的时间复杂度"><a href="#算法的时间复杂度" class="headerlink" title="算法的时间复杂度"></a>算法的时间复杂度</h3><p>在进行算法分析时，语句总的执行次数 T(n) 是关于问题规模 n 的函数，进而分析 T(n) 随 n 的变化情况并确定 T(n) 的数量级。算法的时间复杂度，也就是算法的时间的度量，记作: T(n) = O(f(n))。他表示随问题规模 n 的增大，算法的执行时间的增长率和 f(n) 的增长率相同，称为算法的渐进时间复杂度，简称时间复杂度。</p><p>这样用大写 O 来体现算法时间复杂度的记法，称之为<strong>大 O 表示法</strong>。</p><p>一般情况，随着 n 增大，T(n) 增长最慢的算法为最优算法。</p><h4 id="推导大-O-阶方法"><a href="#推导大-O-阶方法" class="headerlink" title="推导大 O 阶方法"></a>推导大 O 阶方法</h4><ol><li>用常数 1 取代所有加法常数</li><li>只保留最高阶</li><li>如果最高阶存在且不是 1，则去除与这个项相乘的常数</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;数据结构和算法是计算机软件相关专业的基础课程，要想从事编程工作，无论是否是科班出身，都不可能绕过这部分知识。&lt;br&gt;从本篇开始，我会详细的复习一遍数据结构以及算法。&lt;/p&gt;
&lt;h2 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; t</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(%E4%BA%8C)/"/>
    <id>https://1ess.github.io/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(%E4%BA%8C)/</id>
    <published>2021-07-14T03:38:32.409Z</published>
    <updated>2021-07-14T03:38:32.409Z</updated>
    
    <content type="html"><![CDATA[<p>本篇，我们将会复习一下比较简单但是应用非常广泛的一种数据结构 —— 线性表。</p><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><hr><p>线性表(List): 零个或多个数据元素的有限序列。</p><p>如果用数学语言定义如下:<br>若将线性表记为(a<sub>1</sub>, …, a<sub>i-1</sub>, a<sub>i</sub>, a<sub>i+1</sub>, …, a<sub>n</sub>)，则表中 a<sub>i-1</sub> 领先于 a<sub>i</sub>，a<sub>i</sub> 领先于 a<sub>i+1</sub>，称 a<sub>i-1</sub> 是 a<sub>i</sub> 的直接前驱元素，a<sub>i+1</sub> 是 a<sub>i</sub> 的直接后继元素。当 i = 1, 2, …, n-1 时，a<sub>i</sub> 有且仅有一个直接后继，当 i = 2, …, n 时，a<sub>i</sub> 有且仅有一个直接前驱。</p><p>线性表元素的个数 n(n &gt;= 0) 称为线性表的长度，当 n = 0 时，称为空表。</p><h3 id="线性表的顺序存储结构"><a href="#线性表的顺序存储结构" class="headerlink" title="线性表的顺序存储结构"></a>线性表的顺序存储结构</h3><p>线性表的顺序存储结构指的是，用一段地址连续的存储单元依次存储线性表的数据元素。<br>一般用一维数组来实现顺序存储结构。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SqList</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token keyword">int</span> Maxsize <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> Data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">[</span>Maxsize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> Length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 获取第 i 位的元素</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="i">&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;param name="e">&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">public</span> Status <span class="token function">GetElement</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">out</span> T e<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">>=</span> Length<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Error<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        e <span class="token operator">=</span> Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Ok<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 在第 i 位插入元素</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="i">&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;param name="e">&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">public</span> Status <span class="token function">ListInsert</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> T e<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Length <span class="token operator">==</span> Maxsize<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Error<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">></span> Length<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Error<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> Length<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                Data<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        Length<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Ok<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// 删除第 i 位元素</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token comment" spellcheck="true">/// &lt;param name="i">&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;param name="e">&lt;/param></span>    <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>    <span class="token keyword">public</span> Status <span class="token function">ListDelete</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">out</span> T e<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Error<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">></span> Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Error<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        e <span class="token operator">=</span> Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> Length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Data<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Length<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Ok<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="线性表顺序存储结构的优缺点"><a href="#线性表顺序存储结构的优缺点" class="headerlink" title="线性表顺序存储结构的优缺点"></a>线性表顺序存储结构的优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>可以快速存取表中任一位置元素</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>插入和删除操作需要移动大量元素</li><li>造成存储空间碎片化</li></ul><h3 id="线性表的链式存储结构"><a href="#线性表的链式存储结构" class="headerlink" title="线性表的链式存储结构"></a>线性表的链式存储结构</h3><p>线性表的链式存储结构的特点是，可以用一组任意的存储单元存储线性表的数据元素，这组存储单元可以是连续的，也可以是不连续的。</p><p>在顺序存储结构中，每个数据元素只需要存储数据元素信息就可以了，但是在链式存储结构中，除了要存储数据元素信息外，还要存储他的后继元素的地址。</p><p>因此，为了表示每个数据元素 a<sub>i</sub> 与其直接后继元素 a<sub>i+1</sub> 之间的逻辑关系，对于数据元素 a<sub>i</sub> 来说，除了存储本身信息之外，还需要存储一个指示其直接后继的信息。我们把存储数据元素信息的域称为数据域，把存储直接后继信息的域称为指针域(对于高级语言，我们可以把它理解成对象引用域)。把这两部分组成的数据元素称为节点(Node)。<br>n 个节点链接成一个链表，即线性表的链式存储结构。因为此链表每个节点只有一个指针域，因此称为单链表。</p><p>我们把第一个节点的指针域称为头指针。为了方便操作链表，会在单链表的第一个节点前设置一个节点，称为头节点。头节点的数据域不存储任何信息。<br>注意: 如果设置了头节点，那么头节点的指针域存储的就是头指针。</p><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> T Element<span class="token punctuation">;</span>    <span class="token keyword">public</span> Node<span class="token operator">&lt;</span>T<span class="token operator">></span> NextNode<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Node</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Element <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkList</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//头节点(数据域无意义)</span>    <span class="token keyword">public</span> Node<span class="token operator">&lt;</span>T<span class="token operator">></span> HeadNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Status <span class="token function">GetElement</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">out</span> Node<span class="token operator">&lt;</span>T<span class="token operator">></span> node<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> temp <span class="token operator">=</span> HeadNode<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>NextNode<span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        node <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token keyword">return</span> temp <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> Status<span class="token punctuation">.</span>Error <span class="token punctuation">:</span> Status<span class="token punctuation">.</span>Ok<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> Status <span class="token function">ListInsert</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>T<span class="token operator">></span> node<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> status <span class="token operator">=</span> <span class="token function">GetElement</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">var</span> prevNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> Status<span class="token punctuation">.</span>Ok<span class="token punctuation">)</span> <span class="token keyword">return</span> status<span class="token punctuation">;</span>                node<span class="token punctuation">.</span>NextNode <span class="token operator">=</span> prevNode<span class="token punctuation">.</span>NextNode<span class="token punctuation">;</span>        prevNode<span class="token punctuation">.</span>NextNode <span class="token operator">=</span> node<span class="token punctuation">;</span>                <span class="token keyword">return</span> status<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Status <span class="token function">ListDelete</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">out</span> Node<span class="token operator">&lt;</span>T<span class="token operator">></span> node<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        node <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> status <span class="token operator">=</span> <span class="token function">GetElement</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">var</span> prevNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> Status<span class="token punctuation">.</span>Ok<span class="token punctuation">)</span> <span class="token keyword">return</span> status<span class="token punctuation">;</span>        <span class="token keyword">var</span> current <span class="token operator">=</span> prevNode<span class="token punctuation">.</span>NextNode<span class="token punctuation">;</span>        prevNode<span class="token punctuation">.</span>NextNode <span class="token operator">=</span> current<span class="token punctuation">.</span>NextNode<span class="token punctuation">;</span>        node <span class="token operator">=</span> current<span class="token punctuation">;</span>                <span class="token keyword">return</span> status<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><p>将单链表中尾节点的指针域指向头节点，使链表形成一个环，这种头尾相接的链表称为单循环链表，简称为循环链表。</p><p>循环链表和单链表的主要差异就是判断结束条件由指针域是否为空变为指针域是否是头节点。</p><h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><p>双向链表是在单向链表的每个节点中，再设置一个指向前驱节点的指针。所以在双向链表中存在两个指针域，一个指向直接前驱，一个指向直接后继。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoubleLinkList</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//头节点(数据域无意义)</span>    <span class="token keyword">public</span> Node<span class="token operator">&lt;</span>T<span class="token operator">></span> HeadNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Status <span class="token function">GetElement</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">out</span> Node<span class="token operator">&lt;</span>T<span class="token operator">></span> node<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> temp <span class="token operator">=</span> HeadNode<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>NextNode<span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        node <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token keyword">return</span> temp <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> Status<span class="token punctuation">.</span>Error <span class="token punctuation">:</span> Status<span class="token punctuation">.</span>Ok<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Status <span class="token function">ListInsert</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>T<span class="token operator">></span> node<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> status <span class="token operator">=</span> <span class="token function">GetElement</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">var</span> prevNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> Status<span class="token punctuation">.</span>Ok<span class="token punctuation">)</span> <span class="token keyword">return</span> status<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>PrevNode <span class="token operator">=</span> prevNode<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>NextNode <span class="token operator">=</span> prevNode<span class="token punctuation">.</span>NextNode<span class="token punctuation">;</span>        prevNode<span class="token punctuation">.</span>NextNode<span class="token punctuation">.</span>PrevNode <span class="token operator">=</span> node<span class="token punctuation">;</span>        prevNode<span class="token punctuation">.</span>NextNode <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token keyword">return</span> status<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Status <span class="token function">ListDelete</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">out</span> Node<span class="token operator">&lt;</span>T<span class="token operator">></span> node<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        node <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> status <span class="token operator">=</span> <span class="token function">GetElement</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">var</span> prevNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> Status<span class="token punctuation">.</span>Ok<span class="token punctuation">)</span> <span class="token keyword">return</span> status<span class="token punctuation">;</span>        <span class="token keyword">var</span> current <span class="token operator">=</span> prevNode<span class="token punctuation">.</span>NextNode<span class="token punctuation">;</span>        current<span class="token punctuation">.</span>NextNode<span class="token punctuation">.</span>PrevNode <span class="token operator">=</span> prevNode<span class="token punctuation">;</span>        prevNode<span class="token punctuation">.</span>NextNode <span class="token operator">=</span> current<span class="token punctuation">.</span>NextNode<span class="token punctuation">;</span>        node <span class="token operator">=</span> current<span class="token punctuation">;</span>        <span class="token keyword">return</span> status<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在对链表进行操作时要记住一个原则: 后继指针很重要，在使用完之前不要赋新值。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本篇，我们将会复习一下比较简单但是应用非常广泛的一种数据结构 —— 线性表。&lt;/p&gt;
&lt;h2 id=&quot;线性表&quot;&gt;&lt;a href=&quot;#线性表&quot; class=&quot;headerlink&quot; title=&quot;线性表&quot;&gt;&lt;/a&gt;线性表&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;线性表(List): 零个或多</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(%E4%B8%89)/"/>
    <id>https://1ess.github.io/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(%E4%B8%89)/</id>
    <published>2021-07-14T03:38:32.409Z</published>
    <updated>2021-07-14T03:38:32.409Z</updated>
    
    <content type="html"><![CDATA[<p>本篇，我们将会复习一下基于线性表衍生出的两种数据结构 —— 栈和队列。</p><h2 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈(Stack)"></a>栈(Stack)</h2><hr><p>在软件应用中，栈这种后进先出的数据结构的应用是非常普遍的。比如浏览器的前进后退、Word 和 PhotoShop 等编辑软件中的撤销操作，以及在 iOS 开发中的 push、pop controller 操作都是栈的应用。</p><p>栈本质是限定仅在表尾进行插入和删除操作的线性表。<br>我们把允许插入和删除的一端称为栈顶(top)，另一端称为栈底(bottom)，不含任何数据元素的栈称为空栈。<br>栈又称为后进先出的线性表，简称为 LIFO 结构。</p><p>理解栈我们要注意: </p><ol><li>他是一个线性表</li><li>仅允许在表尾进行插入和删除操作，这里的表尾是指栈顶</li></ol><p>栈的插入操作，叫做进栈(push)，也称为压栈、入栈。<br>栈的删除操作，叫做出栈(pop)，也称为弹栈。</p><h3 id="栈的顺序存储结构"><a href="#栈的顺序存储结构" class="headerlink" title="栈的顺序存储结构"></a>栈的顺序存储结构</h3><p>栈的顺序存储结构简称为顺序栈。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SqStack</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token keyword">int</span> Maxsize <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> Data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">[</span>Maxsize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> Top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Status <span class="token function">Push</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Top <span class="token operator">>=</span> Maxsize<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//栈满</span>            <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Error<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Top<span class="token operator">++</span><span class="token punctuation">;</span>        Data<span class="token punctuation">[</span>Top<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Ok<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Status <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token keyword">out</span> T t<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            t <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Error<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        t <span class="token operator">=</span> Data<span class="token punctuation">[</span>Top<span class="token punctuation">]</span><span class="token punctuation">;</span>        Top<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Ok<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="栈的链式存储结构"><a href="#栈的链式存储结构" class="headerlink" title="栈的链式存储结构"></a>栈的链式存储结构</h3><p>栈的链式存储结构简称为链栈。<br>对于链栈来说，是不需要头节点的。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">LinkStack</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> StackNode<span class="token operator">&lt;</span>T<span class="token operator">></span> Top<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> Count<span class="token punctuation">;</span>    <span class="token keyword">public</span> Status <span class="token function">Push</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> stackNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StackNode</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>NextNode <span class="token operator">=</span> Top<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        Top <span class="token operator">=</span> stackNode<span class="token punctuation">;</span>        Count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Ok<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Status <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token keyword">out</span> T t<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Top <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            t <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Error<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        t <span class="token operator">=</span> Top<span class="token punctuation">.</span>Element<span class="token punctuation">;</span>        Top <span class="token operator">=</span> Top<span class="token punctuation">.</span>NextNode<span class="token punctuation">;</span>        Count<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Ok<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h3><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>我们把一个直接调用自己或者通过一系列调用语句间接地调用自己的函数，称为递归函数。<br>每个递归定义必须至少有一个条件，满足时递归不再进行，即不在引用自身而是返回值退出。<br>递归回退的顺序是他前进顺序的逆序。显然符合栈这种数据结构。因此编译器使用栈来实现递归。</p><h4 id="四则运算表达式求值"><a href="#四则运算表达式求值" class="headerlink" title="四则运算表达式求值"></a>四则运算表达式求值</h4><p>一种不需要括号的后缀表示法，也称为逆波兰表示(RPN)。是一种非常巧妙的将四则运算由常见的中缀表达式变为后缀表达式来简化运算复杂性。基本原理也是栈。这里就不详细说明了。</p><h2 id="队列-Queue"><a href="#队列-Queue" class="headerlink" title="队列(Queue)"></a>队列(Queue)</h2><hr><p>队列是只允许在一端进行插入操作，而在另一端进行删除操作的线性表。<br>队列是一种先进先出的线性表，简称为 FIFO 结构。<br>允许插入操作的一端称为队尾，允许删除操作的一端称为队头。</p><p>队列在程序设计中使用非常频繁，如消息队列(MQ)所使用的数据结构等。</p><h3 id="队列的顺序存储结构"><a href="#队列的顺序存储结构" class="headerlink" title="队列的顺序存储结构"></a>队列的顺序存储结构</h3><p>如果我们只把队列当成普通的线性表操作也完全没有问题，入队操作时间复杂度为 O(1)，但是出队操作时间复杂度为 O(n)，为解决这个问题，我们可以使用循环队列。<br>我们把队列的这种头尾相接的顺序存储结构称为循环队列。<br>为了实现循环队列，我们需要引入两个变量，一个指向队头元素所在位置，一个指向队尾元素的下一个位置。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">SqQueue</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token keyword">int</span> Maxsize <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> Data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T</span><span class="token punctuation">[</span>Maxsize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> _front<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> _rear<span class="token punctuation">;</span>    <span class="token keyword">public</span> Status <span class="token function">EnQueue</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> Maxsize <span class="token operator">==</span> _front<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//队满</span>            <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Error<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Data<span class="token punctuation">[</span>_rear<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        _rear <span class="token operator">=</span> <span class="token punctuation">(</span>_rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> Maxsize<span class="token punctuation">;</span>        <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Ok<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Status <span class="token function">DeQueue</span><span class="token punctuation">(</span><span class="token keyword">out</span> T t<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>_rear <span class="token operator">==</span> _front<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//队空</span>            t <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Error<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        t <span class="token operator">=</span> Data<span class="token punctuation">[</span>_front<span class="token punctuation">]</span><span class="token punctuation">;</span>        _front <span class="token operator">=</span> <span class="token punctuation">(</span>_front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> Maxsize<span class="token punctuation">;</span>        <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Ok<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="队列的链式存储结构"><a href="#队列的链式存储结构" class="headerlink" title="队列的链式存储结构"></a>队列的链式存储结构</h3><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">QueueNode</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> T Element<span class="token punctuation">;</span>    <span class="token keyword">public</span> QueueNode<span class="token operator">&lt;</span>T<span class="token operator">></span> NextNode<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">QueueNode</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Element <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">LinkQueue</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> QueueNode<span class="token operator">&lt;</span>T<span class="token operator">></span> Front<span class="token punctuation">,</span> Rear<span class="token punctuation">;</span>    <span class="token keyword">public</span> Status <span class="token function">EnQueue</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueueNode</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        Front<span class="token punctuation">.</span>NextNode <span class="token operator">=</span> node<span class="token punctuation">;</span>        Rear <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Ok<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Status <span class="token function">DeQueue</span><span class="token punctuation">(</span><span class="token keyword">out</span> T t<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Front <span class="token operator">==</span> Rear<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            t <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Error<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        t <span class="token operator">=</span> Front<span class="token punctuation">.</span>Element<span class="token punctuation">;</span>        Front <span class="token operator">=</span> Front<span class="token punctuation">.</span>NextNode<span class="token punctuation">;</span>        <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Ok<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本篇，我们将会复习一下基于线性表衍生出的两种数据结构 —— 栈和队列。&lt;/p&gt;
&lt;h2 id=&quot;栈-Stack&quot;&gt;&lt;a href=&quot;#栈-Stack&quot; class=&quot;headerlink&quot; title=&quot;栈(Stack)&quot;&gt;&lt;/a&gt;栈(Stack)&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(%E5%9B%9B)/"/>
    <id>https://1ess.github.io/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(%E5%9B%9B)/</id>
    <published>2021-07-14T03:38:32.409Z</published>
    <updated>2021-07-14T03:38:32.409Z</updated>
    
    <content type="html"><![CDATA[<p>本篇，我们来讨论一种一对多的数据结构 —— 树。</p><h2 id="树-Tree"><a href="#树-Tree" class="headerlink" title="树(Tree)"></a>树(Tree)</h2><hr><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>树是 n(n &gt;= 0) 个节点的有限集。当 n = 0 时，称为空树。在任意一棵非空树中: </p><ol><li>有且仅有一个特定的称为根(root)的节点</li><li>当 n &gt;= 1 时，其余节点可分为 m(m &gt; 0)个互不相交的有限集 T<sub>1</sub>、T<sub>2</sub>、…、T<sub>m</sub>，其中每一个集合本身又是一棵树，并且称为根的子树(SubTree)</li></ol><p>对于树，还需要注意两点: </p><ol><li>n &gt; 0 时根节点是唯一的，不可能存在多个根节点</li><li>m &gt; 0 时，子树的个数没有限制，但他们一定互不相交</li></ol><h3 id="节点分类"><a href="#节点分类" class="headerlink" title="节点分类"></a>节点分类</h3><p>树的节点包含一个数据元素以及若干个指向其子树的分支。节点拥有的子树的个数称为节点的度(Degree)。<br>度为 0 的节点成为叶节点(Leaf)。度不为 0 的节点称为分支节点。<br>除了根节点之外的分支节点又称为内部节点。</p><h3 id="节点间的关系"><a href="#节点间的关系" class="headerlink" title="节点间的关系"></a>节点间的关系</h3><p>节点的子树的根成为该节点的孩子(Child)，相应的该节点称为孩子的双亲(Parent)。同一双亲的孩子之间互称为兄弟(Sibling)。</p><h3 id="树的其他概念"><a href="#树的其他概念" class="headerlink" title="树的其他概念"></a>树的其他概念</h3><p>节点的层次(Level)从根开始定义起，根为第一层，根的孩子为第二层。树中节点的最大层次称为树的深度(Depth)。<br>如果将树中节点的各子树看成从左至右是有次序的，不能互换的，则称该树为有序树，否则称为无序树。</p><p>森林(Forest)是 m(m &gt;= 0)棵互不相交的树的集合。</p><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><hr><p>二叉树(Binary Tree)是 n(n &gt;= 0)个节点的有限集合，该集合或为空集(空二叉树)，或者由一个根节点和两棵互不相交的、分别称为根节点的左子树和右子树的二叉树组成。</p><h3 id="二叉树的特点"><a href="#二叉树的特点" class="headerlink" title="二叉树的特点"></a>二叉树的特点</h3><ul><li>每个节点最多有两棵子树，所以二叉树中不存在度大于 2 的节点。注意不是只有而是<strong>最多有</strong>，没有或者有一棵子树也是可以的</li><li>左子树和右子树是有顺序的</li><li>即使树中某节点只有一棵子树，也要区分他是左子树还是右子树</li></ul><p>二叉树具有五种基本形态: </p><ol><li>空二叉树</li><li>只有一个根节点</li><li>根节点只有左子树</li><li>根节点只有右子树</li><li>根节点既有左子树又有右子树</li></ol><h3 id="特殊二叉树"><a href="#特殊二叉树" class="headerlink" title="特殊二叉树"></a>特殊二叉树</h3><h4 id="斜树"><a href="#斜树" class="headerlink" title="斜树"></a>斜树</h4><p>所有节点都只有左子树的二叉树叫做左斜树。所有节点都只有右子树的二叉树叫做右斜树。二者统称为斜树。<br>线性表结构就可以理解为是树的一种极其特殊的表现形式。</p><h4 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h4><p>在一棵二叉树中，如果所有的分支节点都存在左子树和右子树，并且所有的叶子都在同一层上，这样的二叉树称为满二叉树。</p><p>满二叉树的特点: </p><ol><li>叶子只能出现在最下层</li><li>非叶子节点的度一定是 2</li><li>在同样深度的二叉树中，满二叉树的节点个数最多，叶子数最多</li></ol><h4 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h4><p>对一棵具有 n(n &gt;= 0)个节点的二叉树按层序编号，如果编号为 i(1 &lt;= i &lt;= n)的节点与同样深度的满二叉树中编号为 i 的节点在二叉树中的位置完全相同，则这棵二叉树称为完全二叉树。<br>注意: 满二叉树一定是完全二叉树，但完全二叉树不一定是满二叉树。</p><p>完全二叉树的特点: </p><ol><li>叶子节点只能出现在最下两层</li><li>最下层的叶子一定集中在左部连续位置</li><li>倒数第二层，若有叶子节点，一定都在右部连续位置</li><li>如果节点度为 1，则该节点只有左孩子</li><li>同样节点数的二叉树，完全二叉树的深度最小</li></ol><h3 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h3><ol><li>在二叉树的第 i 层上最多有 2<sup>i-1</sup> 个节点(i &gt;= 1)</li><li>深度为 k 的二叉树最多有 2<sup>k</sup> - 1 个节点</li><li>对任何一棵二叉树 T，如果其叶节点个数为 n<sub>0</sub>，度为 2 的节点数为 n<sub>2</sub>，则 n<sub>0</sub> = n<sub>2</sub> + 1</li></ol><h3 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h3><p>对于二叉树使用顺序存储适用性不强，一般使用链式存储结构。二叉树每个节点最多有两个孩子所以为他设计一个数据域和两个指针域，我们称这样的链表为二叉链表。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">BiTNode</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> T Element<span class="token punctuation">;</span>    <span class="token keyword">public</span> BiTNode<span class="token operator">&lt;</span>T<span class="token operator">></span> LChild<span class="token punctuation">;</span>    <span class="token keyword">public</span> BiTNode<span class="token operator">&lt;</span>T<span class="token operator">></span> RChild<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">BiTNode</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Element <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遍历二叉树-Traveing-Binary-Tree"><a href="#遍历二叉树-Traveing-Binary-Tree" class="headerlink" title="遍历二叉树(Traveing Binary Tree)"></a>遍历二叉树(Traveing Binary Tree)</h3><p>二叉树遍历是指从根节点出发，按照某种次序依次访问二叉树中所有节点，使得每个节点被访问一次且仅被访问一次。</p><p>这里有两个关键词: <strong>访问</strong>和<strong>次序</strong></p><h4 id="二叉树遍历方法"><a href="#二叉树遍历方法" class="headerlink" title="二叉树遍历方法"></a>二叉树遍历方法</h4><p>主要分为四种: </p><ol><li>前序遍历: 规则是若二叉树为空，则空操作返回，否则先访问根节点，然后前序遍历左子树，再前序遍历右子树(根-左-右)</li><li>中序遍历: 规则是若二叉树为空，则空操作返回，否则从根节点开始(注意并不是先访问根节点)，中序遍历根节点左子树，然后访问根节点，最后中序遍历右子树(左-根-右)</li><li>后序遍历: 则是若二叉树为空，则空操作返回，否则从左到右先叶子后节点的方式遍历访问左右子树，最后是访问根节点(左-右-根)</li><li>层序遍历: 则是若二叉树为空，则空操作返回，否则从树的第一层开始，也就是根节点开始访问，从上而下逐层遍历，在同一层中，按照从左到右的顺序对节点逐个访问</li></ol><p>注意: 前、中、后代表的是根节点位置。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>BiTNode<span class="token operator">&lt;</span>T<span class="token operator">></span> node<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>Element<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>LChild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>RChild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Data<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">InOrderTraverse</span><span class="token punctuation">(</span>BiTNode<span class="token operator">&lt;</span>T<span class="token operator">></span> node<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">InOrderTraverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>LChild<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>Element<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">InOrderTraverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>RChild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Data<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">PostOrderTraverse</span><span class="token punctuation">(</span>BiTNode<span class="token operator">&lt;</span>T<span class="token operator">></span> node<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">PostOrderTraverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>LChild<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PostOrderTraverse</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>RChild<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>Element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Data<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二叉树遍历的性质: </p><ol><li>已知前序遍历和中序遍历，可以唯一确定一棵二叉树</li><li>已知后序遍历和中序遍历，可以唯一确定一棵二叉树</li><li>已知前序遍历和后序遍历，是不可以唯一确定一棵二叉树</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本篇，我们来讨论一种一对多的数据结构 —— 树。&lt;/p&gt;
&lt;h2 id=&quot;树-Tree&quot;&gt;&lt;a href=&quot;#树-Tree&quot; class=&quot;headerlink&quot; title=&quot;树(Tree)&quot;&gt;&lt;/a&gt;树(Tree)&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;概述&quot;&gt;&lt;a hre</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(%E4%BA%94)/"/>
    <id>https://1ess.github.io/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(%E4%BA%94)/</id>
    <published>2021-07-14T03:38:32.409Z</published>
    <updated>2021-07-14T03:38:32.409Z</updated>
    
    <content type="html"><![CDATA[<p>本篇，我们来讨论一种多对多的数据结构 —— 图。</p><h2 id="图的定义"><a href="#图的定义" class="headerlink" title="图的定义"></a>图的定义</h2><hr><p>图(Graph)是由顶点有穷非空集合和顶点之间边的集合组成，通常表示为: G(V, E)，其中，G 表示一个图，V 是图 G 中顶点的集合，E 是图 G 中边的集合。</p><p>对于图的定义，我们需要注意几个方面: </p><ul><li>线性表中我们把元素叫元素，树中将集合元素称为节点，在图中数据元素，我们则称为顶点(Vertex)</li><li>线性表中可以没有数据元素，称为空表。树中可以没有节点，称为空树。但是，在图中，不允许没有顶点</li></ul><h3 id="各种图定义"><a href="#各种图定义" class="headerlink" title="各种图定义"></a>各种图定义</h3><p>无向边: 若顶点 v<sub>i</sub> 到 v<sub>j</sub> 之间的边没有方向，则称这条边为无向边(Edge)，用无序偶对 (v<sub>i</sub>, v<sub>j</sub>) 表示，如果图中的边都是无向边，则称该图为无向图(Undirected graphs)。</p><p>有向边: 若顶点 v<sub>i</sub> 到 v<sub>j</sub> 之间的边有方向，则称这条边为有向边，也称为弧(Arc)，用有序偶对 &lt;v<sub>i</sub>, v<sub>j</sub>&gt; 表示，v<sub>i</sub> 称为弧尾(Tail)，v<sub>j</sub> 称为弧头(Head)，如果图中的边都是有向边，则称该图为有向图(Directed graphs)。</p><p>在图中，若不存在顶点到其自身的边，且同一条边不重复出现，则称这样的图为简单图。我们在本篇要讨论的也都是简单图。</p><p>在无向图中，如果任意两个顶点之间都存在边，则称该图为无向完全图。含有 n 个顶点的无向完全图有 n*(n-1)/2 条边。</p><p>在有向图中，如果任意两个顶点之间都存在方向互为相反的两条弧，则称该图为有向完全图。含有 n 个顶点的有向完全图有 n*(n-1) 条边。</p><p>有很少条边或弧的图称为稀疏图，反之称为稠密图。</p><p>有些图的边或弧具有与他相关的数字，这种与图的边或弧相关的数叫做权(Weight)。这种带权的图称为网(Network)。</p><h3 id="图的顶点与边间关系"><a href="#图的顶点与边间关系" class="headerlink" title="图的顶点与边间关系"></a>图的顶点与边间关系</h3><p>对于无向图 G=(V, {E})，如果边 (v, v<sub>i</sub>) ∈ E，则称顶点 v 和 v<sub>i</sub> 互为邻接点，即 v 和 v<sub>i</sub> 相邻接。边 (v, v<sub>i</sub>) 依附于顶点 v 和 v<sub>i</sub>，或者说 (v, v<sub>i</sub>) 与顶点 v 和 v<sub>i</sub> 相关联。<br>顶点 v 的度是和 v 相关联的边的数目，记为 TD(v)。</p><p>对于无向图 G=(V, {E})，如果弧 &lt;v, v<sub>i</sub>&gt; ∈ E，则称顶点 v 邻接到顶点 v<sub>i</sub>，顶点 v<sub>i</sub> 邻接自顶点 v。以顶点 v 为头的弧的数目称为 v 的入度，记为 ID(v)，以 v 为尾的弧的数目称为 v 的出度，记为 OD(v)，顶点 v 的度为 TD(v) = ID(v) + OD(v)。</p><p>无向图 G=(V, {E}) 中从顶点 v 到顶点 v<sub>i</sub> 的路径(Path)是一个顶点序列。<br>路径的长度是路径上的边或弧的数目。</p><p>第一个顶点到最后一个顶点相同的路径称为回路或环。</p><h3 id="连通图"><a href="#连通图" class="headerlink" title="连通图"></a>连通图</h3><p>在无向图 G 中，如果从顶点 v 到顶点 v<sub>i</sub> 有路径，则称 v 和 v<sub>i</sub> 是连通的，如果对于图中任意两个顶点都是连通的，则称 G 是连通图。</p><h2 id="图的存储结构"><a href="#图的存储结构" class="headerlink" title="图的存储结构"></a>图的存储结构</h2><hr><p>我们来看一下对于图的五种不同的存储结构: </p><ol><li>邻接矩阵</li><li>邻接表</li><li>十字链表</li><li>邻接多重表</li><li>边集数组</li></ol><h2 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2><hr><p>从图中某一顶点除法访遍图中其余顶点，且每一个顶点仅被访问一次，这一过程就称为图的遍历。</p><p>可分为: </p><ol><li>深度优先遍历(Depth First Search，DFS)</li><li>广度优先遍历(Breadth First Search，BFS)</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本篇，我们来讨论一种多对多的数据结构 —— 图。&lt;/p&gt;
&lt;h2 id=&quot;图的定义&quot;&gt;&lt;a href=&quot;#图的定义&quot; class=&quot;headerlink&quot; title=&quot;图的定义&quot;&gt;&lt;/a&gt;图的定义&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;图(Graph)是由顶点有穷非空集合和顶点之间边的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/%E7%AE%97%E6%B3%95(%E4%B8%80)/"/>
    <id>https://1ess.github.io/%E7%AE%97%E6%B3%95(%E4%B8%80)/</id>
    <published>2021-07-14T03:38:32.409Z</published>
    <updated>2021-07-14T03:38:32.409Z</updated>
    
    <content type="html"><![CDATA[<p>本篇开始，我们来看看在工作中比较常用的两大算法之一的<strong>查找</strong>算法。</p><h2 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h2><hr><p>查找表(Search Table): 是由同一类型的数据元素构成的集合。<br>关键字(Key): 是数据元素中某个数据项的值，又称为键值。<br>若此关键字可以唯一地标识某一记录，则称此关键字为主关键字(Primary Key)。</p><p>查找(Searching)就是根据给定的某个值，在查找表中确定一个其关键字等于给定值的数据元素。</p><h3 id="顺序查找表"><a href="#顺序查找表" class="headerlink" title="顺序查找表"></a>顺序查找表</h3><p>顺序查找(Sequential Search)又称为线性查找，是最基本的查找技术，他的查找过程是: 从表中第一个(或最后一个)记录开始，逐个进行记录的关键字和给定值比较，若某个记录的关键字和给定值相等，则查找成功，找到所查的记录，如果直到最后一个(或第一个)记录，其关键字和给定值都不相等时，则表中没有所查的记录，查找不成功。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">SequentialSearch</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> Sequential<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SequentialSearch</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> sequential<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Sequential <span class="token operator">=</span> sequential<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Status <span class="token function">SequentialSearching</span><span class="token punctuation">(</span>T key<span class="token punctuation">,</span> <span class="token keyword">out</span> T record<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> s <span class="token keyword">in</span> Sequential<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            record <span class="token operator">=</span> s<span class="token punctuation">;</span>            <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Ok<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        record <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Error<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="有序查找表"><a href="#有序查找表" class="headerlink" title="有序查找表"></a>有序查找表</h3><p>最常用的有序查找就是折半查找。折半查找又称为二分查找(Binary Search)，他的前提是线性表中的记录必须是关键码有序，线性表必须采用顺序存储。折半查找的基本思想是: 在有序表中，取中间记录作为比较对象，若给定值与中间记录的关键字相等，则查找成功，若给定值小于中间记录的关键字，则在中间记录的左半区继续查找，若给定值大于中间记录的关键字，则在中间记录的右半区继续查找，不断重复上述过程，直到查找成功，或所有查找区域无记录，查找失败为止。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">BinarySearching</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> Binary<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BinarySearching</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> binary<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Binary <span class="token operator">=</span> binary<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Status <span class="token function">BinarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">int</span> record<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> high <span class="token operator">=</span> Binary<span class="token punctuation">.</span>Length<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Binary<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> key<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Binary<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> key<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                record <span class="token operator">=</span> Binary<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Ok<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        record <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Error<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="线性索引查找"><a href="#线性索引查找" class="headerlink" title="线性索引查找"></a>线性索引查找</h3><p>数据结构的最终目的是提高数据的处理速度，索引是为了加快查找速度而设计的一种数据结构。索引就是把一个关键字与他对应的记录相关联的过程。索引技术是组织大型数据库以及磁盘文件的一种重要技术。</p><p>索引按照结构可以分为<strong>线性索引</strong>、<strong>树形索引</strong>、<strong>多级索引</strong>。本篇只介绍线性索引。</p><p>所谓线性索引就是将索引项集合组织为线性结构，也称索引表。我们介绍三种线性索引: </p><ol><li>稠密索引</li><li>分块索引</li><li>倒排索引</li></ol><h4 id="稠密索引"><a href="#稠密索引" class="headerlink" title="稠密索引"></a>稠密索引</h4><p>稠密索引是指在线性索引中，将数据集中的每个记录对应一个索引项，索引项一定是按照关键码有序的排列。</p><h4 id="分块索引"><a href="#分块索引" class="headerlink" title="分块索引"></a>分块索引</h4><p>分块有序，是把数据集的记录分成若干块，并且这些块满足: </p><ol><li>块内无序</li><li>块间有序</li></ol><p>对于分块有序的数据集，将每块对应一个索引项，这种索引方法叫做分块索引。<br>分块索引普遍用于数据库表查找等技术中。</p><h4 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h4><p>用于最基础的搜索技术。本篇略过。</p><h3 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h3><p>二叉排序树(Binary Sort Tree)又称为二叉查找树。他或是一棵空树，或者是具有下列性质的二叉树: </p><ul><li>若他的左子树不空，则左子树上所有结点的值均小于他的根节点的值</li><li>若他的右子树不空，则右子树上所有结点的值均大于他的根节点的值</li><li>他的左右子树也分别为二叉排序树</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">BinarySortTree</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> BiTree RootBiTree <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//查找</span>    <span class="token keyword">public</span> Status <span class="token function">SearchBst</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> BiTree rootBiTree<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> temp <span class="token operator">=</span> rootBiTree<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Error<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>Data <span class="token operator">==</span> key<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Ok<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>Data <span class="token operator">></span> key<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>LBiTree<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">SearchBst</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>RBiTree<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">SearchBst</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//插入</span>    <span class="token keyword">public</span> Status <span class="token function">InsertBst</span><span class="token punctuation">(</span><span class="token keyword">int</span> record<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> bt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BiTree</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Data <span class="token operator">=</span> record        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>RootBiTree <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            RootBiTree <span class="token operator">=</span> bt<span class="token punctuation">;</span>            <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Ok<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> current <span class="token operator">=</span> RootBiTree<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> parent <span class="token operator">=</span> current<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>Data <span class="token operator">&lt;=</span> bt<span class="token punctuation">.</span>Data<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>Data <span class="token operator">>=</span> bt<span class="token punctuation">.</span>Data<span class="token punctuation">)</span> <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Error<span class="token punctuation">;</span>                current <span class="token operator">=</span> current<span class="token punctuation">.</span>RBiTree<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                parent<span class="token punctuation">.</span>RBiTree <span class="token operator">=</span> bt<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>LBiTree<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            parent<span class="token punctuation">.</span>LBiTree <span class="token operator">=</span> bt<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Status<span class="token punctuation">.</span>Ok<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="散列表查找"><a href="#散列表查找" class="headerlink" title="散列表查找"></a>散列表查找</h3><p>散列技术是在记录的存储位置和他的关键字之间建立一个确定的对应关系 f，使得每个关键字 key 对应一个存储位置 f(key)。<br>我们把这种对应关系 f 称为散列函数，又称为哈希函数(Hash)。采用散列技术将记录存储在一块连续的存储空间中，这块存储空间称为散列表或哈希表(Hash Table)。</p><p>两个关键字 key<sub>1</sub> 不等于 key<sub>2</sub>，但是 f(key<sub>1</sub>) = f(key<sub>2</sub>)，这种现象我们称为冲突。</p><h4 id="散列函数的构造方法"><a href="#散列函数的构造方法" class="headerlink" title="散列函数的构造方法"></a>散列函数的构造方法</h4><p>好的散列函数: </p><ol><li>计算简单</li><li>散列地址分布均匀</li></ol><p>散列函数构造方法可分为: </p><ol><li>直接定址法</li><li>数字分析法</li><li>平方取中法</li><li>折叠法</li><li>除留余数法</li><li>随机数法</li></ol><h4 id="处理散列冲突的方法"><a href="#处理散列冲突的方法" class="headerlink" title="处理散列冲突的方法"></a>处理散列冲突的方法</h4><ol><li>开放定址法</li><li>再散列函数法</li><li>链地址法</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本篇开始，我们来看看在工作中比较常用的两大算法之一的&lt;strong&gt;查找&lt;/strong&gt;算法。&lt;/p&gt;
&lt;h2 id=&quot;概论&quot;&gt;&lt;a href=&quot;#概论&quot; class=&quot;headerlink&quot; title=&quot;概论&quot;&gt;&lt;/a&gt;概论&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;查找表(Searc</summary>
      
    
    
    
    
  </entry>
  
</feed>
