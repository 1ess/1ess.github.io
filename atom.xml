<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A Sort Of A Blog</title>
  
  
  <link href="https://1ess.github.io/atom.xml" rel="self"/>
  
  <link href="https://1ess.github.io/"/>
  <updated>2021-07-14T12:40:59.048Z</updated>
  <id>https://1ess.github.io/</id>
  
  <author>
    <name>Stephen Chang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/C#(%E5%8D%81%E4%B8%89)/"/>
    <id>https://1ess.github.io/C#(%E5%8D%81%E4%B8%89)/</id>
    <published>2021-07-14T12:40:59.048Z</published>
    <updated>2021-07-14T12:40:59.048Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇，我们看看 C# 中的枚举器和迭代器的基本概念。<br>之前我们说过可以使用 foreach 来遍历数组元素，本篇来讨论为什么数组可以使用 foreach 语句处理，我们可以还使用迭代器来使得自定义类型也可以使用 foreach。</p><h2 id="枚举器和可枚举类型"><a href="#枚举器和可枚举类型" class="headerlink" title="枚举器和可枚举类型"></a>枚举器和可枚举类型</h2><hr><p>为什么数组可以使用 foreach 呢？因为数组可以提供一个枚举器(enumerator)对象。枚举器对象可以依次返回数组元素。<br>获取一个对象的枚举器可以调用对象的 GetEnumerator 方法。实现了 GetEnumerator 方法的对象称为可枚举(enumerable)对象。</p><p>foreach 语句就是用来配合可枚举类型一起使用的，他会执行下列行为: </p><ul><li>调用 GetEnumerator 方法获取对象的枚举器</li><li>从枚举器请求每一项作为迭代变量(iteration variable)，我们可以读取该变量但不能改变</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">foreach</span> <span class="token punctuation">(</span>Type ValName <span class="token keyword">in</span> EnumerableObject<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="IEnumerator"><a href="#IEnumerator" class="headerlink" title="IEnumerator"></a>IEnumerator</h3><p>实现 IEnumerator 接口的枚举器包含三个函数成员: </p><ul><li>Current: 返回当前位置项的属性，只读</li><li>MoveNext: 把枚举器位置前进到集合下一项的方法，返回布尔值，位置有效返回 true，无效(到达尾部)返回 false。枚举器原始位置在第一项之前，因此在使用 Current 之前必须先调用 MoveNext</li><li>Reset: 位置重置为原始状态</li></ul><p>下面代码与直接使用 foreach 产生的结果是一样的: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> MyArr <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        IEnumerator ie <span class="token operator">=</span> MyArr<span class="token punctuation">.</span><span class="token function">GetEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>ie<span class="token punctuation">.</span><span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> current <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ie<span class="token punctuation">.</span>Current<span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="IEnumerable"><a href="#IEnumerable" class="headerlink" title="IEnumerable"></a>IEnumerable</h3><p>可枚举类型是指实现了 IEnumerable 接口的类。IEnumerable 只有一个函数成员: </p><ul><li>GetEnumerator: 获取可枚举类型的枚举器</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">:</span> IEnumerable<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> IEnumerator <span class="token function">GetEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//...</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-IEnumerator-和-IEnumerable-示例"><a href="#使用-IEnumerator-和-IEnumerable-示例" class="headerlink" title="使用 IEnumerator 和 IEnumerable 示例"></a>使用 IEnumerator 和 IEnumerable 示例</h3><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ColorEnumerator</span> <span class="token punctuation">:</span> IEnumerator<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> _colors<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> _position <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ColorEnumerator</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> colors<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        _colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">string</span><span class="token punctuation">[</span>colors<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> colors<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            _colors<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> colors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">object</span> Current <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">get</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>_position <span class="token operator">&lt;=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> _position <span class="token operator">>=</span> _colors<span class="token punctuation">.</span>Length<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> _colors<span class="token punctuation">[</span>_position<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">bool</span> <span class="token function">MoveNext</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>_position <span class="token operator">&lt;</span> _colors<span class="token punctuation">.</span>Length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            _position<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        _position <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Colors</span> <span class="token punctuation">:</span> IEnumerable<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> _colors<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Colors</span><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> colors<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        _colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">string</span><span class="token punctuation">[</span>colors<span class="token punctuation">.</span>Length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> colors<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            _colors<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> colors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> IEnumerator <span class="token function">GetEnumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ColorEnumerator</span><span class="token punctuation">(</span>_colors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Progeam</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Colors colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Colors</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"yellow"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">string</span> color <span class="token keyword">in</span> colors<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="泛型枚举接口"><a href="#泛型枚举接口" class="headerlink" title="泛型枚举接口"></a>泛型枚举接口</h3><p>之前我们写的都是非泛型版本，实际工作中，我们基本都使用泛型版本的 IEnumerator<T> 和 IEnumerable<T> 。非泛型版本只是兼任 2.0 版本之前无泛型的遗留代码。</p><p>泛型与非泛型版本的主要区别是: </p><ul><li>IEnumerable<T> 接口的 GetEnumerator 方法要返回实现 IEnumerator<T> 接口的枚举器实例</li><li>泛型版本的 Current 属性返回的不是 object 类型，而是实际类型的对象</li></ul><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>C# 2.0 之后，提供了更简单的创建枚举器和可枚举类型的方式。这种结构称为迭代器(iterator)。</p><ul><li>迭代器返回一个泛型的枚举器</li><li>yield return 语句声明这是枚举的下一项</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> IEnumerator<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> <span class="token function">BlackAndWhite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token string">"black"</span><span class="token punctuation">;</span>    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token string">"gray"</span><span class="token punctuation">;</span>    <span class="token keyword">yield</span> <span class="token keyword">return</span> <span class="token string">"white"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇，我们看看 C# 中的枚举器和迭代器的基本概念。&lt;br&gt;之前我们说过可以使用 foreach 来遍历数组元素，本篇来讨论为什么数组可以使用 foreach 语句处理，我们可以还使用迭代器来使得自定义类型也可以使用 foreach。&lt;/p&gt;
&lt;h2 id=&quot;枚举器和可枚</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/C#(%E5%8D%81%E5%9B%9B)/"/>
    <id>https://1ess.github.io/C#(%E5%8D%81%E5%9B%9B)/</id>
    <published>2021-07-14T12:40:59.048Z</published>
    <updated>2021-07-14T12:40:59.048Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇，讲讲 LINQ。<br>LINQ(发音同 link，不要读成 lin-q)代表语言集成查询(Language Integrated Query)，他是 .Net 的扩展，允许我们很轻松的操作对象集合。<br>LINQ 的出现也就意味着允许我们在 C# 中使用函数式编程的思想。</p><h3 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h3><p>创建匿名对象与创建具名对象类似，只是没有类名和构造函数: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">new</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> FieldProp <span class="token operator">=</span> InitExpr<span class="token punctuation">;</span> FieldProp <span class="token operator">=</span> InitExpr<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意: </p><ul><li>匿名对象只能用于局部变量，不能用于成员</li><li>必须是由 var 作为类型</li><li>不能设置属性，匿名对象的属性是只读的</li></ul><h3 id="方法语法和查询语法"><a href="#方法语法和查询语法" class="headerlink" title="方法语法和查询语法"></a>方法语法和查询语法</h3><p>我们再写 LINQ 可以使用两种语法: </p><ul><li>方法语法</li><li>查询语法</li></ul><p>微软推荐使用查询语法，但是我更习惯方法语法。<br><strong>更新: 查询语法真香！</strong></p><h3 id="查询变量"><a href="#查询变量" class="headerlink" title="查询变量"></a>查询变量</h3><p>LINQ 查询返回两种类型的结果: </p><ul><li>可枚举的类型</li><li>单一标量</li></ul><h3 id="标准查询运算符"><a href="#标准查询运算符" class="headerlink" title="标准查询运算符"></a>标准查询运算符</h3><p>标准查询运算符由一系列 API 方法组成，标准查询运算符特性如下: </p><ul><li>被查询的集合对象称为序列，必须实现 IEnumerable<T> 接口</li><li>标准查询运算符使用方法语法</li><li>一些运算符返回 IEnumerable<T> 对象，一些则返回标量</li><li>很多操作都以谓词作为参数，谓词是一个方法，以对象作为参数，根据是否满足条件返回 true 或 false</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> total <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 6</span>        <span class="token keyword">int</span> howMany <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C# 中的序列包括 Array、List<T>、Dictionary&lt;T1, T2&gt; 等。LINQ 可以以非常强大的方式来操纵这些对象。</p><p>共有 47 个标准查询运算符，常用的如: Where(类似于 filter)、Select(类似于 map)、toList<T>、First、FirstOrDefault、Last、LastOrDefault、Take、Skip 等，当我们需要使用高级用法时，我们可以在查询文档。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇，讲讲 LINQ。&lt;br&gt;LINQ(发音同 link，不要读成 lin-q)代表语言集成查询(Language Integrated Query)，他是 .Net 的扩展，允许我们很轻松的操作对象集合。&lt;br&gt;LINQ 的出现也就意味着允许我们在 C# 中使用函数式编</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/C#(%E5%8D%81%E4%BA%94)/"/>
    <id>https://1ess.github.io/C#(%E5%8D%81%E4%BA%94)/</id>
    <published>2021-07-14T12:40:59.048Z</published>
    <updated>2021-07-14T12:40:59.048Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇，我们讲讲 C# 网络编程中比较重要的概念 —— 异步。</p><h3 id="什么是异步"><a href="#什么是异步" class="headerlink" title="什么是异步"></a>什么是异步</h3><p>当程序启动时，系统就会在内存创建一个新进程。进程是构成程序的资源的集合，资源包括虚拟地址、文件句柄等。</p><p>在进程内部，系统还创建了称为线程的内核对象。也就是说一旦进程创建，系统就会在 Main 方法的第一行语句开始线程执行。</p><p>关于线程: </p><ul><li>默认情况下，一个进程只包含一个线程，从程序的开始一直执行到结束</li><li>线程可以派生其他线程</li><li>如果一个进程包含多个线程，他们将共享进程资源</li><li>系统为处理器执行所规划的基本单元是线程而不是进程</li></ul><p>在 C# 5.0 引入了一个非常好的特性 —— async/await。在 JavaScript 和即将到来的 Swift 5.0 中都存在引入了此特性，虽然实现的底层原理并不相同。<br>这个特性是 .Net 框架的一部分，但是没有嵌入 C# 中。</p><h3 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h3><p>如果程序调用某个方法，等待其执行所有处理之后才继续执行，我们称这样的方法为同步方法。<br>相反的，异步方法就是在处理完成之前就返回到调用方法。我们使用 async/await 特性可以很方便的创建异步方法。<br>该特性有三部分组成: </p><ul><li>调用方法: 调用异步方法的方法，在异步方法执行任务时继续执行</li><li>异步方法: 该方法异步执行其工作，然后立即返回到调用方法</li><li>await 表达式: 用于异步方法内，指明需要异步执行的任务，一个异步方法可以包含多个 await 表达式，如果一个都不包含，则该方法将同步执行，编译器会报警告</li></ul><p>async 关键字是一个专门给编译器的提示，意思是该函数的实现可能会出现 await 表达式。</p><ul><li>在 Debug 模式下，对于 async 方法，生成一个 class 状态机</li><li>在 Release 模式下，对于 async 方法，生成一个 struct 状态机</li></ul><h3 id="什么是异步方法"><a href="#什么是异步方法" class="headerlink" title="什么是异步方法"></a>什么是异步方法</h3><p>异步方法的特点: </p><ul><li>方法头包含 async 方法修饰符</li><li>包含一个或多个 await 表达式表示异步完成的任务</li><li>返回值只能是 void，Task 或 Task&lt;T&gt;</li><li>异步方法参数不能有 out 或 ref 修饰</li><li>按照约定，异步方法以 Async 结尾</li><li>Lambda 表达式也可以作为异步对象</li><li>调用方法读取 Task 的 Result 属性获取 T 类型的值</li><li>任何返回 Task&lt;T&gt; 的异步方法必须返回 T 类型的值</li></ul><p>需要注意: </p><ul><li>不要使用 void 作为 async 方法的返回值类型，async 方法可以返回 void，仅限于编写事件处理程序，如果是普通方法没有返回值，需要返回 Task</li><li>避免使用 Task.Wait 和 Task.Result 方法，可能会导致死锁</li><li>当第一次遇到 await 表达式所返回的类型就是方法头的返回值类型，与 await 表达式的返回值类型没关系</li><li>异步方法的 return 语句并没有真正返回值，而只是退出了</li></ul><h3 id="在调用方法同步等待任务"><a href="#在调用方法同步等待任务" class="headerlink" title="在调用方法同步等待任务"></a>在调用方法同步等待任务</h3><p>我们可能需要在调用方法中同步等待某个任务完成，Task&lt;T&gt; 实例提供了 Wait 方法，来等待某个特殊的 Task 完成。<br>还可以使用 Task 的静态方法 WaitAll 和 WaitAny 方法同步等待多个任务完成。参数为 Task[]。</p><h3 id="在异步方法异步等待任务"><a href="#在异步方法异步等待任务" class="headerlink" title="在异步方法异步等待任务"></a>在异步方法异步等待任务</h3><p>我们可以使用 await 和 Task 的静态方法 WhenAll 和 WhenAny 方法异步等待多个任务完成。参数为 List&lt;Task&lt;T&gt;&gt;。</p><p>注意: async 和 await 都没有新开线程，新开线程是 Task.Run() 做的事情。如果自己编写异步方法，注意要自己编写 Task.Run()。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇，我们讲讲 C# 网络编程中比较重要的概念 —— 异步。&lt;/p&gt;
&lt;h3 id=&quot;什么是异步&quot;&gt;&lt;a href=&quot;#什么是异步&quot; class=&quot;headerlink&quot; title=&quot;什么是异步&quot;&gt;&lt;/a&gt;什么是异步&lt;/h3&gt;&lt;p&gt;当程序启动时，系统就会在内存创建一个新</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/C#(%E5%8D%81%E5%85%AD)/"/>
    <id>https://1ess.github.io/C#(%E5%8D%81%E5%85%AD)/</id>
    <published>2021-07-14T12:40:59.048Z</published>
    <updated>2021-07-14T12:40:59.048Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇，我们讲讲 C# 中的异常处理 —— try、catch、finially。</p><h3 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h3><p>异常是程序运行时错误，出现正常操作时未预料的情况。当发生时，系统会捕获这个错误并抛出异常。<br>在编写 iOS 程序时，我们可能很少使用异常，通常我们使用 NSError **error 这样的二级指针来获取错误对象，处理不同的错误。</p><h3 id="try-语句"><a href="#try-语句" class="headerlink" title="try 语句"></a>try 语句</h3><p>try 语句是为了避免出现异常而被保护的代码段，在出现异常时提供异常处理。<br>try 语句由三部分组成: </p><ul><li>try 包含为避免出现异常而被保护的代码</li><li>catch 是异常处理程序</li><li>finally 是在所有情况都会执行的代码块，不论有没有异常</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异常类"><a href="#异常类" class="headerlink" title="异常类"></a>异常类</h3><p>有许多不同类型的异常可能在程序中发生。BCL 定义了许多异常类。当一个异常发生时，我们应: </p><ul><li>创建该类型的异常对象</li><li>在适当的 catch 子句处理</li></ul><p>所有的异常类都继承自 System.Exception。异常对象含有只读属性: </p><ul><li>Message: 包含异常原因</li><li>StackTrace: 调用栈</li></ul><h3 id="catch-子句"><a href="#catch-子句" class="headerlink" title="catch 子句"></a>catch 子句</h3><p>catch 子句有三种形式: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">catch</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//没有参数，匹配 try 中发生的任何异常</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExceptionType</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//异常类型作为参数，匹配该类型的异常</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExceptionType</span> Exp<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//特定异常对象作为参数，匹配该类型的异常，在代码块中可以使用异常对象</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="finally-子句"><a href="#finally-子句" class="headerlink" title="finally 子句"></a>finally 子句</h3><p>如果程序进入了一个带有 finally 块的 try 语句，那么 finally 块总会执行。</p><h3 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h3><p>我们可以使用 throw 语句显式触发一个异常，语法如下: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">throw</span> ExceptionObject<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>throw 还可以不带异常对象使用，只能用在 catch 块内部。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇，我们讲讲 C# 中的异常处理 —— try、catch、finially。&lt;/p&gt;
&lt;h3 id=&quot;什么是异常&quot;&gt;&lt;a href=&quot;#什么是异常&quot; class=&quot;headerlink&quot; title=&quot;什么是异常&quot;&gt;&lt;/a&gt;什么是异常&lt;/h3&gt;&lt;p&gt;异常是程序运行时错</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/C#(%E5%8D%81%E4%B8%83)/"/>
    <id>https://1ess.github.io/C#(%E5%8D%81%E4%B8%83)/</id>
    <published>2021-07-14T12:40:59.048Z</published>
    <updated>2021-07-14T12:40:59.048Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇，介绍一些 C# 中的比较常见的预处理指令。</p><p>C 和 C++ 都有实际的预处理阶段，而在 C# 中是没有的，预处理指令是由编译器来处理。<br>在 Objective-C 中预处理指令也特别常用。</p><h3 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h3><p>下面是预处理指令的主要规则: </p><ul><li>预处理指令必须与 C# 代码处于不同行</li><li>包含预处理指令的行必须以 # 开头<ol><li># 字符前可以有空格</li><li># 字符与预处理指令之间可以有空格</li></ol></li><li>允许行尾有单行注释，不可以有多行注释</li></ul><h3 id="define-和-undef-指令"><a href="#define-和-undef-指令" class="headerlink" title="#define 和 #undef 指令"></a>#define 和 #undef 指令</h3><p>编译符号是只有两种状态的标识符。要么被定义，要么未被定义。<br>编译符号有如下特性: </p><ul><li>可以是除了 true 和 false 之外的任何标识符，包括 C# 关键字，以及在 C# 中声明的标识符</li><li>他没有值，与 C 不同，他不表示字符串</li></ul><p>#define 指令声明一个编译符号，#undef 指令取消声明一个编译符号。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token preprocessor property">#<span class="token directive keyword">define</span> PremiumVersion</span><span class="token preprocessor property">#<span class="token directive keyword">define</span> EconomyVersion</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token preprocessor property">#<span class="token directive keyword">undef</span> PremiumVersion</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意: #define 和 #undef 指令只能用于任何 C# 代码之前，在 C# 代码开始之后，这两个指令就都不可以使用了。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token preprocessor property">#<span class="token directive keyword">define</span> PremiumVersion    </span><span class="token comment" spellcheck="true">//错误，必须出现在所有 C# 代码之前</span><span class="token keyword">namespace</span> Eagle<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token preprocessor property">#<span class="token directive keyword">define</span> PremiumVersion    </span><span class="token comment" spellcheck="true">//错误</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重复定义编译符号也是允许的。</p><h3 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h3><p>条件编译允许我们根据某个编译符号是否被定义来标注一段代码被编译或跳过。<br>有4个指令用来指定条件编译: </p><ul><li>#if</li><li>#else</li><li>#elif</li><li>#endif</li></ul><p>如下: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token preprocessor property">#<span class="token directive keyword">if</span> PremiumVersion</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token preprocessor property">#<span class="token directive keyword">endif</span></span><span class="token preprocessor property">#<span class="token directive keyword">if</span> (PremiumVersion &amp;&amp; LeftHanded)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token preprocessor property">#<span class="token directive keyword">endif</span></span><span class="token preprocessor property">#<span class="token directive keyword">if</span> true  </span><span class="token comment" spellcheck="true">//总被编译</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token preprocessor property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="条件编译的结构"><a href="#条件编译的结构" class="headerlink" title="条件编译的结构"></a>条件编译的结构</h3><p>如下: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token preprocessor property">#<span class="token directive keyword">if</span> Cond1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token preprocessor property">#<span class="token directive keyword">elif</span> Cond2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token preprocessor property">#<span class="token directive keyword">elif</span> Cond3</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token preprocessor property">#<span class="token directive keyword">endif</span></span><span class="token preprocessor property">#<span class="token directive keyword">if</span> Cond1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token preprocessor property">#<span class="token directive keyword">else</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token preprocessor property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="诊断指令"><a href="#诊断指令" class="headerlink" title="诊断指令"></a>诊断指令</h3><p>下面是诊断指令的语法，注意与 C# 普通字符串不同，Message 无需引号包裹: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token preprocessor property">#<span class="token directive keyword">warning</span> Message</span><span class="token preprocessor property">#<span class="token directive keyword">error</span> Message</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="区域指令"><a href="#区域指令" class="headerlink" title="区域指令"></a>区域指令</h3><p>区域指令允许我们命名一段代码，#region 指令特性如下: </p><ul><li>放置在希望标注的代码段之上</li><li>在该指令后放置可选字符串作为名字</li><li>之后的代码由 #endregion 指令终止</li></ul><p>VisualStudio 可以显式和隐藏由区域指令包裹的代码段。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token preprocessor property">#<span class="token directive keyword">region</span> Constructor</span><span class="token keyword">public</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token keyword">string</span> s<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token preprocessor property">#<span class="token directive keyword">endregion</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="pragma-warning"><a href="#pragma-warning" class="headerlink" title="#pragma warning"></a>#pragma warning</h3><p>该指令允许我们关闭和开启警告信息: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token preprocessor property">#<span class="token directive keyword">pragma</span> warning disable 618, 414</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token preprocessor property">#<span class="token directive keyword">pragma</span> warning restore 618</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇，介绍一些 C# 中的比较常见的预处理指令。&lt;/p&gt;
&lt;p&gt;C 和 C++ 都有实际的预处理阶段，而在 C# 中是没有的，预处理指令是由编译器来处理。&lt;br&gt;在 Objective-C 中预处理指令也特别常用。&lt;/p&gt;
&lt;h3 id=&quot;基本规则&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/C#(%E5%8D%81%E5%85%AB)/"/>
    <id>https://1ess.github.io/C#(%E5%8D%81%E5%85%AB)/</id>
    <published>2021-07-14T12:40:59.048Z</published>
    <updated>2021-07-14T12:40:59.048Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇，我们讲讲 C# 中非常重要的概念 —— 反射和特性。</p><h3 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h3><p>很多程序语言中有元数据(matedata)的概念，其实元数据就是描述数据的数据。<br>一个运行的程序查看本身元数据或其他程序元数据的行为就叫做反射(reflection)。<br>要使用反射，我们必须引入 System.Reflection 命名空间。</p><h3 id="Type-类"><a href="#Type-类" class="headerlink" title="Type 类"></a>Type 类</h3><p>BCL 声明了一个 Type 的抽象类，他被设计用来包含类型的特性。使用这个类的对象可以让我们获得程序使用的类型信息。<br>我们需要了解的是: </p><ul><li>对于程序中的每一个类型，CLR 都会创建一个包含这个类型信息的 Type 类型的对象</li><li>程序中用到的每一个类型都会关联到独立的 Type 类型的实例</li><li>不管创建的类型有多少个实例，只有一个 Type 对象会关联到多有的这些实例</li></ul><p>我们可以从 Type 类型的实例获取几乎所有关于类型的信息，Type 类有很多有用的成员，如: </p><ul><li>Name 属性，返回类型名</li><li>NameSapce 属性，返回类型声明的命名空间</li><li>Assembly 属性，返回程序集</li><li>GetFields 方法，返回字段列表</li><li>GetProperties 方法，返回属性列表</li><li>GetMethods 方法，返回方法列表</li></ul><h3 id="获取-Type-对象的实例"><a href="#获取-Type-对象的实例" class="headerlink" title="获取 Type 对象的实例"></a>获取 Type 对象的实例</h3><p>我们可以使用 GetType 方法和 typeof 运算符获取 Type 对象。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">.</span>Reflection<span class="token punctuation">;</span>Type t1 <span class="token operator">=</span> myInstance<span class="token punctuation">.</span><span class="token function">GetType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Type t2 <span class="token operator">=</span> <span class="token keyword">typeof</span> <span class="token punctuation">(</span>DerivedClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>特性(attribute)是一种允许我们向程序集添加元数据的语言结构。<br>按照惯例，特性以 Pascal 命名法，并以 Attribute 为后缀命名。当应用特性时，可以不加 Attribute 后缀。<br>应用特性要被方括号包裹，其中是特性名和参数列表。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span>Serializable<span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token function">MyAttribute</span><span class="token punctuation">(</span><span class="token string">"Simple String"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyOtherClas</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="预定义特性"><a href="#预定义特性" class="headerlink" title="预定义特性"></a>预定义特性</h3><h4 id="Obsolete-特性"><a href="#Obsolete-特性" class="headerlink" title="Obsolete 特性"></a>Obsolete 特性</h4><p>我们可以使用 Obsolete 特性标注方法过期: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token function">Obsolete</span><span class="token punctuation">(</span><span class="token string">"Use Method SuperPrint"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们依旧可以使用过期方法，可以成功编译并执行，但是编译器会报警告。我们可以使用第二个布尔参数，使得编译错误。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token function">Obsolete</span><span class="token punctuation">(</span><span class="token string">"Use Method SuperPrint"</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//调用会发生编译错误</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Conditional-特性"><a href="#Conditional-特性" class="headerlink" title="Conditional 特性"></a>Conditional 特性</h4><p>Conditional 特性允许我们包含或排斥特定方法的所有调用。<br>如果定义了编译符号参数，则标记为 Conditional 特性的方法与普通方法一样，如果未定义编译符号，则所有的 Conditional 方法都不会调用: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token function">Conditional</span><span class="token punctuation">(</span><span class="token string">"DoTrace"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">TraceMessage</span><span class="token punctuation">(</span><span class="token keyword">string</span> str<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ASP.Net MVC 有很多重要的特性，我们会在学习 MVC 时再具体学习。</p><h3 id="其他特性相关"><a href="#其他特性相关" class="headerlink" title="其他特性相关"></a>其他特性相关</h3><p>我们可以为单个结构应用多个特性，可以使用多层结构，也可以使用逗号分隔: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span>Serializable<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">MyAttribute</span><span class="token punctuation">(</span><span class="token string">"Simple String"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Serializable<span class="token punctuation">,</span> <span class="token function">MyAttribute</span><span class="token punctuation">(</span><span class="token string">"Simple String"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>除了类，特性还可以应用于字段，属性和方法等。</p><h3 id="自定义特性"><a href="#自定义特性" class="headerlink" title="自定义特性"></a>自定义特性</h3><p>所有的特性要派生自 System.Attribute。<br>要声明一个自定义特性: </p><ul><li>声明一个派生自 System.Attribute 的类</li><li>给他起一个 Attribute 后缀的名字</li><li>通常将该类声明为密封 sealed</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">MyAttribute</span> <span class="token punctuation">:</span> System<span class="token punctuation">.</span>Attribute<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意: 特性类的成员只能是: </p><ul><li>字段</li><li>属性</li><li>构造函数</li></ul><p>每个特性至少有一个公共构造函数。我们在应用特性传入参数列表时，其实是在使用不同的构造函数。<br>关于特性构造函数: </p><ul><li>应用特性时，构造函数的实参必须是在编译期可以确定的常量表达式</li><li>如果构造函数没有参数，可以省略圆括号</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇，我们讲讲 C# 中非常重要的概念 —— 反射和特性。&lt;/p&gt;
&lt;h3 id=&quot;元数据&quot;&gt;&lt;a href=&quot;#元数据&quot; class=&quot;headerlink&quot; title=&quot;元数据&quot;&gt;&lt;/a&gt;元数据&lt;/h3&gt;&lt;p&gt;很多程序语言中有元数据(matedata)的概念，其实元</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/%E8%81%8A%E8%81%8A%E6%9C%80%E8%BF%91%EF%BC%8C%E8%81%8A%E8%81%8A%E7%94%9F%E6%B4%BB/"/>
    <id>https://1ess.github.io/%E8%81%8A%E8%81%8A%E6%9C%80%E8%BF%91%EF%BC%8C%E8%81%8A%E8%81%8A%E7%94%9F%E6%B4%BB/</id>
    <published>2021-07-14T12:40:59.048Z</published>
    <updated>2021-07-14T12:40:59.048Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇聊聊最近的生活吧。</p><h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>最近好多之前离职的小伙伴希望我去他们的新公司去看看，可能的话可以去他们的公司工作，还是有些开心的，最起码是对我的认可。但还是因为各种原因婉拒了。</p><p>首先，就是最近过的有点忙，10.1 那天去办理新房入户，之后还要装修。<br>其二，希望在现在这个公司越干越好吧，入职已经两年多，有些不舍。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p>生活中也完成了人生中的一件大事 —— 买房。在 2017 年 12 月 13 日贷款下来了，巧的是那一天正是我的生日。10 月 1 日这天房子也终于下来了，吃完午饭溜达着去办理新房入户。办理入户的时候才第一次进门看看，检查了一圈还算满意吧，虽然之前觉得不想背负这么大的压力，但第一次踏进属于自己的家门，还是有些不一样的感觉。之后匆匆赶回老家去参加老哥 10 月 3 号的婚礼，很圆满。可能自己 1 年之后也会结婚吧，不知道又会是什么样子。</p><h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><p>最近把 C# 基础知识详细复习完毕，之后会把精力先放在 ASP.Net Core MVC 上，学习一下最佳实践。现在 .Net Core 已经是 2.1 了，基础设施已经比较完善。<br>计划路线: </p><ul><li>ASP.Net MVC</li><li>ASP.Net API</li><li>ASP.Net Core</li></ul><p>还是决定把之前想好好学习的数据库知识先放一放，确实是个大工程，把 ASP.Net 搞的透彻一些再开始吧。<br>最后说一句，ReSharper 插件确实是个好东西，谁用谁知道！</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>之前在京东云买了个服务器，又在腾讯云买的域名，最近想把个人网站好好搞搞，这个 ICP 备案真是中国特色。哎！</p><blockquote><p>最后我想说，几十年以后，或者几个世纪以后，回顾这段历史的时候，大家会觉得网站备案、GFW、绿坝软件、诸如此类的事情，都是好事，因为它们让许多中国青年认清了这个社会的本质，不再对旧制度抱有幻想，开始期盼新制度的到来，从而大大加快了社会变革的速度。要是没有它们，许多人也许要过许多年才会对现行制度产生怀疑，从而进行彻底的反思，新制度就会因此少了许多支持者。统治者越是凶恶，其实越表明他的恐慌和虚弱，而历史就像印度诗人泰戈尔所说，”总是在耐心地等待被侮辱和被压迫者的胜利”。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/1ess/cdn/contentImg/other/other1.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇聊聊最近的生活吧。&lt;/p&gt;
&lt;h3 id=&quot;工作&quot;&gt;&lt;a href=&quot;#工作&quot; class=&quot;headerlink&quot; title=&quot;工作&quot;&gt;&lt;/a&gt;工作&lt;/h3&gt;&lt;p&gt;最近好多之前离职的小伙伴希望我去他们的新公司去看看，可能的话可以去他们的公司工作，还是有些开心的，最</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/%E7%BC%96%E7%A8%8B%E4%B8%89%E5%B9%B4/"/>
    <id>https://1ess.github.io/%E7%BC%96%E7%A8%8B%E4%B8%89%E5%B9%B4/</id>
    <published>2021-07-14T12:40:59.048Z</published>
    <updated>2021-07-14T12:40:59.048Z</updated>
    
    <content type="html"><![CDATA[<p>写这篇文章，也算是给自己毕业三年的编程生涯做个总结。<br>时间如白驹过隙，满打满算毕业也已经三年有余，也早就想写一篇文章来回忆一下自己毕业后的工作生活。</p><h3 id="南下"><a href="#南下" class="headerlink" title="南下"></a>南下</h3><p>2015 年的 7 月，从票贩子手中接过去往广州的火车票，头也不回的踏上火车，三天两夜，憧憬着也迷茫着。<br>下了火车，天就像漏了一样下着瓢泼大雨，一个人拖着行李箱在肯德基等到接我的大学室友，像一对难兄难弟。<br>广州的生活不用多说，上班写码，下班逛街。走过了广州的大街小巷，逛过了羊城八景。生活有苦有乐，苦中作乐。</p><p>转眼到了 15 年的春节，望着卡中的余额，再看看飞机票的价格，还是放弃了回家的念头，也是至今唯一一个没陪在父母身边过的第一个春节。印象最深的也就是陪着我过节的兰州拉面了。</p><p>之后的日子也不紧不慢地过着，晚上也越来越愿意去珠江边走走，望着一座座的高楼大厦，有时候也会问自己我属于这里吗？离开的想法也越来越强烈。</p><h3 id="北归"><a href="#北归" class="headerlink" title="北归"></a>北归</h3><p>一旦有了离开的念头，确实蛮难回头，一段时间后终于也下定决心，在 16 年的 9 月，再次回到了离开一年的家乡，刚回来的感觉是那么的熟悉，亲切。也希望在这里实现自己的理想。<br>在 10 月 7 日加入新公司直到现在。<br>之后的日子感觉过的飞快，与女朋友一起租房，在父母支持下买房，努力地工作去证明自己。<br>回来工作的两年，从南方到北方给我的感觉确实是从大环境到个人素质确实有差距，哈尔滨的技术风气确实有些奇怪。但是个人的力量太渺小，做好自己就好。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>这三年从一个代码写得不怎么样的渣、到会写点渣代码、再到终于能写点代码。心里还是有些欣慰，感觉自己的努力可以看到点成果。<br>身边的同事来来往往，看着新人同事专注 Coding、Google、Debug 的样子，倒也是想起了那个从哈尔滨跑到广州，秋天，一个人拎着皮箱，坐在肯德基中的自己。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;写这篇文章，也算是给自己毕业三年的编程生涯做个总结。&lt;br&gt;时间如白驹过隙，满打满算毕业也已经三年有余，也早就想写一篇文章来回忆一下自己毕业后的工作生活。&lt;/p&gt;
&lt;h3 id=&quot;南下&quot;&gt;&lt;a href=&quot;#南下&quot; class=&quot;headerlink&quot; title=&quot;南下&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/ASP.Net%20MVC(%E4%B8%80)/"/>
    <id>https://1ess.github.io/ASP.Net%20MVC(%E4%B8%80)/</id>
    <published>2021-07-14T12:40:59.048Z</published>
    <updated>2021-07-14T12:40:59.048Z</updated>
    
    <content type="html"><![CDATA[<p>从这篇开始，我们来谈谈 ASP.Net MVC，我们将会介绍 ASP.Net MVC 的方方面面(包括基础以及高级特性)。</p><h2 id="MVC-架构"><a href="#MVC-架构" class="headerlink" title="MVC 架构"></a>MVC 架构</h2><hr><p>MVC 架构以及在软件工程出现很长时间了，几乎所有语言都有 MVC 以及变种形式。</p><h3 id="iOS-中的-MVC"><a href="#iOS-中的-MVC" class="headerlink" title="iOS 中的 MVC"></a>iOS 中的 MVC</h3><p><img src="https://cdn.jsdelivr.net/gh/1ess/cdn/contentImg/MVC/1/iOSMVC.jpg"></p><p>图中绿色箭头表示直接引用，只有 Controller 直接持有 Model 和 View 的引用，<br>View 向 Controller 的通信有三种形式: </p><ul><li>target-action</li><li>delegate</li><li>data source</li></ul><p>Model 向 Controller 的通信则通过 Notification &amp; KVO。</p><p>在 iOS 的 MVC 严格实现中，Model 和 View 是绝对不能直接通信的，即互相之间不能持有对方。这也是区别于 Android 和 .Net 最大的地方。<br>虽然耦合度会减少，但是会造成 Controller 巨大，这也是现在 MVVM，MVP 等其他架构出现的原因。</p><h3 id="Net-中的-MVC"><a href="#Net-中的-MVC" class="headerlink" title=".Net 中的 MVC"></a>.Net 中的 MVC</h3><p>下面我们在具体看看 .Net MVC 是怎样实现的。<br>MVC 中: </p><ul><li>M 指的就是 Model: 它是一种数据以及业务逻辑</li><li>V 指的就是 View: 它是用户界面，利用模型展示界面给用户，也允许用户修改数据</li><li>C 指的就是 Controller: 它可以处理用户请求，通常，用户与界面交互，发起一个网络请求，这个请求就被 Controller 处理，利用模型数据渲染恰当的界面作为响应</li></ul><p>在 .Net 中的 MVC，Model 会从 Controller 传递给 View。</p><h2 id="ASP-Net-MVC-历史版本"><a href="#ASP-Net-MVC-历史版本" class="headerlink" title="ASP.Net MVC 历史版本"></a>ASP.Net MVC 历史版本</h2><hr><h3 id="MVC-1-0-特性"><a href="#MVC-1-0-特性" class="headerlink" title="MVC 1.0 特性"></a>MVC 1.0 特性</h3><ul><li>使用 WebForm 引擎</li><li>路由</li><li>HTML Helpers</li><li>Ajax Helpers</li></ul><h3 id="MVC-2-0-特性"><a href="#MVC-2-0-特性" class="headerlink" title="MVC 2.0 特性"></a>MVC 2.0 特性</h3><ul><li>Area</li><li>异步 Controller</li><li>客户端验证</li><li>自定义模板</li></ul><h3 id="MVC-3-0-特性"><a href="#MVC-3-0-特性" class="headerlink" title="MVC 3.0 特性"></a>MVC 3.0 特性</h3><ul><li>Razor 视图引擎</li><li>Global filters</li><li>远程验证</li><li>ViewBag</li></ul><h3 id="MVC-4-0-特性"><a href="#MVC-4-0-特性" class="headerlink" title="MVC 4.0 特性"></a>MVC 4.0 特性</h3><ul><li>Bundling 和 minification</li></ul><h3 id="MVC-5-0-特性"><a href="#MVC-5-0-特性" class="headerlink" title="MVC 5.0 特性"></a>MVC 5.0 特性</h3><ul><li>Authentication filters</li><li>支持 Bootstrap</li><li>ASP.Net Identity</li></ul><h3 id="MVC-5-2-特性"><a href="#MVC-5-2-特性" class="headerlink" title="MVC 5.2 特性"></a>MVC 5.2 特性</h3><ul><li>Attribute based routing</li></ul><p>注意: MVC 5 项目 默认包含 bootstrap 3.0 的 css 和 js 文件. </p><h2 id="ASP-Net-MVC-项目文件夹结构"><a href="#ASP-Net-MVC-项目文件夹结构" class="headerlink" title="ASP.Net MVC 项目文件夹结构"></a>ASP.Net MVC 项目文件夹结构</h2><hr><p><img src="https://cdn.jsdelivr.net/gh/1ess/cdn/contentImg/MVC/1/FolderStructure.png"></p><h3 id="App-Data"><a href="#App-Data" class="headerlink" title="App_Data"></a>App_Data</h3><p>App_Data 文件夹可以容纳 localDB，XML，日志文件等应用数据文件。</p><h3 id="App-Start"><a href="#App-Start" class="headerlink" title="App_Start"></a>App_Start</h3><p>App_Start 文件夹当程序已启动就会被执行的类文件。例如: AuthConfig.cs，BundleConfig.cs，FilterConfig.cs，RouteConfig.cs 等。<br>在 MVC 5 默认包含 BundleConfig.cs，FilterConfig.cs 以及 RouteConfig.cs 三个配置类文件。</p><h3 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h3><p>Content 文件夹容纳静态文件如 css，image 以及 favicon 等。在 MVC 5 默认包含 bootstrap.css，bootstrap.min.css 以及 Site.css 文件。</p><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><p>Controller 文件夹容纳 controller 类文件，MVC 要求 controller 文件名以 Controller 结尾</p><h3 id="fonts"><a href="#fonts" class="headerlink" title="fonts"></a>fonts</h3><p>fonts 文件夹容纳自定义字体文件。</p><h3 id="Models"><a href="#Models" class="headerlink" title="Models"></a>Models</h3><p>Models 文件夹容纳模型类文件。</p><h3 id="Scripts"><a href="#Scripts" class="headerlink" title="Scripts"></a>Scripts</h3><p>Scripts 文件夹容纳 JavaScript 文件。MVC 5 默认包含 bootstrap，jquery3.3.1 以及 modernizr2.8.3。</p><h3 id="Views"><a href="#Views" class="headerlink" title="Views"></a>Views</h3><p>Views 文件夹容纳应用的 html 文件以 .cshtml 作为后缀。.cshtml 文件允许你同时写 C# 代码和 html 标签。<br>Views 文件夹包含每个控制器的单独的文件夹，例如 HomeController 对于 Views/Home 文件夹。</p><p>Shared 文件夹用来容纳不同控制器共享的视图。如: _Layout.cshtml。</p><h3 id="Global-asax"><a href="#Global-asax" class="headerlink" title="Global.asax"></a>Global.asax</h3><p>Global.asax 允许编写应用级事件，如: Application_BeginRequest，Application_Start，Application_Error，Session_Start，Session_End 等。</p><h3 id="Packages-config"><a href="#Packages-config" class="headerlink" title="Packages.config"></a>Packages.config</h3><p>NuGet 的包管理文件。</p><h3 id="Web-config"><a href="#Web-config" class="headerlink" title="Web.config"></a>Web.config</h3><p>Web.config 包含应用级的配置。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;从这篇开始，我们来谈谈 ASP.Net MVC，我们将会介绍 ASP.Net MVC 的方方面面(包括基础以及高级特性)。&lt;/p&gt;
&lt;h2 id=&quot;MVC-架构&quot;&gt;&lt;a href=&quot;#MVC-架构&quot; class=&quot;headerlink&quot; title=&quot;MVC 架构&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/ASP.Net%20MVC(%E4%BA%8C)/"/>
    <id>https://1ess.github.io/ASP.Net%20MVC(%E4%BA%8C)/</id>
    <published>2021-07-14T12:40:59.048Z</published>
    <updated>2021-07-14T12:40:59.048Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇，我们来详细讲讲关于 ASP.Net MVC 中的路由。</p><h2 id="ASP-Net-MVC-中的路由"><a href="#ASP-Net-MVC-中的路由" class="headerlink" title="ASP.Net MVC 中的路由"></a>ASP.Net MVC 中的路由</h2><hr><p>在 Web Form 应用，每个 URL 必须匹配一个 .aspx 物理文件，如: <a href="http://domain/bar.aspx">http://domain/bar.aspx</a> 必须有一个用于响应渲染的文件 bar.aspx。<br>ASP.Net MVC 则通过引入 Routing 来消除必须使用物理文件映射 URL 的弊端。<br>路由使我们能够定义映射到请求处理程序的 URL 模式。请求处理程序在 WebForm 中是 .aspx 文件，在 MVC 中是 Controller 以及 Action 方法。<br>例如: <a href="http://domain/foo">http://domain/foo</a> </p><ul><li>在 WebForm 中映射为 foo.aspx 文件</li><li>在 MVC 中映射为 FooController 以及 Index 方法。</li></ul><h2 id="路由处理过程"><a href="#路由处理过程" class="headerlink" title="路由处理过程"></a>路由处理过程</h2><hr><p>Route 定义了 URL 模式，应用所有的配置路由存储在 RouteTable ，然后通过路由引擎确定传入请求的适当处理程序类。</p><p>处理过程:<br>URL Request 经过 Route Engine，判断 URL 是否匹配 RouteTable 中 URL 模式，如果不匹配，直接返回 404 Error，如果匹配，则经过对应的 Controller 和 Action 处理，返回响应。</p><h2 id="配置一个路由"><a href="#配置一个路由" class="headerlink" title="配置一个路由"></a>配置一个路由</h2><hr><p>每个应用至少配置或者说注册一个路由(MVC 默认为我们注册了一个)，我们可以在 App_Start 文件夹下的 RouteConfig 类中注册路由: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RouteConfig</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">RegisterRoutes</span><span class="token punctuation">(</span>RouteCollection routes<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//忽略路由</span>        routes<span class="token punctuation">.</span><span class="token function">IgnoreRoute</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;resource&amp;#125;.axd/&amp;#123;*pathInfo&amp;#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    routes<span class="token punctuation">.</span><span class="token function">MapRoute</span><span class="token punctuation">(</span>            name<span class="token punctuation">:</span> <span class="token string">"Default"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//路由名称</span>            url<span class="token punctuation">:</span> <span class="token string">"&amp;#123;controller&amp;#125;/&amp;#123;action&amp;#125;/&amp;#123;id&amp;#125;"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//URL 模式</span>            defaults<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> controller <span class="token operator">=</span> <span class="token string">"Home"</span><span class="token punctuation">,</span> action <span class="token operator">=</span> <span class="token string">"Index"</span><span class="token punctuation">,</span> id <span class="token operator">=</span> UrlParameter<span class="token punctuation">.</span>Optional <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//默认路由</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="URL-模式"><a href="#URL-模式" class="headerlink" title="URL 模式"></a>URL 模式</h3><p>我们上面一直说 URL 模式，那什么是 URL 模式呢?<br>URL 模式指域名及端口之后的 URL 部分。<br>如果域名之后什么都没有，那么默认路由将会处理请求。</p><h3 id="多路由"><a href="#多路由" class="headerlink" title="多路由"></a>多路由</h3><p>我们可以使用 RouteCollection 的扩展方法 MapRoute()，来配置其他路由。<br>name 和 url 参数是必须的，defaults 参数是可选的。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RouteConfig</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">RegisterRoutes</span><span class="token punctuation">(</span>RouteCollection routes<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        routes<span class="token punctuation">.</span><span class="token function">IgnoreRoute</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;resource&amp;#125;.axd/&amp;#123;*pathInfo&amp;#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        routes<span class="token punctuation">.</span><span class="token function">MapRoute</span><span class="token punctuation">(</span>            name<span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">,</span>            url<span class="token punctuation">:</span> <span class="token string">"foo/&amp;#123;id&amp;#125;"</span><span class="token punctuation">,</span>            defaults<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> controller <span class="token operator">=</span> <span class="token string">"Foo"</span><span class="token punctuation">,</span> action <span class="token operator">=</span> <span class="token string">"Index"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        routes<span class="token punctuation">.</span><span class="token function">MapRoute</span><span class="token punctuation">(</span>            name<span class="token punctuation">:</span> <span class="token string">"Default"</span><span class="token punctuation">,</span>            url<span class="token punctuation">:</span> <span class="token string">"&amp;#123;controller&amp;#125;/&amp;#123;action&amp;#125;/&amp;#123;id&amp;#125;"</span><span class="token punctuation">,</span>            defaults<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> controller <span class="token operator">=</span> <span class="token string">"Home"</span><span class="token punctuation">,</span> action <span class="token operator">=</span> <span class="token string">"Index"</span><span class="token punctuation">,</span> id <span class="token operator">=</span> UrlParameter<span class="token punctuation">.</span>Optional <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码显示: 以 domain/foo 开头的 url 必须经过 FooController 处理，并且这个模式无须指定 action，因为总要使用 index 方法。<br>MVC 会评估每个路由，从第一个配置路由开始，如果传入的 URL 不满足 URL 模式，将会开始评估第二个路由，直到找到匹配路由。</p><p>注意:<br><a href="http://localhost/foo/123">http://localhost/foo/123</a> 和 <a href="http://localhost/foo?Id=123">http://localhost/foo?Id=123</a> 都将匹配 Foo 路由。</p><h2 id="路由注册"><a href="#路由注册" class="headerlink" title="路由注册"></a>路由注册</h2><hr><p>我们在 RouteConfig 配置路由之后，需要在 Global.asax 文件的 Application_Start 方法注册路由: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">Application_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    RouteConfig<span class="token punctuation">.</span><span class="token function">RegisterRoutes</span><span class="token punctuation">(</span>RouteTable<span class="token punctuation">.</span>Routes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇，我们来详细讲讲关于 ASP.Net MVC 中的路由。&lt;/p&gt;
&lt;h2 id=&quot;ASP-Net-MVC-中的路由&quot;&gt;&lt;a href=&quot;#ASP-Net-MVC-中的路由&quot; class=&quot;headerlink&quot; title=&quot;ASP.Net MVC 中的路由&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/ASP.Net%20MVC(%E4%B8%89)/"/>
    <id>https://1ess.github.io/ASP.Net%20MVC(%E4%B8%89)/</id>
    <published>2021-07-14T12:40:59.048Z</published>
    <updated>2021-07-14T12:40:59.048Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇，我们具体说说 Controller、Model 和 View。</p><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><hr><p>在 MVC 中，Controller 是用来处理用户请求的。Controller 是一个类，继承自 System.Web.Mvc.Controller。<br>控制器类中访问修饰符为 public 的方法称为 Action 方法。<br>Controller 和 Action 方法一起，用来处理来自客户端的请求，检索必要的模型数据并返回适当的响应。<br>在 ASP.Net MVC 中，每个控制器类名称必须以 Controller 结尾，此外，每个控制器类必须位于 MVC 文件夹结构的 Controllers 文件夹中。</p><h3 id="Action-方法"><a href="#Action-方法" class="headerlink" title="Action 方法"></a>Action 方法</h3><p>Action 方法的特征: </p><ul><li>Action 方法必须是 public，不能是 private 或 protected</li><li>Action 方法不能 overloaded</li><li>Action 方法不能是 static 方法</li></ul><h3 id="默认-Action-方法"><a href="#默认-Action-方法" class="headerlink" title="默认 Action 方法"></a>默认 Action 方法</h3><p>每个 Controller 都有默认的 Action 方法定义在 RouteConfig 类中。</p><h3 id="ActionResult-类型"><a href="#ActionResult-类型" class="headerlink" title="ActionResult 类型"></a>ActionResult 类型</h3><p>Action 方法一般需要返回 ActionResult 类型的返回值。<br>View() 方法就是定义在基类中 Controller 中，返回 ActionResult 类型。<br>MVC 框架包括各种可以被 Action 方法返回的 result 类型。result 类型表示不同类型的响应，如: HTML，file，string，Json，JavaScript 等。</p><table><thead><tr><th>Result 类型</th><th>描述</th><th>Base Controller 方法</th></tr></thead><tbody><tr><td>ViewResult</td><td>返回 HTML</td><td>View()</td></tr><tr><td>EmptyResult</td><td>什么都不返回</td><td></td></tr><tr><td>ContentResult</td><td>返回字符串</td><td>Content()</td></tr><tr><td>FileContentResult</td><td>返回文件内容</td><td>File()</td></tr><tr><td>JavaScriptResult</td><td>返回 JS</td><td>JavaScript()</td></tr><tr><td>JsonResult</td><td>返回 JSON</td><td>Json()</td></tr><tr><td>RedirectResult</td><td>重定向新的 url</td><td>Redirect()</td></tr><tr><td>RedirectToRouteResult</td><td>重定向其他的 Action</td><td>RedirectToAction()</td></tr><tr><td>HttpUnauthorizedResult</td><td>返回 HTTP 403 status</td><td></td></tr></tbody></table><p>ActionResult 类是所有上述结果类的基类。</p><h3 id="Action-Selectors"><a href="#Action-Selectors" class="headerlink" title="Action Selectors"></a>Action Selectors</h3><p>Action Selectors 是应用于 Action 方法的 attribute。<br>Action Selectors 有助于路由引擎选择正确的操作方法来处理特定请求。<br>MVC 5 包括如下 action selector attributes:</p><ul><li>ActionName</li><li>NonAction</li><li>ActionVerbs</li></ul><h4 id="ActionName"><a href="#ActionName" class="headerlink" title="ActionName"></a>ActionName</h4><p>ActionName 允许我们指定与 Action 的名称不同的操作名称。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FooController</span> <span class="token punctuation">:</span> Controller<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token function">ActionName</span><span class="token punctuation">(</span><span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">public</span> ActionResult <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的例子，我们应发送 <a href="http://localhost/foo/bar/1">http://localhost/foo/bar/1</a> 而不是 <a href="http://localhost/foo/foo/1%E3%80%82">http://localhost/foo/foo/1。</a></p><h4 id="NonAction"><a href="#NonAction" class="headerlink" title="NonAction"></a>NonAction</h4><p>NonAction selector attribute 指示 Controller 的公共方法不是 Action 方法。<br>如果需要控制器中的公共方法但不希望将其视为 Action 方法，就需要使用 NonAction attribute。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FooController</span> <span class="token punctuation">:</span> Controller<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token punctuation">[</span>NonAction<span class="token punctuation">]</span>    <span class="token keyword">public</span> Bar <span class="token function">GetBar</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> barList<span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span>s <span class="token operator">=</span><span class="token operator">></span> s<span class="token punctuation">.</span>Id <span class="token operator">==</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ActionVerbs-行为动词"><a href="#ActionVerbs-行为动词" class="headerlink" title="ActionVerbs(行为动词)"></a>ActionVerbs(行为动词)</h4><p>控制 Action 方法所使用的 HTTP 方法，需要使用 ActionVerbs。<br>如: 我们可以使用相同的 ActionName 定义两个不同的操作方法，一个操作方法响应 HTTP Get 请求，另一个操作方法响应 HTTP Post 请求。</p><p>ActionVerbs 包括:<br>HttpGet，HttpPost，HttpPut，HttpDelete，HttpPatch，HttpOptions，HttpHead<br>我们也可以使用 AcceptVerbs attribute 接受多个 HttpVerbs，如: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token function">AcceptVerbs</span><span class="token punctuation">(</span>HttpVerbs<span class="token punctuation">.</span>Post <span class="token operator">|</span> HttpVerbs<span class="token punctuation">.</span>Get<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> ActionResult <span class="token function">GetAndPostMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">RedirectToAction</span><span class="token punctuation">(</span><span class="token string">"Index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h2><hr><p>Model 表示 MVC 架构中的域特定数据和业务逻辑。<br>模型类在公共属性中保存数据。所有 Model 类都保存在 Models 文件夹中。</p><h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><hr><p>View 是一个用户界面。 View 将模型中的数据显示给用户，并使他们能够修改数据。<br>视图存储在 Views文件夹中。</p><p>单个控制器类的不同 Action 方法可以呈现不同的视图，因此 Views 文件夹包含每个控制器的单独文件夹，其名称与控制器相同。View 文件名与 Action 方法同名。</p><h3 id="Razor-View-Engine"><a href="#Razor-View-Engine" class="headerlink" title="Razor View Engine"></a>Razor View Engine</h3><p>Microsoft 在 MVC 3 中推出了 Razor 视图引擎，我们可以在 Razor 视图混合写服务端代码和 html 标签 。<br>Razor 使用 @ 字符来编写服务端代码， Razor 视图以 .cshtml 作为后缀。</p><p>之后我们会详细介绍 Razor 语法，这里我们先看看其他重要的概念。</p><h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><p>最佳实践是使得视图名与 Action 方法同名，使得当我们返回 View 时无需传递路径作为参数。<br>ASP.NET MVC 中的每个视图都派生自 System.Web.Mvc 命名空间中的 WebViewPage 类。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇，我们具体说说 Controller、Model 和 View。&lt;/p&gt;
&lt;h2 id=&quot;Controller&quot;&gt;&lt;a href=&quot;#Controller&quot; class=&quot;headerlink&quot; title=&quot;Controller&quot;&gt;&lt;/a&gt;Controller&lt;/h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/ASP.Net%20MVC(%E5%9B%9B)/"/>
    <id>https://1ess.github.io/ASP.Net%20MVC(%E5%9B%9B)/</id>
    <published>2021-07-14T12:40:59.048Z</published>
    <updated>2021-07-14T12:40:59.048Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇，我们来详细说说 ASP.Net MVC 中特别重要的 Model Binding。</p><p>传统的 ASP.Net MVC 中，如果我们想在 Action 方法中获取请求参数，我们使用 Request.QueryString 和 Request 对象。非常笨重!</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//Get /Foo/Bar?id=1</span><span class="token keyword">public</span> ActionResult <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> id <span class="token operator">=</span> Request<span class="token punctuation">.</span>QueryString<span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span>    <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Post /Foo/Bar</span><span class="token punctuation">[</span>HttpPost<span class="token punctuation">]</span><span class="token keyword">public</span> ActionResult <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> id <span class="token operator">=</span> Request<span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span>    <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过模型绑定，MVC 将 http 请求值(从查询字符串或表单集合)转换为 Action 方法的参数。这些参数可以是原始类型或复杂类型。</p><h3 id="基本类型的绑定"><a href="#基本类型的绑定" class="headerlink" title="基本类型的绑定"></a>基本类型的绑定</h3><p>Get 请求的将数据嵌入 QueryString，MVC 自动将 QueryString 转换为 Action 方法参数。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// 以下 Get 请求中的 QueryString  id 将自动映射到 Bar 方法的 id 参数</span><span class="token comment" spellcheck="true">// /Foo/Bar?id=1</span><span class="token comment" spellcheck="true">// /Foo/Bar/1</span><span class="token keyword">public</span> ActionResult <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们还可以在 Action 方法中使用不同数据类型的多个参数。QueryString 的值将根据匹配名称转换为参数。<br>注意: 绑定是不区分大小写的。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// /Foo/Bar?id=1&amp;name=1ess 或者(/Foo/Bar?Id=1&amp;Name=1ess)</span><span class="token keyword">public</span> ActionResult <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">string</span> name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复杂类型的绑定"><a href="#复杂类型的绑定" class="headerlink" title="复杂类型的绑定"></a>复杂类型的绑定</h3><p>MVC 中的模型绑定自动将 Post 请求的表单字段数据转换为 Action 方法的复杂类型参数的属性。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Guid id <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">string</span> name <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">[</span>HttpPost<span class="token punctuation">]</span><span class="token keyword">public</span> ActionResult <span class="token function">Bar</span><span class="token punctuation">(</span>Person person<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们还可以使用 Bind attribute 指定模型在绑定中应包含或排除的确切属性。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span>HttpPost<span class="token punctuation">]</span><span class="token keyword">public</span> ActionResult <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">Bind</span><span class="token punctuation">(</span>Include <span class="token operator">=</span> <span class="token string">"id, name"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> Person person<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">[</span>HttpPost<span class="token punctuation">]</span><span class="token keyword">public</span> ActionResult <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">Bind</span><span class="token punctuation">(</span>Exclude<span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> Person person<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Bind attribute 可以提高性能。<br>.Net Framework MVC 的模型绑定只要记住如下原则: </p><ul><li>Get 请求总在 Query 绑定</li><li>Post 请求总在 Body 绑定</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇，我们来详细说说 ASP.Net MVC 中特别重要的 Model Binding。&lt;/p&gt;
&lt;p&gt;传统的 ASP.Net MVC 中，如果我们想在 Action 方法中获取请求参数，我们使用 Request.QueryString 和 Request 对象。非常笨重</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/ASP.Net%20MVC(%E4%BA%94)/"/>
    <id>https://1ess.github.io/ASP.Net%20MVC(%E4%BA%94)/</id>
    <published>2021-07-14T12:40:59.048Z</published>
    <updated>2021-07-14T12:40:59.048Z</updated>
    
    <content type="html"><![CDATA[<p>本篇，我们再来详细说说 ASP.Net MVC 中的 Razor 语法。</p><h3 id="什么是-Razor"><a href="#什么是-Razor" class="headerlink" title="什么是 Razor"></a>什么是 Razor</h3><p>Razor 是 ASP.Net MVC 中支持的视图引擎，它允许我们混写服务端代码如 C#、VB 等和 HTML 标签，如果使用 C#，那么文件以 .cshtml 作为后缀。</p><p>下面我们具体来讲解 C# Razor 语法。</p><h3 id="单行表达式"><a href="#单行表达式" class="headerlink" title="单行表达式"></a>单行表达式</h3><p>以 @ 符号开始，在 .cshtml 文件中开始写服务端代码。如下: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token operator">&lt;</span>h2<span class="token operator">></span>Razor Syntax<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span>h2<span class="token operator">></span>@DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToShortDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意: 在单行表达式在表达式的末尾不需要分号。</p><h3 id="多行语句代码块"><a href="#多行语句代码块" class="headerlink" title="多行语句代码块"></a>多行语句代码块</h3><p>如果要写多行服务端代码，必须写在 @{…} 中，服务端代码每行的末尾以分号结束。在代码块中声明的变量，之后可以用 @variable 来使用。</p><pre class="line-numbers language-csharp"><code class="language-csharp">@<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> date <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToShortDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token string">"Hello Razor!"</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>h1<span class="token operator">></span>@msg<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span>h2<span class="token operator">></span>@date<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码块中展示文本"><a href="#代码块中展示文本" class="headerlink" title="代码块中展示文本"></a>代码块中展示文本</h3><p>如果想在 @{…} 中展示文本，需要使用 @: 或者 &lt;text&gt;&lt;/text&gt; 标记: </p><pre class="line-numbers language-csharp"><code class="language-csharp">@<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> date <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToShortDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token string">"Hello Razor!"</span><span class="token punctuation">;</span>    @<span class="token punctuation">:</span> Today <span class="token keyword">is</span> @date<span class="token punctuation">.</span> <span class="token operator">&lt;</span>br<span class="token operator">></span>    @msg<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>@<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> date <span class="token operator">=</span> DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToShortDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token string">"Hello Razor!"</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span>text<span class="token operator">></span>Today <span class="token keyword">is</span><span class="token operator">&lt;</span><span class="token operator">/</span>text<span class="token operator">></span> @date<span class="token punctuation">.</span><span class="token operator">&lt;</span>br<span class="token operator">></span>    @msg<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><p>在 Razor 中可以使用条件语句 if-else，但是必须以 @ 开头，语句内容必须包裹在代码块{…}中: </p><pre class="line-numbers language-csharp"><code class="language-csharp">@<span class="token keyword">if</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span><span class="token function">IsLeapYear</span><span class="token punctuation">(</span>DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>Year<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    @DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>Year @<span class="token punctuation">:</span> <span class="token keyword">is</span> leap year<span class="token punctuation">.</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    @DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span>Year @<span class="token punctuation">:</span> <span class="token keyword">is</span> not leap year<span class="token punctuation">.</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="for-循环语句"><a href="#for-循环语句" class="headerlink" title="for 循环语句"></a>for 循环语句</h3><pre class="line-numbers language-csharp"><code class="language-csharp">@<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    @i<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>我们可以使用 @model 在视图中使用模型对象。</p><pre class="line-numbers language-csharp"><code class="language-csharp">@model Student<span class="token operator">&lt;</span>h2<span class="token operator">></span>@Model<span class="token punctuation">.</span>Age<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本篇，我们再来详细说说 ASP.Net MVC 中的 Razor 语法。&lt;/p&gt;
&lt;h3 id=&quot;什么是-Razor&quot;&gt;&lt;a href=&quot;#什么是-Razor&quot; class=&quot;headerlink&quot; title=&quot;什么是 Razor&quot;&gt;&lt;/a&gt;什么是 Razor&lt;/h3&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/ASP.Net%20MVC(%E5%85%AD)/"/>
    <id>https://1ess.github.io/ASP.Net%20MVC(%E5%85%AD)/</id>
    <published>2021-07-14T12:40:59.048Z</published>
    <updated>2021-07-14T12:40:59.048Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇，我们详细讲讲 .Net MVC 中的 HTML Helper。</p><p>HtmlHelper 类使用模型类对象生成 html 元素。它将模型对象绑定到 html 元素，以将模型属性的值显示为 html 元素，并在提交 Web 表单时将 html 元素的值分配给模型属性。<br>我们最好在 Razor 视图中使用 HtmlHelper 类而不是手动编写 html 标签。</p><p>我们使用 @Html 来表示一个 HtmlHelper 对象。</p><p>HtmlHelper 类生成 html 元素。如: </p><pre class="line-numbers language-csharp"><code class="language-csharp">@Html<span class="token punctuation">.</span><span class="token function">ActionLink</span><span class="token punctuation">(</span><span class="token string">"Create New"</span><span class="token punctuation">,</span> <span class="token string">"Create"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将生成标记: </p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/Foo/Create<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Create New<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="HtmlHelper-扩展方法"><a href="#HtmlHelper-扩展方法" class="headerlink" title="HtmlHelper 扩展方法"></a>HtmlHelper 扩展方法</h2><hr><p>调用 HtmlHelper 扩展方法和使用 html 标记之间的区别在于: HtmlHelper 扩展方法可以使绑定模型数据变得容易。</p><h3 id="TextBox"><a href="#TextBox" class="headerlink" title="TextBox"></a>TextBox</h3><p>我们有两个生成 textbox(&lt;input type=”text” /&gt;)的方法: </p><ul><li>TextBox()，松散类型</li><li>TextBoxFor()，强类型</li></ul><h4 id="TextBox-1"><a href="#TextBox-1" class="headerlink" title="TextBox()"></a>TextBox()</h4><p>方法签名: </p><pre class="line-numbers language-csharp"><code class="language-csharp">MvcHtmlString Html<span class="token punctuation">.</span><span class="token function">TextBox</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">,</span> <span class="token keyword">string</span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token keyword">object</span> htmlAttributes<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意: TextBox() 方法有很多重载，并且 TextBox() 方法是松散类型，因为 name 属性是字符串类型。<br>使用: </p><pre class="line-numbers language-csharp"><code class="language-csharp">@model Student@Html<span class="token punctuation">.</span><span class="token function">TextBox</span><span class="token punctuation">(</span><span class="token string">"StudentName"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> @<span class="token keyword">class</span> <span class="token operator">=</span> <span class="token string">"form-control"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成的 html 元素如下: </p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span>         <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentName<span class="token punctuation">"</span></span>         <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentName<span class="token punctuation">"</span></span>         <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>         <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意: 第一个参数是字符串，它将被设置为 input 元素的 name 和 id 属性，第二个参数是要在文本框中显示的值，第三个参数是 HtmlAttributes 参数，属性名称将是以 @ 符号开头的属性。</p><h4 id="TextBoxFor"><a href="#TextBoxFor" class="headerlink" title="TextBoxFor()"></a>TextBoxFor()</h4><p>方法签名: </p><pre class="line-numbers language-csharp"><code class="language-csharp">MvcHtmlString <span class="token function">TextBoxFor</span><span class="token punctuation">(</span>Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>TModel<span class="token punctuation">,</span> TValue<span class="token operator">></span><span class="token operator">></span> expression<span class="token punctuation">,</span> <span class="token keyword">object</span> htmlAttributes<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用: </p><pre class="line-numbers language-csharp"><code class="language-csharp">@model Student@Html<span class="token punctuation">.</span><span class="token function">TextBoxFor</span><span class="token punctuation">(</span>m <span class="token operator">=</span><span class="token operator">></span> m<span class="token punctuation">.</span>StudentName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> @<span class="token keyword">class</span> <span class="token operator">=</span> <span class="token string">"form-control"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成的 html 元素如下: </p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span>         <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentName<span class="token punctuation">"</span></span>         <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentName<span class="token punctuation">"</span></span>         <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>         <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1ess<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="TextArea"><a href="#TextArea" class="headerlink" title="TextArea"></a>TextArea</h3><p>TextArea() 方法和 TextAreaFor() 方法与 TextBox() 方法以及 TextBoxFor() 方法类似，我们就不多说了。</p><h3 id="CheckBox"><a href="#CheckBox" class="headerlink" title="CheckBox"></a>CheckBox</h3><p>我们有两个生成 checkbox(&lt;input type=”checkbox” /&gt;)的方法: </p><ul><li>CheckBox()，松散类型</li><li>CheckBoxFor()，强类型</li></ul><h4 id="CheckBox-1"><a href="#CheckBox-1" class="headerlink" title="CheckBox()"></a>CheckBox()</h4><p>方法签名: </p><pre class="line-numbers language-csharp"><code class="language-csharp">MvcHtmlString <span class="token function">CheckBox</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">,</span> <span class="token keyword">bool</span> isChecked<span class="token punctuation">,</span> <span class="token keyword">object</span> htmlAttributes<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用: </p><pre class="line-numbers language-csharp"><code class="language-csharp">@Html<span class="token punctuation">.</span><span class="token function">CheckBox</span><span class="token punctuation">(</span><span class="token string">"isNewlyEnrolled"</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成的 html 元素如下: </p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span>         <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isNewlyEnrolled<span class="token punctuation">"</span></span>         <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isNewlyEnrolled<span class="token punctuation">"</span></span>         <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span>         <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="CheckBoxFor"><a href="#CheckBoxFor" class="headerlink" title="CheckBoxFor()"></a>CheckBoxFor()</h4><p>方法签名: </p><pre class="line-numbers language-csharp"><code class="language-csharp">MvcHtmlString <span class="token function">CheckBoxFor</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>TModel<span class="token punctuation">,</span>TValue<span class="token operator">></span><span class="token operator">></span> expression<span class="token punctuation">,</span> <span class="token keyword">object</span> htmlAttributes<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用: </p><pre class="line-numbers language-csharp"><code class="language-csharp">@model Student@Html<span class="token punctuation">.</span><span class="token function">CheckBoxFor</span><span class="token punctuation">(</span>m <span class="token operator">=</span><span class="token operator">></span> m<span class="token punctuation">.</span>isNewlyEnrolled<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成的 html 元素如下: </p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">data-val</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>         <span class="token attr-name">data-val-required</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>The isNewlyEnrolled field is required.<span class="token punctuation">"</span></span>         <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isNewlyEnrolled<span class="token punctuation">"</span></span>         <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isNewlyEnrolled<span class="token punctuation">"</span></span>         <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span>         <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isNewlyEnrolled<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RadioButton"><a href="#RadioButton" class="headerlink" title="RadioButton"></a>RadioButton</h3><p>我们有两个生成 radio(&lt;input type=”radio” /&gt;)的方法: </p><ul><li>RadioButton()，松散类型</li><li>RadioButtonFor()，强类型</li></ul><h4 id="RadioButton-1"><a href="#RadioButton-1" class="headerlink" title="RadioButton()"></a>RadioButton()</h4><p>方法签名: </p><pre class="line-numbers language-csharp"><code class="language-csharp">MvcHtmlString <span class="token function">RadioButton</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">,</span> <span class="token keyword">object</span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token keyword">bool</span> isChecked<span class="token punctuation">,</span> <span class="token keyword">object</span> htmlAttributes<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用: </p><pre class="line-numbers language-csharp"><code class="language-csharp">Male<span class="token punctuation">:</span>   @Html<span class="token punctuation">.</span><span class="token function">RadioButton</span><span class="token punctuation">(</span><span class="token string">"Gender"</span><span class="token punctuation">,</span> <span class="token string">"Male"</span><span class="token punctuation">)</span>  Female<span class="token punctuation">:</span> @Html<span class="token punctuation">.</span><span class="token function">RadioButton</span><span class="token punctuation">(</span><span class="token string">"Gender"</span><span class="token punctuation">,</span> <span class="token string">"Female"</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成的 html 元素如下: </p><pre class="line-numbers language-html"><code class="language-html">Male: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span>         <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Gender<span class="token punctuation">"</span></span>         <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Gender<span class="token punctuation">"</span></span>         <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span>         <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Male<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>Female: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Gender<span class="token punctuation">"</span></span>         <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Gender<span class="token punctuation">"</span></span>         <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span>         <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Female<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="RadioButtonFor"><a href="#RadioButtonFor" class="headerlink" title="RadioButtonFor()"></a>RadioButtonFor()</h4><p>方法签名: </p><pre class="line-numbers language-csharp"><code class="language-csharp">MvcHtmlString <span class="token function">RadioButtonFor</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span>TModel<span class="token punctuation">,</span> TValue<span class="token operator">></span><span class="token operator">></span> expression<span class="token punctuation">,</span> <span class="token keyword">object</span> <span class="token keyword">value</span><span class="token punctuation">,</span> <span class="token keyword">object</span> htmlAttributes<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用: </p><pre class="line-numbers language-csharp"><code class="language-csharp">@model Student@Html<span class="token punctuation">.</span><span class="token function">RadioButtonFor</span><span class="token punctuation">(</span>m <span class="token operator">=</span><span class="token operator">></span> m<span class="token punctuation">.</span>Gender<span class="token punctuation">,</span> <span class="token string">"Male"</span><span class="token punctuation">)</span>@Html<span class="token punctuation">.</span><span class="token function">RadioButtonFor</span><span class="token punctuation">(</span>m <span class="token operator">=</span><span class="token operator">></span> m<span class="token punctuation">.</span>Gender<span class="token punctuation">,</span> <span class="token string">"Female"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>生成的 html 元素如下: </p><pre class="line-numbers language-html"><code class="language-html">Male: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span>         <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Gender<span class="token punctuation">"</span></span>         <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Gender<span class="token punctuation">"</span></span>         <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span>         <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Male<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>Female: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Gender<span class="token punctuation">"</span></span>         <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Gender<span class="token punctuation">"</span></span>         <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span>         <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Female<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DropDownList"><a href="#DropDownList" class="headerlink" title="DropDownList"></a>DropDownList</h3><p>我们有两个生成 select 元素的方法: </p><ul><li>DropDownList()，松散类型</li><li>DropDownListFor()，强类型</li></ul><h4 id="DropDownList-1"><a href="#DropDownList-1" class="headerlink" title="DropDownList()"></a>DropDownList()</h4><p>方法签名: </p><pre class="line-numbers language-csharp"><code class="language-csharp">MvcHtmlString Html<span class="token punctuation">.</span><span class="token function">DropDownList</span><span class="token punctuation">(</span><span class="token keyword">string</span> name<span class="token punctuation">,</span> IEnumerable<span class="token operator">&lt;</span>SelectLestItem<span class="token operator">></span> selectList<span class="token punctuation">,</span> <span class="token keyword">string</span> optionLabel<span class="token punctuation">,</span> <span class="token keyword">object</span> htmlAttributes<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用: </p><pre class="line-numbers language-csharp"><code class="language-csharp">@<span class="token keyword">using</span> MyMVCApp<span class="token punctuation">.</span>Models@model Student@Html<span class="token punctuation">.</span><span class="token function">DropDownList</span><span class="token punctuation">(</span><span class="token string">"StudentGender"</span><span class="token punctuation">,</span>                     <span class="token keyword">new</span> <span class="token class-name">SelectList</span><span class="token punctuation">(</span>Enum<span class="token punctuation">.</span><span class="token function">GetValues</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>Gender<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token string">"Select Gender"</span><span class="token punctuation">,</span>                    <span class="token keyword">new</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> @<span class="token keyword">class</span> <span class="token operator">=</span> <span class="token string">"form-control"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成的 html 元素如下: </p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentGender<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentGender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Select Gender<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Male<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Female<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DropDownListFor"><a href="#DropDownListFor" class="headerlink" title="DropDownListFor()"></a>DropDownListFor()</h4><p>方法签名: </p><pre class="line-numbers language-csharp"><code class="language-csharp">MvcHtmlString Html<span class="token punctuation">.</span><span class="token function">DropDownListFor</span><span class="token punctuation">(</span>Expression<span class="token operator">&lt;</span>Func<span class="token operator">&lt;</span><span class="token keyword">dynamic</span><span class="token punctuation">,</span> TProperty<span class="token operator">></span><span class="token operator">></span> expression<span class="token punctuation">,</span> IEnumerable<span class="token operator">&lt;</span>SelectLestItem<span class="token operator">></span> selectList<span class="token punctuation">,</span> <span class="token keyword">string</span> optionLabel<span class="token punctuation">,</span> <span class="token keyword">object</span> htmlAttributes<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用: </p><pre class="line-numbers language-csharp"><code class="language-csharp">@<span class="token keyword">using</span> MyMVCApp<span class="token punctuation">.</span>Models@model Student@Html<span class="token punctuation">.</span><span class="token function">DropDownListFor</span><span class="token punctuation">(</span>m <span class="token operator">=</span><span class="token operator">></span> m<span class="token punctuation">.</span>StudentGender<span class="token punctuation">,</span>                     <span class="token keyword">new</span> <span class="token class-name">SelectList</span><span class="token punctuation">(</span>Enum<span class="token punctuation">.</span><span class="token function">GetValues</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>Gender<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                     <span class="token string">"Select Gender"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成的 html 元素如下: </p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentGender<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentGender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Select Gender<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Male<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Female<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>还有一些扩展方法如: </p><ul><li>Password</li><li>Display</li><li>Label</li><li>Editor</li><li>Hidden</li></ul><p>等，我们就先不介绍了，等用到的时候再查文档即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇，我们详细讲讲 .Net MVC 中的 HTML Helper。&lt;/p&gt;
&lt;p&gt;HtmlHelper 类使用模型类对象生成 html 元素。它将模型对象绑定到 html 元素，以将模型属性的值显示为 html 元素，并在提交 Web 表单时将 html 元素的值分配给</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/ASP.Net%20MVC(%E4%B8%83)/"/>
    <id>https://1ess.github.io/ASP.Net%20MVC(%E4%B8%83)/</id>
    <published>2021-07-14T12:40:59.048Z</published>
    <updated>2021-07-14T12:40:59.048Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇，我们讲讲数据验证、布局试图以及 Controller 向 View 传递少量数据的方式。</p><h2 id="数据注释-DataAnnotations"><a href="#数据注释-DataAnnotations" class="headerlink" title="数据注释(DataAnnotations)"></a>数据注释(DataAnnotations)</h2><hr><p>ASP.Net MVC 使用 DataAnnotations attribute 实现数据验证。<br>DataAnnotations 为不同的验证规则内建了许多验证特性，可以应用于模型类的属性。ASP.NET MVC 将自动强制执行这些验证规则并在视图中显示验证消息。</p><p>DataAnnotations attribute 位于 System.ComponentModel.DataAnnotations 命名空间。<br>下面列出 DataAnnotations attribute: </p><table><thead><tr><th>Attribute</th><th>描述</th></tr></thead><tbody><tr><td>Required</td><td>表示该属性是必填字段</td></tr><tr><td>StringLength</td><td>定义字符串字段的最大长度</td></tr><tr><td>Range</td><td>定义数字字段的最大值和最小值</td></tr><tr><td>RegularExpression</td><td>指定字段值必须与指定的正则表达式匹配</td></tr><tr><td>CustomValidation</td><td>指定的自定义验证方法以验证字段</td></tr><tr><td>EmailAddress</td><td>使用电子邮件地址格式验证</td></tr><tr><td>FileExtension</td><td>使用文件扩展名进行验证</td></tr><tr><td>MaxLength</td><td>指定字符串字段的最大长度</td></tr><tr><td>MinLength</td><td>指定字符串字段的最小长度</td></tr><tr><td>Phone</td><td>指定该字段是使用电话号码的正则表达式的电话号码</td></tr></tbody></table><p>我们在 Controller 的 Action 方法中使用 ModelState.IsValid 属性，来判断模型是否通过验证。</p><p>它为每个字段调用 HtmlHelper 的扩展方法 ValidationMessageFor，并在顶部调用 ValidationSummary 方法。<br>ValidationMessageFor 负责显示指定字段的错误消息。ValidationSummary 一次显示所有错误消息的列表。</p><h2 id="Layout-View"><a href="#Layout-View" class="headerlink" title="Layout View"></a>Layout View</h2><hr><p>一个应用程序可能会有一些公共 UI 部分，如 logo、导航部分、footer 部分等。ASP.NET MVC 引入了一个 Layout 视图，使得我们不必在每个页面中编写相同的代码。</p><p>Razor 的布局视图和普通视图一样，以 .cshtml 作为后缀，存储在 View/Shared 文件夹中。脚手架会自动创建一个 _Layout.cshtml 文件。<br>布局视图中会调用 RenderBody 方法和 RenderSection 方法。RenderBody 就像其他视图的占位符一样，将使用该布局文件的视图注入。</p><h3 id="使用布局视图"><a href="#使用布局视图" class="headerlink" title="使用布局视图"></a>使用布局视图</h3><p>默认情况下，Views 文件夹中有一个 _ViewStart.cshtml。它使用 Layout 属性为文件夹及其子文件夹中的所有视图设置默认布局页面。您可以将任何布局页面的有效路径分配给布局属性。<br>我们也可以在单个视图中设置 Layout 属性，覆盖 _ViewStart.cshtml 中的布局视图。可以设置为 null，不使用布局视图。</p><h3 id="渲染方法"><a href="#渲染方法" class="headerlink" title="渲染方法"></a>渲染方法</h3><p>ASP.NET MVC 布局视图使用以下方法呈现子视图: </p><ul><li>RenderBody，呈现子视图中不在命名部分内的部分。布局视图必须包含 RenderBody 方法。</li><li>RenderSection，呈现命名部分的内容并指定该部分是否是必需的。RenderSection 方法在布局视图中是可选的。</li></ul><p>RenderSection 方法指定一个部分的名称，在子视图中使用 @section 定义命名部分，在运行时，子视图将在调用 RenderSection 方法的适当位置呈现。<br>索引视图的其余部分(不在任何已命名的部分中)将呈现调用 RenderBody 方法的位置。</p><h2 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h2><hr><p>模型对象用于在 Razor 视图中发送数据。但是，在某些情况下，您可能希望向视图发送少量临时数据。有三种方法: </p><ul><li>ViewBag</li><li>ViewData</li><li>TempData</li></ul><h3 id="ViewBag"><a href="#ViewBag" class="headerlink" title="ViewBag"></a>ViewBag</h3><p>viewBag 是 ControllerBase 类的动态类型属性，ControllerBase 是之前我们说的 Controller 类型的基类。</p><p>使用点语法将属性附加到 ViewBag，并在控制器中为其指定其值，可以在视图中使用 @ViewBag. 方法获取该属性。<br>注意: ViewBag 仅将数据从控制器传输到视图，反之不行。如果发生重定向，ViewBag 值将为 null。<br>ViewBag 是 ViewData 的包装器。</p><h3 id="ViewData"><a href="#ViewData" class="headerlink" title="ViewData"></a>ViewData</h3><p>ViewData 类似于 ViewBag。它在将数据从 Controller 传输到 View 时非常有用。<br>ViewData 是一个字典，可以包含键值对，其中每个键必须是字符串。</p><p>ViewData 仅将数据从控制器传输到视图。它仅在当前请求期间有效。</p><p>注意: 我们必须将 ViewData 值强制转换为适当的数据类型。<br>ViewData 和 ViewBag 都在内部使用相同的字典。因此，您不能将 ViewData Key 与 ViewBag 的属性名称匹配，否则会抛出运行时异常。</p><h3 id="TempData"><a href="#TempData" class="headerlink" title="TempData"></a>TempData</h3><p>TempData 可用于存储可在后续请求中使用的临时数据。在完成后续请求后，TempData 将被清除。</p><p>当您想要将非敏感数据从一个 Action 方法传输到相同或不同控制器的另一个 Action 方法以及重定向时，TempData 非常有用。</p><p>假如我们在第一个请求中的 TempData 中添加了测试数据，在第二个后续请求中，我们从 TempData 访问了我们存储在第一个请求中的测试数据。但是，您无法在第三个请求中获取相同的数据，因为 TempData 将在第二个请求后被清除。</p><p>调用 TempData.Keep() 可以在第三个连续请求中保留 TempData 值。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇，我们讲讲数据验证、布局试图以及 Controller 向 View 传递少量数据的方式。&lt;/p&gt;
&lt;h2 id=&quot;数据注释-DataAnnotations&quot;&gt;&lt;a href=&quot;#数据注释-DataAnnotations&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/ASP.Net%20MVC(%E5%85%AB)/"/>
    <id>https://1ess.github.io/ASP.Net%20MVC(%E5%85%AB)/</id>
    <published>2021-07-14T12:40:59.048Z</published>
    <updated>2021-07-14T12:40:59.048Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇，我们详细讲讲 .Net MVC 中的 Filter。</p><p>默认情况，在 ASP.NET MVC 中，用户请求被路由到适当的控制器和 Action 方法。<br>但是，在某些情况下，您可能希望在执行 Action 方法之前或之后执行某些逻辑。ASP.NET MVC 为此提供了过滤器(filters)。</p><p>ASP.NET MVC Filter 是一个自定义类，您可以在其中编写自定义逻辑，以便在执行 Action 方法之前或之后执行。<br>过滤器(filters)可以以声明或编程方式应用于 Action 方法或控制器。<br>声明方式是指通过提供一个 Filter attribute 给 Action 方法或控制器。<br>编程方式是指通过实现对应的接口。</p><p>MVC 提供不同类型的过滤器: </p><table><thead><tr><th>过滤器类型</th><th>描述</th><th>内建过滤器</th><th>Interface</th></tr></thead><tbody><tr><td>Authorization filters</td><td>在执行 Action 方法之前执行身份验证和授权。</td><td>[Authorize], [RequireHttps]</td><td>IAuthorizationFilter</td></tr><tr><td>Action  filters</td><td>在执行 Action 方法之前执行某些操作。</td><td></td><td>IActionFilter</td></tr><tr><td>Result  filters</td><td>在执行 view result 之前执行身份验证和授权。</td><td>[OutputCache]</td><td>IResultFilter</td></tr><tr><td>Exception  filters</td><td>如果在执行 ASP.NET MVC 管道期间抛出未处理的异常，则执行某些操作。</td><td>[HandleError]</td><td>IExceptionFilter</td></tr></tbody></table><p>如: 当发生未处理的异常时，此内置 HandleErrorAttribute 类在默认情况下呈现 Shared 文件夹中包含的 Error.cshtml。<br>注意: 请确保在 web.config 的 System.web 部分中启用了 CustomError 模式，以便 HandleErrorAttribute 正常工作。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>customErrors</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>On<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，未处理的异常是指 try-catch 块未处理的异常。</p><h2 id="注册-Filters"><a href="#注册-Filters" class="headerlink" title="注册 Filters"></a>注册 Filters</h2><hr><p>Filters 可以被应用于三个等级: </p><ul><li>Global 等级</li><li>Controller 等级</li><li>Action 方法等级</li></ul><h3 id="Global-等级"><a href="#Global-等级" class="headerlink" title="Global 等级"></a>Global 等级</h3><p>在 Global.asax.cs 文件的 Applicaton_Start 方法中，调用 FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters); 来注册一个全局等级的过滤器。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">Application_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    FilterConfig<span class="token punctuation">.</span><span class="token function">RegisterGlobalFilters</span><span class="token punctuation">(</span>GlobalFilters<span class="token punctuation">.</span>Filters<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>默认情况下，在使用 Visual Studio 创建的每个 MVC 应用程序中，[HandleError]过滤器在 MVC 应用程序中全局应用。</p><h3 id="Controller-等级"><a href="#Controller-等级" class="headerlink" title="Controller 等级"></a>Controller 等级</h3><p>过滤器也可以应用于控制器类。因此，如果将过滤器应用于控制器类，则过滤器将适用于 Controller 类的所有 Action 方法。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span>HandleError<span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeController</span> <span class="token punctuation">:</span> Controller<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ActionResult <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Action-方法等级"><a href="#Action-方法等级" class="headerlink" title="Action 方法等级"></a>Action 方法等级</h3><p>也可以将过滤器应用于单个 Action 方法。因此，过滤器仅适用于该特定的 Action 方法。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeController</span> <span class="token punctuation">:</span> Controller<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>HandleError<span class="token punctuation">]</span>    <span class="token keyword">public</span> ActionResult <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Filter-顺序"><a href="#Filter-顺序" class="headerlink" title="Filter 顺序"></a>Filter 顺序</h2><hr><p>如上所述，MVC 包括不同类型的过滤器，并且多个过滤器可以应用于单个控制器类或动作方法。因此，过滤器按以下顺序运行: </p><ul><li>Authorization filters</li><li>Action filters</li><li>Result filters</li><li>Exception filters</li></ul><h2 id="Action-Filters"><a href="#Action-Filters" class="headerlink" title="Action Filters"></a>Action Filters</h2><hr><h3 id="OutputCache-attribute"><a href="#OutputCache-attribute" class="headerlink" title="OutputCache attribute"></a>OutputCache attribute</h3><p>OutputCache 是​​一个内置的动作过滤器 attribute，可以应用于我们想要缓存输出的 Action 方法。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token function">OutputCache</span><span class="token punctuation">(</span>Duration<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> ActionResult <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义-Action-Filter"><a href="#自定义-Action-Filter" class="headerlink" title="自定义 Action Filter"></a>自定义 Action Filter</h3><p>您可以通过两种方式创建自定义 Action 过滤器: </p><ul><li>实现 IActionFilter 接口，以及使用 FilterAttribute 类</li><li>继承 ActionFilterAttribute 抽象类</li></ul><p>IActionFilter 接口要实现下面方法: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">void</span> <span class="token function">OnActionExecuted</span><span class="token punctuation">(</span>ActionExecutedContext filterContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OnActionExecuting</span><span class="token punctuation">(</span>ActionExecutingContext filterContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ActionFilterAttribute 抽象类则要 override 如下方法: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">void</span> <span class="token function">OnActionExecuted</span><span class="token punctuation">(</span>ActionExecutedContext filterContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OnActionExecuting</span><span class="token punctuation">(</span>ActionExecutingContext filterContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OnResultExecuted</span><span class="token punctuation">(</span>ResultExecutedContext filterContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">OnResultExecuting</span><span class="token punctuation">(</span>ResultExecutingContext filterContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Action 过滤器通常用于日志记录，缓存，授权等。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAttribute</span> <span class="token punctuation">:</span> ActionFilterAttribute<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnActionExecuted</span><span class="token punctuation">(</span>ActionExecutedContext filterContext<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"OnActionExecuted"</span><span class="token punctuation">,</span> filterContext<span class="token punctuation">.</span>RouteData<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnActionExecuting</span><span class="token punctuation">(</span>ActionExecutingContext filterContext<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"OnActionExecuting"</span><span class="token punctuation">,</span> filterContext<span class="token punctuation">.</span>RouteData<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnResultExecuted</span><span class="token punctuation">(</span>ResultExecutedContext filterContext<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"OnResultExecuted"</span><span class="token punctuation">,</span> filterContext<span class="token punctuation">.</span>RouteData<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnResultExecuting</span><span class="token punctuation">(</span>ResultExecutingContext filterContext<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"OnResultExecuting "</span><span class="token punctuation">,</span> filterContext<span class="token punctuation">.</span>RouteData<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">Log</span><span class="token punctuation">(</span><span class="token keyword">string</span> methodName<span class="token punctuation">,</span> RouteData routeData<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> controllerName <span class="token operator">=</span> routeData<span class="token punctuation">.</span>Values<span class="token punctuation">[</span><span class="token string">"controller"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> actionName <span class="token operator">=</span> routeData<span class="token punctuation">.</span>Values<span class="token punctuation">[</span><span class="token string">"action"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> message <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;0&amp;#125;- controller:&amp;#123;1&amp;#125; action:&amp;#123;2&amp;#125;"</span><span class="token punctuation">,</span> methodName<span class="token punctuation">,</span>                                                                     controllerName<span class="token punctuation">,</span>                                                                     actionName<span class="token punctuation">)</span><span class="token punctuation">;</span>        Debug<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">[</span>Log<span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FooController</span> <span class="token punctuation">:</span> Controller<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ActionResult <span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ActionResult <span class="token function">About</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ActionResult <span class="token function">Contact</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇，我们详细讲讲 .Net MVC 中的 Filter。&lt;/p&gt;
&lt;p&gt;默认情况，在 ASP.NET MVC 中，用户请求被路由到适当的控制器和 Action 方法。&lt;br&gt;但是，在某些情况下，您可能希望在执行 Action 方法之前或之后执行某些逻辑。ASP.NET </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/ASP.Net%20MVC(%E4%B9%9D)/"/>
    <id>https://1ess.github.io/ASP.Net%20MVC(%E4%B9%9D)/</id>
    <published>2021-07-14T12:40:59.048Z</published>
    <updated>2021-07-14T12:40:59.048Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇，我们详细讲讲 .Net MVC 中的 Bundling 和 Minification。</p><h2 id="Bundling"><a href="#Bundling" class="headerlink" title="Bundling"></a>Bundling</h2><hr><p>在 MVC 4 中引入了 Bundling 和 Minification 技术以改善请求加载时间。Bundling 允许我们将来自服务器的一堆静态文件加载到一个 http 请求中。会通过最小化文件大小和请求数量来加快页面加载速度。</p><h2 id="Minification"><a href="#Minification" class="headerlink" title="Minification"></a>Minification</h2><hr><p>Minification 技术通过删除不必要的空格和注释以及将变量名缩短为一个字符来优化脚本或 css 文件大小。如:<br>源文件如下: </p><pre class="line-numbers language-javascript"><code class="language-javascript">sayHello <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//this is comment</span>    <span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token string">"Hello"</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上 JavaScript 将被优化并最小化到以下脚本中: </p><pre class="line-numbers language-javascript"><code class="language-javascript">sayHello<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">var</span> t<span class="token operator">=</span><span class="token string">"Hello"</span><span class="token operator">+</span>n<span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Bundle-Types"><a href="#Bundle-Types" class="headerlink" title="Bundle Types"></a>Bundle Types</h2><hr><p>MVC 5 在 System.web.Optimization 命名空间中包含以下 bundle 类: </p><ul><li>ScriptBundle: ScriptBundle 负责单个或多个脚本文件的 JavaScript 缩小</li><li>StyleBundle: StyleBundle 负责单个或多个样式表文件的 CSS 缩小。</li><li>DynamicFolderBundle: 表示 ASP.NET 从包含相同类型文件的文件夹创建的 Bundle 对象。</li></ul><p>所有上述 bundle 类都包含在 System.Web.Optimization.Bundle 命名空间中，并从 Bundle 类派生。</p><h2 id="ScriptBundle-in-ASP-NET-MVC"><a href="#ScriptBundle-in-ASP-NET-MVC" class="headerlink" title="ScriptBundle in ASP.NET MVC"></a>ScriptBundle in ASP.NET MVC</h2><hr><p>我们将学习如何在一个 http 请求中创建多个 JavaScript 文件的包。</p><p>在 MVC 文件夹中打开 App_Start/BundleConfig.cs 文件。BundleConfig.cs 文件默认由 MVC 框架创建。应该在 BundleConfig.RegisterBundles 方法中编写所有 Bundle 代码。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BundleConfig</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 有关捆绑的详细信息，请访问 https://go.microsoft.com/fwlink/?LinkId=301862</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">RegisterBundles</span><span class="token punctuation">(</span>BundleCollection bundles<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        bundles<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ScriptBundle</span><span class="token punctuation">(</span><span class="token string">"~/bundles/jquery"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>                        <span class="token string">"~/Scripts/jquery-&amp;#123;version&amp;#125;.js"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bundles<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ScriptBundle</span><span class="token punctuation">(</span><span class="token string">"~/bundles/jqueryval"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>                        <span class="token string">"~/Scripts/jquery.validate*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 使用要用于开发和学习的 Modernizr 的开发版本。然后，当你做好</span>            <span class="token comment" spellcheck="true">// 生产准备就绪，请使用 https://modernizr.com 上的生成工具仅选择所需的测试。</span>        bundles<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ScriptBundle</span><span class="token punctuation">(</span><span class="token string">"~/bundles/modernizr"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>                        <span class="token string">"~/Scripts/modernizr-*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bundles<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ScriptBundle</span><span class="token punctuation">(</span><span class="token string">"~/bundles/bootstrap"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>                      <span class="token string">"~/Scripts/bootstrap.js"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bundles<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StyleBundle</span><span class="token punctuation">(</span><span class="token string">"~/Content/css"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span>                      <span class="token string">"~/Content/bootstrap.css"</span><span class="token punctuation">,</span>                      <span class="token string">"~/Content/site.css"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BundleTable<span class="token punctuation">.</span>EnableOptimizations <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>通过将包名称指定为构造函数参数来创建 ScriptBundle 类的实例，此捆绑包名称是以 ~/ 开头的虚拟路径。建议提供一个易于识别的 bundle 路径</li><li>使用 Include 方法将一个或多个JS文件的相对路径的作为参数，添加到 bundle 中</li><li>将 bundle 添加到 BundleCollection 实例中，该实例在 RegisterBundle 方法中指定为参数。</li><li>BundleTable.EnableOptimizations = true 在 Debug 下启用优化，还可以使用 bundle 类的 IncludeDirectory 方法添加特定目录下的所有文件: </li></ol><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">RegisterBundles</span><span class="token punctuation">(</span>BundleCollection bundles<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                bundles<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ScriptBundle</span><span class="token punctuation">(</span><span class="token string">"~/bundles/scripts"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IncludeDirectory</span><span class="token punctuation">(</span><span class="token string">"~/Scripts/"</span><span class="token punctuation">,</span> <span class="token string">"*.js"</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>我们在 Global.asax.cs 文件的 Application_Start 事件调用方法: </li></ol><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">Application_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    BundleConfig<span class="token punctuation">.</span><span class="token function">RegisterBundles</span><span class="token punctuation">(</span>BundleTable<span class="token punctuation">.</span>Bundles<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用通配符"><a href="#使用通配符" class="headerlink" title="使用通配符"></a>使用通配符</h3><p>有时第三方脚本文件包含脚本文件名称中的版本。我们就可以使用通配符: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BundleConfig</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">RegisterBundles</span><span class="token punctuation">(</span>BundleCollection bundles<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    bundles<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ScriptBundle</span><span class="token punctuation">(</span><span class="token string">"~/bundles/jquery"</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span> <span class="token string">"~/Scripts/jquery-&amp;#123;version&amp;#125;.js"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在-Razor-View-中包含-ScriptBundle"><a href="#在-Razor-View-中包含-ScriptBundle" class="headerlink" title="在 Razor View 中包含 ScriptBundle"></a>在 Razor View 中包含 ScriptBundle</h2><hr><p>使用 @Scripts.Render() 方法在运行时包含指定的脚本包。</p><h2 id="StyleBundle"><a href="#StyleBundle" class="headerlink" title="StyleBundle"></a>StyleBundle</h2><hr><p>与 ScriptBundle 使用基本类似，只是创建的是 StyleBundle 实例，并且在 Razor 中使用 @Styles.Render() 方法在运行时包含该 CSS bundle。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇，我们详细讲讲 .Net MVC 中的 Bundling 和 Minification。&lt;/p&gt;
&lt;h2 id=&quot;Bundling&quot;&gt;&lt;a href=&quot;#Bundling&quot; class=&quot;headerlink&quot; title=&quot;Bundling&quot;&gt;&lt;/a&gt;Bundlin</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/ASP.Net%20MVC(%E5%8D%81)/"/>
    <id>https://1ess.github.io/ASP.Net%20MVC(%E5%8D%81)/</id>
    <published>2021-07-14T12:40:59.048Z</published>
    <updated>2021-07-14T12:40:59.048Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇，我们详细讲讲 ASP.Net MVC 中的 Area。</p><p>我们知道在大型应用程序可以包含大量控制器、视图和模型类，因此，使用默认的 ASP.NET MVC 项目结构维护大量视图、模型和控制器可能变得难以管理。</p><p>ASP.NET MVC 2 引入了 Area。Area 允许我们将大型应用程序划分为更小的单元，其中每个单元包含单独的 MVC 文件夹结构，与默认的 MVC 文件夹结构相同。<br>每个 Area 都包含 {area name}AreaRegistration.cs 文件中的 {area name}AreaRegistration 类。</p><p>{area name}AreaRegistration 类重写 RegisterArea 方法以映射该区域的路由: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminAreaRegistration</span> <span class="token punctuation">:</span> AreaRegistration <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">string</span> AreaName     <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">get</span>         <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"Admin"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">RegisterArea</span><span class="token punctuation">(</span>AreaRegistrationContext context<span class="token punctuation">)</span>     <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">MapRoute</span><span class="token punctuation">(</span>            <span class="token string">"Admin_default"</span><span class="token punctuation">,</span>            <span class="token string">"Admin/&amp;#123;controller&amp;#125;/&amp;#123;action&amp;#125;/&amp;#123;id&amp;#125;"</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> action <span class="token operator">=</span> <span class="token string">"Index"</span><span class="token punctuation">,</span> id <span class="token operator">=</span> UrlParameter<span class="token punctuation">.</span>Optional <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的示例中，任何以 admin 开头的 URL 都将由 Area 文件夹下的管理文件夹结构中包含的控制器处理。如: <a href="http://localhost/admin/profile">http://localhost/admin/profile</a> 将由 Areas/admin/controller/ProfileController 处理。</p><p>注意，所有 area 必须在 Global.asax.cs 中的 Application_Start 事件中注册: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">Application_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        AreaRegistration<span class="token punctuation">.</span><span class="token function">RegisterAllAreas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过这种方式，您可以为大型应用程序创建和维护多个 Area。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇，我们详细讲讲 ASP.Net MVC 中的 Area。&lt;/p&gt;
&lt;p&gt;我们知道在大型应用程序可以包含大量控制器、视图和模型类，因此，使用默认的 ASP.NET MVC 项目结构维护大量视图、模型和控制器可能变得难以管理。&lt;/p&gt;
&lt;p&gt;ASP.NET MVC 2 引</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/ASP.Net%20API(%E4%B8%80)/"/>
    <id>https://1ess.github.io/ASP.Net%20API(%E4%B8%80)/</id>
    <published>2021-07-14T12:40:59.048Z</published>
    <updated>2021-07-14T12:40:59.048Z</updated>
    
    <content type="html"><![CDATA[<p>ASP.Net Web MVC 的知识我们也复习了大概，基础内容已经覆盖了大部分，从本篇开始，我们来认识一下 ASP.Net Web API。</p><h2 id="Web-API-是什么"><a href="#Web-API-是什么" class="headerlink" title="Web API 是什么"></a>Web API 是什么</h2><hr><p>简单来说，API 是某种接口，它具有一组允许程序员访问应用程序，操作系统或其他服务的特定功能或数据的功能。<br>Web API 顾名思义，是一个可以使用 HTTP 协议访问的 Web 上的 API。这是一个概念，而不是一种技术。我们可以使用不同的技术(如 Java，.NET 等)构建 Web API。</p><h2 id="ASP-NET-Web-API"><a href="#ASP-NET-Web-API" class="headerlink" title="ASP.NET Web API"></a>ASP.NET Web API</h2><hr><p>ASP.NET Web API 是一个可扩展的框架，用于构建基于 HTTP 的服务。它的工作方式与 ASP.NET MVC Web 应用程序的工作方式大致相同，只是它将数据作为响应而不是 HTML 视图。</p><h3 id="创建-Web-API-项目"><a href="#创建-Web-API-项目" class="headerlink" title="创建 Web API 项目"></a>创建 Web API 项目</h3><p>可以通过两种方式创建 Web API 项目。</p><ul><li>带有 MVC 项目的 Web API</li><li>独立 Web API 项目</li></ul><p>注意: 通常我们直接创建带有 MVC 项目的 Web API。</p><h3 id="带有-MVC-项目的-Web-API"><a href="#带有-MVC-项目的-Web-API" class="headerlink" title="带有 MVC 项目的 Web API"></a>带有 MVC 项目的 Web API</h3><p>此项目与默认 MVC 项目相同，其中包含 Web API 的两个特定文件，App_Start 文件夹中的 WebApiConfig.cs 和 Controllers 文件夹中的 ValuesController.cs</p><p>WebApiConfig.cs 是 Web API 的配置文件。您可以为 Web API 配置路由和其他内容，类似于 RouteConfig.cs 用于配置 MVC 路由。它还默认创建 Web API 控制器 ValuesController.cs。</p><h2 id="Web-API-Controller"><a href="#Web-API-Controller" class="headerlink" title="Web API Controller"></a>Web API Controller</h2><hr><p>Web API Controller 类似于 ASP.NET MVC Controller。它处理传入的 HTTP 请求并将响应发送回调用者。</p><p>Web API Controller 是一个类，可以在 Controllers 文件夹下或项目根文件夹下的任何其他文件夹下创建。控制器类的名称必须以 Controller 结尾，并且必须继承自 System.Web.Http.ApiController。同 MVC 一样，控制器的所有 public 方法都称为 Action 方法。</p><p>基于传入的请求 URL 和 HTTP 动词(GET / POST / PUT / PATCH / DELETE)，Web API 决定执行哪个 Web API Controller 和 Action 方法，例如 Get() 方法和 GetFoos() 方法都将处理 HTTP GET 请求，Post() 方法将处理 HTTP POST 请求，Put() 方法将处理 HTTP PUT 请求，Delete() 方法将处理上述 Web API 的 HTTP DELETE 请求。</p><p>如果你想编写不以 HTTP 动词开头的方法，那么你可以在方法上应用适当的 HttpVerbs Attribute，如 HttpGet、HttpPost、HttpPut 等，与 MVC 控制器相同。</p><h3 id="Action-方法命名约定"><a href="#Action-方法命名约定" class="headerlink" title="Action 方法命名约定"></a>Action 方法命名约定</h3><p>Action 方法名称可以与 HTTP 动词相同，如 Get、Post、Put、Patch 或 Delete。也可以使用 HTTP 谓词附加任何后缀以提高可读性，如 GetFoos()、PostBar() 等。</p><h2 id="配置-Web-API"><a href="#配置-Web-API" class="headerlink" title="配置 Web API"></a>配置 Web API</h2><hr><p>Web API 只支持基于代码的配置，它无法在 Web.config 文件中配置。<br>我们可以配置 Web API 来自定义 Web API 托管和组件的行为，例如 Route、Formatter、Filters、DependencyResolver、MessageHandler、ParamterBindingRules 等。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//WebApiConfig.cs</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WebApiConfig</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Register</span><span class="token punctuation">(</span>HttpConfiguration config<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Web API 配置和服务</span>        <span class="token comment" spellcheck="true">// Web API 路由</span>        config<span class="token punctuation">.</span><span class="token function">MapHttpAttributeRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span>Routes<span class="token punctuation">.</span><span class="token function">MapHttpRoute</span><span class="token punctuation">(</span>            name<span class="token punctuation">:</span> <span class="token string">"DefaultApi"</span><span class="token punctuation">,</span>            routeTemplate<span class="token punctuation">:</span> <span class="token string">"api/&amp;#123;controller&amp;#125;/&amp;#123;id&amp;#125;"</span><span class="token punctuation">,</span>            defaults<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id <span class="token operator">=</span> RouteParameter<span class="token punctuation">.</span>Optional <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Global.asax</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">Application_Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    GlobalConfiguration<span class="token punctuation">.</span><span class="token function">Configure</span><span class="token punctuation">(</span>WebApiConfig<span class="token punctuation">.</span>Register<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HttpConfiguration 主类包含以下属性，可以使用这些属性覆盖 Web API 的默认行为: </p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>DependencyResolver</td><td>获取或设置依赖项注入的依赖项解析程序</td></tr><tr><td>Filters</td><td>获取或设置 filters</td></tr><tr><td>Formatters</td><td>获取或设置 media-type 格式化</td></tr><tr><td>IncludeErrorDetailPolicy</td><td>获取或设置一个指示错误消息中是否应包含错误详细信息的值</td></tr><tr><td>MessageHandlers</td><td>获取或设置 message handlers</td></tr><tr><td>ParameterBindingRules</td><td>获取有关如何绑定参数的规则集合。</td></tr><tr><td>Routes</td><td>获取为 Web API 配置的路由集合</td></tr><tr><td>Services</td><td>获取 Web API 服务</td></tr></tbody></table><p>接下来，我们会详细讲解每个属性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ASP.Net Web MVC 的知识我们也复习了大概，基础内容已经覆盖了大部分，从本篇开始，我们来认识一下 ASP.Net Web API。&lt;/p&gt;
&lt;h2 id=&quot;Web-API-是什么&quot;&gt;&lt;a href=&quot;#Web-API-是什么&quot; class=&quot;headerlink</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/ASP.Net%20API(%E4%BA%8C)/"/>
    <id>https://1ess.github.io/ASP.Net%20API(%E4%BA%8C)/</id>
    <published>2021-07-14T12:40:59.048Z</published>
    <updated>2021-07-14T12:40:59.048Z</updated>
    
    <content type="html"><![CDATA[<p>之前我们说过 Web MVC 中的路由，本篇，我们看看如何配置 Web API 路由。</p><p>Web API 路由类似于 ASP.NET MVC 路由。它将传入的 HTTP 请求路由到 Web API Controller 上的特定 Action 方法。</p><p>Web API 支持两种方式的路由: </p><ul><li>基于约定的路由(Convention-Based Routing)</li><li>特性路由(Attribute Routing)</li></ul><h2 id="基于约定的路由"><a href="#基于约定的路由" class="headerlink" title="基于约定的路由"></a>基于约定的路由</h2><hr><p>在基于约定的路由中，Web API 使用路由模板来确定要执行的 Controller 和 Action 方法。必须至少将一个路由模板添加到路由表中才能处理各种 HTTP 请求。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WebApiConfig</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Register</span><span class="token punctuation">(</span>HttpConfiguration config<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Enable attribute routing</span>        config<span class="token punctuation">.</span><span class="token function">MapHttpAttributeRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Add default route using convention-based routing</span>        config<span class="token punctuation">.</span>Routes<span class="token punctuation">.</span><span class="token function">MapHttpRoute</span><span class="token punctuation">(</span>            name<span class="token punctuation">:</span> <span class="token string">"DefaultApi"</span><span class="token punctuation">,</span>            routeTemplate<span class="token punctuation">:</span> <span class="token string">"api/&amp;#123;controller&amp;#125;/&amp;#123;id&amp;#125;"</span><span class="token punctuation">,</span>            defaults<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id <span class="token operator">=</span> RouteParameter<span class="token punctuation">.</span>Optional <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的 config.MapHttpAttributeRoutes() 方法作用是启用特性路由。<br>config.Routes 是 HttpRouteCollection 类型的路由表或路由集合，使用 MapHttpRoute() 扩展方法在路由表中添加 DefaultApi 路由。</p><p>可以创建 IHttpRoute 实例并手动将其添加到集合中，如下: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// define route</span>IHttpRoute defaultRoute <span class="token operator">=</span> config<span class="token punctuation">.</span>Routes<span class="token punctuation">.</span><span class="token function">CreateRoute</span><span class="token punctuation">(</span><span class="token string">"api/&amp;#123;controller&amp;#125;/&amp;#123;id&amp;#125;"</span><span class="token punctuation">,</span>                                             <span class="token keyword">new</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id <span class="token operator">=</span> RouteParameter<span class="token punctuation">.</span>Optional <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Add route</span>config<span class="token punctuation">.</span>Routes<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"DefaultApi"</span><span class="token punctuation">,</span> defaultRoute<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果 Web API 框架找不到传入请求的匹配路由，同 Web MVC 一样，将发送 404 错误响应。<br>注意: Web API 还支持与 ASP.NET MVC 相同的路由，在 URL 中包含 Action 方法名称。</p><h3 id="多路由"><a href="#多路由" class="headerlink" title="多路由"></a>多路由</h3><p>可以使用 HttpConfiguration 对象在 Web API 中配置多个路由: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">WebApiConfig</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Register</span><span class="token punctuation">(</span>HttpConfiguration config<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">MapHttpAttributeRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// foo route</span>        config<span class="token punctuation">.</span>Routes<span class="token punctuation">.</span><span class="token function">MapHttpRoute</span><span class="token punctuation">(</span>            name<span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">,</span>            routeTemplate<span class="token punctuation">:</span> <span class="token string">"api/foo/&amp;#123;id&amp;#125;"</span><span class="token punctuation">,</span>            defaults<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> controller<span class="token operator">=</span><span class="token string">"foo"</span><span class="token punctuation">,</span> id <span class="token operator">=</span> RouteParameter<span class="token punctuation">.</span>Optional <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            constraints<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id <span class="token operator">=</span><span class="token string">"/d+"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// default route</span>        config<span class="token punctuation">.</span>Routes<span class="token punctuation">.</span><span class="token function">MapHttpRoute</span><span class="token punctuation">(</span>            name<span class="token punctuation">:</span> <span class="token string">"DefaultApi"</span><span class="token punctuation">,</span>            routeTemplate<span class="token punctuation">:</span> <span class="token string">"api/&amp;#123;controller&amp;#125;/&amp;#123;id&amp;#125;"</span><span class="token punctuation">,</span>            defaults<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id <span class="token operator">=</span> RouteParameter<span class="token punctuation">.</span>Optional <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在 DefaultApi 路由之前配置了 Foo 路由。因此，任何传入的请求将首先与 Foo 路由匹配，如果不匹配，则再与 DefaultApi 路由进行匹配。</p><p>注意: 在路由模板中使用 api 的原因只是为了避免 MVC 控制器和 Web API 控制器混淆。</p><h3 id="特性路由"><a href="#特性路由" class="headerlink" title="特性路由"></a>特性路由</h3><p>Web API 2 支持特性路由。顾名思义，属性路由使用[Route()]特性来定义路由。该特性可以应用于任何 Controller 或 Action 方法。</p><p>要使用 Web API 进行特性路由，必须通过调用 config.MapHttpAttributeRoutes() 方法在 WebApiConfig 中启用它。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FooController</span> <span class="token punctuation">:</span> ApiController<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token function">Route</span><span class="token punctuation">(</span><span class="token string">"api/foo/bars"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">public</span> IEnumerable<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token string">"bar1"</span><span class="token punctuation">,</span> <span class="token string">"bar2"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>则我们通过 <a href="http://localhost:1234/api/foo/bars">http://localhost:1234/api/foo/bars</a> 访问上面的 Get 方法。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前我们说过 Web MVC 中的路由，本篇，我们看看如何配置 Web API 路由。&lt;/p&gt;
&lt;p&gt;Web API 路由类似于 ASP.NET MVC 路由。它将传入的 HTTP 请求路由到 Web API Controller 上的特定 Action 方法。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
</feed>
