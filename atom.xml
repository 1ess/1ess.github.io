<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A Sort Of A Blog</title>
  
  
  <link href="https://1ess.github.io/atom.xml" rel="self"/>
  
  <link href="https://1ess.github.io/"/>
  <updated>2021-07-14T03:55:19.398Z</updated>
  <id>https://1ess.github.io/</id>
  
  <author>
    <name>Stephen Chang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/MySQL(%E4%B8%80)/"/>
    <id>https://1ess.github.io/MySQL(%E4%B8%80)/</id>
    <published>2021-07-14T03:55:19.398Z</published>
    <updated>2021-07-14T03:55:19.398Z</updated>
    
    <content type="html"><![CDATA[<p>从本篇开始，我们来说说最流行的数据库 —— 关于 MySQL 的那些事儿。</p><h2 id="数据库概念"><a href="#数据库概念" class="headerlink" title="数据库概念"></a>数据库概念</h2><hr><p>数据库(Database)是按照数据结构来组织、存储和管理数据的建立在计算机存储设备上的仓库。</p><blockquote><p>人们通常用数据库这个术语来代表他们使用的数据库软件。这是不正确的，它是引起混淆的根源。确切地说，数据库软件应称为 DBMS(数据库管理系统)。数据库是通过 DBMS 创建和操纵的容器。数据库可以是保存在硬设备上的文件，但也可以不是。在很大程度上说，数据库究竟是文件还是别的什么东西并不重要，因为你并不直接访问数据库; 你使用的是 DBMS，它替你访问数据库。</p></blockquote><h3 id="数据库分类"><a href="#数据库分类" class="headerlink" title="数据库分类"></a>数据库分类</h3><ul><li>关系数据库(Relational Database)</li><li>非关系数据库(NoSQL)</li></ul><h3 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>关系型数据库是创建在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。现实世界中的各种实体以及实体之间的各种联系均用关系模型来表示。现如今虽然对此模型有一些批评意见，但它还是数据存储的传统标准。</p><p>关系模型由<strong>关系数据结构</strong>、<strong>关系操作集合</strong>、<strong>关系完整性约束</strong>三部分组成。</p><p>标准数据查询语言 SQL 就是一种基于关系数据库的语言，这种语言执行对关系数据库中数据的检索和操作。</p><p>典型的关系型数据库: </p><ul><li>MySQL</li><li>PostgreSQL</li><li>SQL Server</li><li>Oracle</li><li>Sqlite</li><li>DB2</li></ul><p>几乎所有的数据库管理系统都配备了一个开放式数据库连接(ODBC)驱动程序，令各个数据库之间得以互相集成。</p><h3 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h3><p>NoSQL 一词最早出现于1998年，是 Carlo Strozzi 开发的一个轻量、开源、不提供 SQL 功能的关系数据库。当代典型的关系数据库在一些数据敏感的应用中表现了糟糕的性能，例如为巨量文档创建索引、高流量网站的网页服务，以及发送流式媒体。关系型数据库的典型实现主要被调整用于执行规模小而读写频繁，或者大批量极少写访问的事务。</p><p>典型的非关系型数据库: </p><ol><li>Key/value 硬盘存储</li></ol><ul><li>LevelDB</li><li>MemcacheDB</li></ul><ol start="2"><li>Key/value RAM 存储</li></ol><ul><li>Redis</li><li>memcached</li></ul><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><hr><p>结构化查询语言(Structured Query Language)简称 SQL，是一种特殊的编程语言，是一种数据库查询和程序设计语言，用于存储、查询、更新数据和管理关系数据库系统，同时也是数据库脚本文件的扩展名。</p><h3 id="SQL-分类"><a href="#SQL-分类" class="headerlink" title="SQL 分类"></a>SQL 分类</h3><ol><li>数据查询语言(Data Query Language，DQL): 代表指令 SELECT/SHOW</li><li>数据操作语言(Data Manipulation Language，DML): 代表指令 INSERT/UPDATE/DELETE</li><li>事务处理语言(Transaction Process Language，TPL): 代表指令 BEGIN TRANSACTION/COMMIT/ROLLBACK</li><li>数据控制语言(Data Control Language，DCL): 代表指令 GRANT/REVOKE</li><li>数据定义语言(Data Definition Language，DDL): 代表指令 CREATE/DROP</li></ol><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><hr><p>MySQL 是一种关系型数据库管理系统，目前属于 Oracle 旗下产品。</p><h3 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h3><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><ol><li>直接去<a href="https://dev.mysql.com/downloads/installer/">官网</a>下载 MySQL，双击安装</li><li>配置环境变量，指向 mysql 的 bin 目录(默认路径: C:\Program Files\MySQL\MySQL Server 8.0\bin)</li><li>配置初始化的 my.ini 配置文件</li></ol><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span><span class="token preprocessor property"># 设置3306端口</span>port<span class="token operator">=</span><span class="token number">3306</span><span class="token preprocessor property"># 设置mysql的安装目录</span>basedir<span class="token operator">=</span>C<span class="token punctuation">:</span>\Program Files\MySQL\MySQL Server <span class="token number">8.0</span>\<span class="token preprocessor property"># 设置mysql数据库的数据的存放目录</span>datadir<span class="token operator">=</span>C<span class="token punctuation">:</span>\Program Files\MySQL\MySQL Server <span class="token number">8.0</span>\Data<span class="token preprocessor property"># 允许最大连接数</span>max_connections<span class="token operator">=</span><span class="token number">200</span><span class="token preprocessor property"># 允许连接失败的次数。</span>max_connect_errors<span class="token operator">=</span><span class="token number">10</span><span class="token preprocessor property"># 服务端使用的字符集默认为UTF8</span>character<span class="token operator">-</span><span class="token keyword">set</span><span class="token operator">-</span>server<span class="token operator">=</span>utf8<span class="token preprocessor property"># 创建新表时将使用的默认存储引擎</span><span class="token keyword">default</span><span class="token operator">-</span>storage<span class="token operator">-</span>engine<span class="token operator">=</span>INNODB<span class="token preprocessor property"># 默认使用</span><span class="token string">"mysql_native_password"</span>插件认证<span class="token preprocessor property">#mysql_native_password</span>default_authentication_plugin<span class="token operator">=</span>mysql_native_password<span class="token punctuation">[</span>mysql<span class="token punctuation">]</span><span class="token preprocessor property"># 设置mysql客户端默认字符集</span><span class="token keyword">default</span><span class="token operator">-</span>character<span class="token operator">-</span><span class="token keyword">set</span><span class="token operator">=</span>utf8<span class="token punctuation">[</span>client<span class="token punctuation">]</span><span class="token preprocessor property"># 设置mysql客户端连接服务端时默认使用的端口</span>port<span class="token operator">=</span><span class="token number">3306</span><span class="token keyword">default</span><span class="token operator">-</span>character<span class="token operator">-</span><span class="token keyword">set</span><span class="token operator">=</span>utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>在 MySQL 的安装目录的仓目录下执行命令: </li></ol><pre class="line-numbers language-sh"><code class="language-sh">mysqld --initialize --console<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>在管理员权限下执行命令: </li></ol><pre class="line-numbers language-sh"><code class="language-sh">mysqld --install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意: 如果提示服务已存在，则需要执行命令: </p><pre class="line-numbers language-sh"><code class="language-sh">sc delete mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h4><p>我们直接使用 homebrew 安装: </p><pre class="line-numbers language-sh"><code class="language-sh">brew install mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>与 Windows 类似，我们还可以修改 Mysql 中配置文件，位于目录 /usr/bin/etc/my.cnf。</p><h3 id="启动和停止-MySQL-服务"><a href="#启动和停止-MySQL-服务" class="headerlink" title="启动和停止 MySQL 服务"></a>启动和停止 MySQL 服务</h3><p>MySQL 是一种 C/S 架构，包括客户端和服务端。<br>服务端对应的软件: mysqld.exe<br>客户端对应的软件: mysql.exe</p><h4 id="Windows-1"><a href="#Windows-1" class="headerlink" title="Windows"></a>Windows</h4><h5 id="命令行方式"><a href="#命令行方式" class="headerlink" title="命令行方式"></a>命令行方式</h5><pre class="line-numbers language-sh"><code class="language-sh"># 启动 mysql 服务net start mysql# 关闭 mysql 服务net stop mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="系统服务方式"><a href="#系统服务方式" class="headerlink" title="系统服务方式"></a>系统服务方式</h5><p>在计算机管理-服务(services.msc)中操作 mysql 服务。</p><h4 id="Mac-1"><a href="#Mac-1" class="headerlink" title="Mac"></a>Mac</h4><pre class="line-numbers language-sh"><code class="language-sh"># 启动 mysql 服务brew services start mysql# 关闭 mysql 服务brew services stop mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="登录和退出-MySQL-系统"><a href="#登录和退出-MySQL-系统" class="headerlink" title="登录和退出 MySQL 系统"></a>登录和退出 MySQL 系统</h3><p>通过客户端 mysql.exe 与服务器连接认证。</p><h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><p>连接认证语法: </p><pre class="line-numbers language-sh"><code class="language-sh">mysql -h&#123;ip地址或域名&#125; -P&#123;mysql 监听端口，通常3306&#125; -u&#123;用户名&#125; -p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h4><p>我们使用完 mysql 之后，由于连接数量有限，所以注意一定要断开连接。</p><pre class="line-numbers language-sh"><code class="language-sh">\q\quitexit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意: Mysql 8.0 版本和 Mysql 5.7 版本的身份验证插件不同: </p><ul><li>Mysql 8.0 身份验证插件为 caching_sha2_password</li><li>Mysql 5.7 身份验证插件为 mysql_native_password</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;从本篇开始，我们来说说最流行的数据库 —— 关于 MySQL 的那些事儿。&lt;/p&gt;
&lt;h2 id=&quot;数据库概念&quot;&gt;&lt;a href=&quot;#数据库概念&quot; class=&quot;headerlink&quot; title=&quot;数据库概念&quot;&gt;&lt;/a&gt;数据库概念&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;数据库(Data</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/MySQL(%E4%BA%8C)/"/>
    <id>https://1ess.github.io/MySQL(%E4%BA%8C)/</id>
    <published>2021-07-14T03:55:19.398Z</published>
    <updated>2021-07-14T03:55:19.398Z</updated>
    
    <content type="html"><![CDATA[<p>本篇，我们来说说 SQL 的基本操作 —— 库操作、表操作以及数据操作。</p><h2 id="库操作"><a href="#库操作" class="headerlink" title="库操作"></a>库操作</h2><hr><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>基本语法: create database {数据库名} [库选项];</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 创建数据库</span><span class="token keyword">create</span> <span class="token keyword">database</span> mydatabase<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>库选项: </p><ul><li>字符集: charset {指定字符集}，不指定则采用安装时默认字符集</li><li>校对集: collate {指定校对集}</li></ul><h3 id="显示数据库"><a href="#显示数据库" class="headerlink" title="显示数据库"></a>显示数据库</h3><h4 id="显示全部"><a href="#显示全部" class="headerlink" title="显示全部"></a>显示全部</h4><p>基本语法: show databases;</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 显示全部数据库</span><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="显示部分"><a href="#显示部分" class="headerlink" title="显示部分"></a>显示部分</h4><p>基本语法: show databases like ‘{模式匹配}’;</p><ul><li>_: 匹配当前位置单个字符</li><li>%: 匹配指定位置多个字符</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 显示部分数据库</span><span class="token keyword">show</span> <span class="token keyword">databases</span> <span class="token operator">like</span> <span class="token string">'my%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="显示数据库创建语句"><a href="#显示数据库创建语句" class="headerlink" title="显示数据库创建语句"></a>显示数据库创建语句</h4><p>基本语法: show create database {数据库名};</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 显示数据库创建语句</span><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">database</span> mydatabase<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h3><p>基本语法: use {数据库名};<br>在命令行会出现: Database changed</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 选择数据库</span><span class="token keyword">use</span> mydatabase<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><p>5.5 版本之后，只能修改库选项，不能再修改库名了。<br>基本语法: alter databse {数据库名} {库选项};</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 修改库选项</span><span class="token keyword">alter</span> <span class="token keyword">database</span> mydatabase <span class="token keyword">charset</span> gbk<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><p>基本语法: drop database {数据库名};</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 删除数据库</span><span class="token keyword">drop</span> <span class="token keyword">database</span> mydatabase<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h2><hr><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><h4 id="普通创建表"><a href="#普通创建表" class="headerlink" title="普通创建表"></a>普通创建表</h4><p>基本语法: create table {表名}(字段 字段类型 [字段属性], …) [表选项];</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 普通创建表</span><span class="token keyword">create</span> <span class="token keyword">table</span> mydatabase<span class="token punctuation">.</span>class<span class="token punctuation">(</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 或者</span><span class="token keyword">use</span> mydatabase<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> class<span class="token punctuation">(</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意: 表必须放在对应的数据库之下，有两种方式: </p><ol><li>在表名前加上数据库名，用”.”连接</li><li>在创建表之前，先选择数据库(即 use {数据库名};)</li></ol><p>表选项与库选项类似，包括: </p><ol><li>存储引擎: engine {引擎名}</li><li>字符集: charset {字符集}</li><li>校对集: collate {校对集}</li></ol><h4 id="复制已存在表结构"><a href="#复制已存在表结构" class="headerlink" title="复制已存在表结构"></a>复制已存在表结构</h4><p>基本语法: create table {表名} like {表名};</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 复制表结构</span><span class="token keyword">create</span> <span class="token keyword">table</span> mydatabase<span class="token punctuation">.</span>test <span class="token operator">like</span> mydatabase2<span class="token punctuation">.</span>class<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="显示数据表"><a href="#显示数据表" class="headerlink" title="显示数据表"></a>显示数据表</h3><h4 id="显示全部-1"><a href="#显示全部-1" class="headerlink" title="显示全部"></a>显示全部</h4><p>基本语法: show tables;</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 显示全部数据表</span><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="显示部分-1"><a href="#显示部分-1" class="headerlink" title="显示部分"></a>显示部分</h4><p>基本语法: show tables like ‘{模式匹配}’;</p><ul><li>_: 匹配当前位置单个字符</li><li>%: 匹配指定位置多个字符</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 显示部分数据表</span><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token operator">like</span> <span class="token string">'c%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="显示表结构-字段名，字段类型，字段属性等"><a href="#显示表结构-字段名，字段类型，字段属性等" class="headerlink" title="显示表结构(字段名，字段类型，字段属性等)"></a>显示表结构(字段名，字段类型，字段属性等)</h4><p>基本语法: desc {表名};</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 显示表结构</span><span class="token keyword">desc</span> test<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="修改数据表"><a href="#修改数据表" class="headerlink" title="修改数据表"></a>修改数据表</h3><h4 id="修改表属性"><a href="#修改表属性" class="headerlink" title="修改表属性"></a>修改表属性</h4><p>基本语法: alter table {表名} {表选项};</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 修改表选项</span><span class="token keyword">alter</span> <span class="token keyword">table</span> test <span class="token keyword">engine</span> <span class="token keyword">innodb</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h4><h5 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h5><p>基本语法: rename table {旧表名} to {新表名};</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 修改表名</span><span class="token keyword">rename</span> <span class="token keyword">table</span> test <span class="token keyword">to</span> test1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="新增字段"><a href="#新增字段" class="headerlink" title="新增字段"></a>新增字段</h5><p>基本语法: alter table {表名} add {字段名} {字段类型} [字段属性];</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 新增字段</span><span class="token keyword">alter</span> <span class="token keyword">table</span> test1 <span class="token keyword">add</span> age <span class="token keyword">int</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="修改字段名"><a href="#修改字段名" class="headerlink" title="修改字段名"></a>修改字段名</h5><p>基本语法: alter table {表名} change {旧字段名} {新字段名} {字段类型} [字段属性];</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 修改字段名</span><span class="token keyword">alter</span> <span class="token keyword">table</span> test1 change age new_age <span class="token keyword">int</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="修改字段类型或属性"><a href="#修改字段类型或属性" class="headerlink" title="修改字段类型或属性"></a>修改字段类型或属性</h5><p>基本语法: alter table {表名} modify {字段名} {新字段类型} [新字段属性];</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 修改字段类型或属性</span><span class="token keyword">alter</span> <span class="token keyword">table</span> test1 <span class="token keyword">modify</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h5><p>基本语法: alter table {表名} drop {字段名};</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 删除字段</span><span class="token keyword">alter</span> <span class="token keyword">table</span> test1 <span class="token keyword">drop</span> new_age<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h4><p>基本语法: drop table {表名};</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 删除数据表</span><span class="token keyword">drop</span> <span class="token keyword">table</span> test1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h2><hr><h3 id="插入数据操作"><a href="#插入数据操作" class="headerlink" title="插入数据操作"></a>插入数据操作</h3><p>基本语法: insert into {表名} [({字段1}, {字段2}, …)] values({字段值1}, {字段值2}, …); </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 插入数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> test <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 或者</span><span class="token keyword">insert</span> <span class="token keyword">into</span> test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'Lisi'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询数据操作"><a href="#查询数据操作" class="headerlink" title="查询数据操作"></a>查询数据操作</h3><p>基本语法: select * from {表名} [where 字段名 =/like 字段值];</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询数据</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 或者</span><span class="token keyword">select</span> name<span class="token punctuation">,</span> age <span class="token keyword">from</span> test <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'Lisi'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除数据操作"><a href="#删除数据操作" class="headerlink" title="删除数据操作"></a>删除数据操作</h3><p>基本语法: delete from {表名} [where 字段名 =/like 字段值];</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 删除数据</span><span class="token keyword">delete</span> <span class="token keyword">from</span> test <span class="token keyword">where</span> age<span class="token operator">>=</span><span class="token number">20</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="更新数据操作"><a href="#更新数据操作" class="headerlink" title="更新数据操作"></a>更新数据操作</h3><p>基本语法: update {表名} set {字段名}={新值} [where 字段名 =/like 字段值];</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 更新操作</span><span class="token keyword">update</span> test <span class="token keyword">set</span> age<span class="token operator">=</span><span class="token number">30</span> <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'Lisi'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="其他常见命令"><a href="#其他常见命令" class="headerlink" title="其他常见命令"></a>其他常见命令</h2><h3 id="查看-MySQL-服务端版本"><a href="#查看-MySQL-服务端版本" class="headerlink" title="查看 MySQL 服务端版本"></a>查看 MySQL 服务端版本</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--  +-----------+</span><span class="token comment" spellcheck="true">--  | version() |</span><span class="token comment" spellcheck="true">--  +-----------+</span><span class="token comment" spellcheck="true">--  | 8.0.16    |</span><span class="token comment" spellcheck="true">--  +-----------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看当前选择的数据库"><a href="#查看当前选择的数据库" class="headerlink" title="查看当前选择的数据库"></a>查看当前选择的数据库</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--  +------------+</span><span class="token comment" spellcheck="true">--  | database() |</span><span class="token comment" spellcheck="true">--  +------------+</span><span class="token comment" spellcheck="true">--  | test       |</span><span class="token comment" spellcheck="true">--  +------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本篇，我们来说说 SQL 的基本操作 —— 库操作、表操作以及数据操作。&lt;/p&gt;
&lt;h2 id=&quot;库操作&quot;&gt;&lt;a href=&quot;#库操作&quot; class=&quot;headerlink&quot; title=&quot;库操作&quot;&gt;&lt;/a&gt;库操作&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;创建数据库&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/MySQL(%E4%B8%89)/"/>
    <id>https://1ess.github.io/MySQL(%E4%B8%89)/</id>
    <published>2021-07-14T03:55:19.398Z</published>
    <updated>2021-07-14T03:55:19.398Z</updated>
    
    <content type="html"><![CDATA[<p>本篇，我们再来说说 MySQL 中的列类型和列属性以及表间关系。</p><h2 id="列类型"><a href="#列类型" class="headerlink" title="列类型"></a>列类型</h2><hr><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><ol><li>Tinyint: 迷你整型，采用 1 字节保存整型数据</li><li>Smallint: 小整型，采用 2 字节保存整型数据</li><li>Mediumint: 中整型，采用 3 字节保存整型数据</li><li>Int: 标准整型，采用 4 字节保存整型数据</li><li>Bigint: 大整型，采用 8 字节保存整型数据</li></ol><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> my_int<span class="token punctuation">(</span>    int_1 <span class="token keyword">tinyint</span><span class="token punctuation">,</span>    int_2 <span class="token keyword">smallint</span><span class="token punctuation">,</span>    int_3 <span class="token keyword">mediumint</span><span class="token punctuation">,</span>    int_4 <span class="token keyword">int</span><span class="token punctuation">,</span>    int_5 <span class="token keyword">bigint</span><span class="token punctuation">)</span> <span class="token keyword">charset</span> utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="无符号设定"><a href="#无符号设定" class="headerlink" title="无符号设定"></a>无符号设定</h4><p>默认整型是有符号的，如果只想有正数，只需要使用 unsigned。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> my_int <span class="token keyword">add</span> int_6 <span class="token keyword">tinyint</span> unsigned<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="显示长度"><a href="#显示长度" class="headerlink" title="显示长度"></a>显示长度</h4><p>指在数据显示的时候，最长可以显示的位数。<br>如果需要始终以最大长度显示，可以使用 zerofill 属性。<br>注意: 使用了 zerofill，一定是无符号整型。因为从左到右 0 填充。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> my_int <span class="token keyword">add</span> int_7 <span class="token keyword">tinyint</span> zerofill<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以手动指定显示长度，但是不能改变该类型所能表示的最大大小，只是在 zerofill 时，不足位数时，以该位数填充。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> my_int <span class="token keyword">add</span> int_7 <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> zerofill<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 填充 1 时，显示 01，填充 100 时，显示 100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="小数类型"><a href="#小数类型" class="headerlink" title="小数类型"></a>小数类型</h3><p>在 MySQL 中，小数类型分为: </p><ol><li>浮点型</li></ol><ul><li>Float: 单精度浮点型，采用 4 字节保存小数类型数据，精度大概在 7 位</li><li>Double: 双精度浮点型，采用 8 字节保存小数类型数据，精度大概在 15 位</li></ul><ol start="2"><li>定点型</li></ol><ul><li>Decimal</li></ul><h4 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h4><p>基本语法: </p><ol><li>float(或 double): 不指定小数位</li><li>float(M, D)(或 double(M, D)): 表示一共存储 M 个有效数字，其中小数位占 D 位，即整数位数占 M-D 位，小数部分占 D 位</li></ol><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> my_float<span class="token punctuation">(</span>    float_1 <span class="token keyword">float</span><span class="token punctuation">,</span>    float_2 <span class="token keyword">float</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">charset</span> utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意: float 或 double 用于不需要精确记录的小数。</p><h4 id="定点型"><a href="#定点型" class="headerlink" title="定点型"></a>定点型</h4><p>定点型可以保证数据精确的小数。小数和整数部分分开存储，<br>基本语法:<br>decimal(M, D): M 表示总长度，最大值不能超过 65，D 代表小数部分长度，最大值不能超过 30</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> my_decimal<span class="token punctuation">(</span>    decimal_1 <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    float_1 <span class="token keyword">float</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">charset</span> utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h3><ol><li>Date: 系统采用 3 个字节来存储数据，对应格式为: YYYY-mm-dd，初始值: 0000-00-00</li><li>Time: 系统采用 3 个字节来存储数据，对应格式为: HH:ii:ss，能表示的范围是: -838:59:59 ~ 838:59:59</li><li>Datetime: 就是将前面的 Date 类型和 Time 类型合并，系统采用 8 个字节来存储数据，对应格式为: YYYY-mm-dd HH:ii:ss</li><li>Timestamp: 表示从格林威治时间开始的时间戳，但是格式仍为: YYYY-mm-dd HH:ii:ss</li><li>Year: 系统采用 1 个字节来存储数据，能表示范围是 1900 ~ 2155</li></ol><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> my_date<span class="token punctuation">(</span> date_1 <span class="token keyword">date</span><span class="token punctuation">,</span> date_2 time<span class="token punctuation">,</span> date_3 <span class="token keyword">datetime</span><span class="token punctuation">,</span> date_4 <span class="token keyword">timestamp</span><span class="token punctuation">,</span> date_5 year<span class="token punctuation">)</span> <span class="token keyword">charset</span> utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意: timestamp 类型不能为 null，且存在默认值为当前时间戳的时间，当数据更新时，该字段自动更新。另外，通常我们也可以用整型来保存真正的时间戳。</p><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><ol><li>Char: 定长字符，基本语法: char(L)，L 代表字符数，不论中英文，L 长度范围是 0 ~ 255</li><li>Varchar: 变长字符，基本语法: varchar(L)，L 代表字符数，不论中英文，L 长度范围是 0 ~ 65535</li><li>Text: 文本类型，存储普通字符文本</li></ol><ul><li>Tinytext: 系统使用 1 个字节来保存，实际能存储 2<sup>8</sup> + 1</li><li>Text: 系统使用 2 个字节来保存，实际能存储 2<sup>16</sup> + 2</li><li>Mediumtext: 系统使用 3 个字节来保存，实际能存储 2<sup>24</sup> + 3</li><li>Longtext: 系统使用 4 个字节来保存，实际能存储 2<sup>32</sup> + 4</li></ul><ol start="4"><li>Enum: 枚举类型，在存入之前，先预设几个项来限制可输入值，基本语法: enum({枚举值1}, {枚举值2}, …)</li><li>Set: 将多个数据项同时保存，本质是将指定的项按照对应的二进制位来控制，1 表示被选中，0 表示未被选中，基本语法: set({值1}, {值2}, …)</li></ol><p>注意: 如果数据长度超过 255 个字符，我们一般是使用 text，而不是 char 或 varchar。<br>对于 Text 类型，通常我们直接使用 Text 类型即可，系统会自动选择合适的文本类型。<br>我们还有 Blob 类型存储二进制文本，如图片，文件等，但是一般不使用，一般都是直接存储链接。<br>枚举类型在 MySQL 中实际存储的整型，注意是从 1 开始。</p><h2 id="列属性"><a href="#列属性" class="headerlink" title="列属性"></a>列属性</h2><hr><p>在 MySQL 中一共有 6 个列属性: </p><ol><li>null</li><li>默认值</li><li>列描述</li><li>主键</li><li>唯一键</li><li>自增长</li></ol><h3 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h3><p>null 属性代表字段为空。如果为 YES，表示该字段可以为空，我们设计表时，尽量不要让数据为空。</p><h3 id="Default"><a href="#Default" class="headerlink" title="Default"></a>Default</h3><p>设计表时，在用户不进行数据输入时，那么会自动填充默认值。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> my_default<span class="token punctuation">(</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    age <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token keyword">charset</span> utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h3><p>用于给开发人员进行维护的一个注释说明。<br>基本语法: comment ‘描述’</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> my_comment<span class="token punctuation">(</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'用户名，不能为空'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">--用户名，不能为空</span>    pass <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'密码，不能为空'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">--密码，不能为空</span><span class="token punctuation">)</span> <span class="token keyword">charset</span> utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Primary-Key"><a href="#Primary-Key" class="headerlink" title="Primary Key"></a>Primary Key</h3><p>主键是指在一张表中，值具有唯一性的字段。</p><h4 id="创建主键"><a href="#创建主键" class="headerlink" title="创建主键"></a>创建主键</h4><h5 id="随表创建"><a href="#随表创建" class="headerlink" title="随表创建"></a>随表创建</h5><ol><li>直接在需要当作主键的字段之后，增加 primary key 属性来确定主键</li></ol><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> my_pri1<span class="token punctuation">(</span>    username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">)</span> <span class="token keyword">charset</span> utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>在所有字段之后增加 primary key 选项，基本语法: primary key({字段列表})</li></ol><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> my_pri2<span class="token punctuation">(</span>    username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">charset</span> utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="表后创建"><a href="#表后创建" class="headerlink" title="表后创建"></a>表后创建</h5><p>基本语法: alter table {表名} add primary key({字段});</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> my_pri3 <span class="token keyword">add</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="删除主键"><a href="#删除主键" class="headerlink" title="删除主键"></a>删除主键</h4><p>基本语法: alter table {表名} drop primary key;</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> my_pri3 <span class="token keyword">drop</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="复合主键"><a href="#复合主键" class="headerlink" title="复合主键"></a>复合主键</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> my_score<span class="token punctuation">(</span>    student_id char<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    course_id char<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    score <span class="token keyword">tinyint</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>student_id<span class="token punctuation">,</span> course_id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">charset</span> utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h4><ol><li>字段值不能为空</li><li>字段值不能重复</li></ol><h4 id="主键分类"><a href="#主键分类" class="headerlink" title="主键分类"></a>主键分类</h4><ol><li>业务主键</li><li>逻辑主键</li></ol><h3 id="Auto-Increment"><a href="#Auto-Increment" class="headerlink" title="Auto_Increment"></a>Auto_Increment</h3><p>给定字段该属性之后，该列数据在未被提供确定数据时，系统会根据已存在数据进行自动增长后，填充数据。通常用于逻辑主键。<br>自动增长只用于数值类型。<br>基本语法: {字段} {字段类型} auto_increment;</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> my_increment<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'用户名不为空'</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token keyword">charset</span> utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改自增长当前值"><a href="#修改自增长当前值" class="headerlink" title="修改自增长当前值"></a>修改自增长当前值</h4><p>一个表最多只能有一个自增长。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> my_increment <span class="token keyword">auto_increment</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="删除自增长"><a href="#删除自增长" class="headerlink" title="删除自增长"></a>删除自增长</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> my_increment <span class="token keyword">modify</span> id <span class="token keyword">int</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看自增长初始变量"><a href="#查看自增长初始变量" class="headerlink" title="查看自增长初始变量"></a>查看自增长初始变量</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'auto_increment%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>auto_increment_increment 指步长，auto_increment_offset 指初始值。</p><h3 id="Unique-Key"><a href="#Unique-Key" class="headerlink" title="Unique Key"></a>Unique Key</h3><p>唯一键与主键一样，都是保证字段的数据唯一性的。不同的是: </p><ol><li>一张表只能有一个主键，但可以有多个唯一键</li><li>唯一键允许为 null，且可以有多个</li></ol><h4 id="创建唯一键"><a href="#创建唯一键" class="headerlink" title="创建唯一键"></a>创建唯一键</h4><ol><li>直接在需要当作唯一键的字段之后，增加 unique [key] 属性来确定</li></ol><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> my_unique1<span class="token punctuation">(</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">unique</span><span class="token punctuation">)</span> <span class="token keyword">charset</span> utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>在所有字段之后，增加 unique key unique key({字段列表})</li></ol><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> my_unique2<span class="token punctuation">(</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">unique</span> <span class="token keyword">key</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">charset</span> utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>在创建完表后，也可以创建唯一键，alter table {表名} add unique key({字段列表});</li></ol><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> my_unique3 <span class="token keyword">add</span> <span class="token keyword">unique</span> <span class="token keyword">key</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="删除唯一键"><a href="#删除唯一键" class="headerlink" title="删除唯一键"></a>删除唯一键</h4><p>基本语法: alter table {表名} drop index {唯一键名};</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> my_unique1 <span class="token keyword">drop</span> <span class="token keyword">index</span> name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="表间关系"><a href="#表间关系" class="headerlink" title="表间关系"></a>表间关系</h2><hr><h3 id="一对一关系"><a href="#一对一关系" class="headerlink" title="一对一关系"></a>一对一关系</h3><p>一张表中的一条记录与另一张表中最多只有一条记录有明确关系。通常，此方案设计为两张表中使用同样主键即可。</p><h3 id="一对多关系"><a href="#一对多关系" class="headerlink" title="一对多关系"></a>一对多关系</h3><p>通常一对多的关系设计方案，再多关系的表中维护一个字段，通常是一关系的主键。</p><h3 id="多对多关系"><a href="#多对多关系" class="headerlink" title="多对多关系"></a>多对多关系</h3><p>通常多对多的关系设计方案，需要再增加一张关系表来维护该关系。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本篇，我们再来说说 MySQL 中的列类型和列属性以及表间关系。&lt;/p&gt;
&lt;h2 id=&quot;列类型&quot;&gt;&lt;a href=&quot;#列类型&quot; class=&quot;headerlink&quot; title=&quot;列类型&quot;&gt;&lt;/a&gt;列类型&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;整数类型&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/MySQL(%E5%9B%9B)/"/>
    <id>https://1ess.github.io/MySQL(%E5%9B%9B)/</id>
    <published>2021-07-14T03:55:19.398Z</published>
    <updated>2021-07-14T03:55:19.398Z</updated>
    
    <content type="html"><![CDATA[<p>本篇，我们说说 MySQL 对于数据的增删改查操作以及运算符。</p><h2 id="新增数据"><a href="#新增数据" class="headerlink" title="新增数据"></a>新增数据</h2><hr><h3 id="多数据插入"><a href="#多数据插入" class="headerlink" title="多数据插入"></a>多数据插入</h3><p>基本语法: insert into {表名}({字段列表}) values({值列表1}), ({值列表2}), …</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> my_advance_insert<span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'Lisi'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="主键冲突"><a href="#主键冲突" class="headerlink" title="主键冲突"></a>主键冲突</h3><p>在有的表中，使用的是业务主键，但是往往在进行数据插入时，又不确定数据表中是否存在对应的主键。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> my_stud <span class="token punctuation">(</span>    stud_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">comment</span> <span class="token string">'主键，学生ID'</span><span class="token punctuation">,</span>    name <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span> <span class="token keyword">charset</span> utf8<span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> my_stud <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'stu0001'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'stu0002'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'stu0003'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 主键冲突</span><span class="token keyword">insert</span> <span class="token keyword">into</span> my_stud <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'stu0003'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决方案: </p><ol><li>主键冲突更新，类似插入语法，如果插入过程主键冲突，采用更新方法。基本语法: insert into {表名}({字段列表}) values({值列表1}) on duplicate key update {字段}={新值};</li></ol><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 主键冲突更新</span><span class="token keyword">insert</span> <span class="token keyword">into</span> my_stud <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'stu0003'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">)</span> <span class="token keyword">on</span> <span class="token keyword">duplicate key</span> <span class="token keyword">update</span> name<span class="token operator">=</span><span class="token string">'d'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>主键冲突替换，先删除，再重新插入。基本语法: replace into {表名}({字段列表}) values({值列表1});</li></ol><pre class="line-numbers language-sql"><code class="language-sql">replace <span class="token keyword">into</span> my_stud <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'stu0001'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="蠕虫复制"><a href="#蠕虫复制" class="headerlink" title="蠕虫复制"></a>蠕虫复制</h3><p>基本语法: insert into {表名}({字段列表}) select * from {其他表名或本身表};</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> my_stud2 <span class="token punctuation">(</span>    stud_id <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">comment</span> <span class="token string">'主键，学生ID'</span><span class="token punctuation">,</span>    name <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span> <span class="token keyword">charset</span> utf8<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 复制到本身</span><span class="token keyword">insert</span> <span class="token keyword">into</span> my_stud <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_stud<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 复制到新表</span><span class="token keyword">insert</span> <span class="token keyword">into</span> my_stud2 <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_stud<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意: </p><ol><li>蠕虫复制可以在短期快速增加数据量，从而测试表压力，测试索引效率</li><li>注意主键冲突</li></ol><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><hr><p>在更新数据时，要特别注意，通常一定要跟随条件进行更新。而且还可以使用 limit 来限制更新数量。<br>基本语法: update {表名} set {字段名}={字段值} [where 条件] [limit {数量}];</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">update</span> my_stud <span class="token keyword">set</span> name<span class="token operator">=</span><span class="token string">'x'</span> <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'c'</span> <span class="token keyword">limit</span> <span class="token number">4</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><hr><p>删除数据时，也要特别注意，通常一定要跟随条件进行删除。而且也可以使用 limit 来限制删除数量。<br>基本语法: delete from {表名} [where 条件] [limit {数量}];</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">update</span> my_stud <span class="token keyword">set</span> name<span class="token operator">=</span><span class="token string">'x'</span> <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'c'</span> <span class="token keyword">limit</span> <span class="token number">4</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要注意: delete 删除数据时，无法重置 auto_increment。要解决这个问题，我们可以使用: truncate {表名};</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">truncate</span> my_stud<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 相当于先 drop，再 create</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><hr><p>完整的查询指令: select [select 选项] {字段列表/*} from {数据源} [where 条件] [group by 分组] [having 条件] [order by 排序] [limit 数量];</p><h3 id="Select-选项"><a href="#Select-选项" class="headerlink" title="Select 选项"></a>Select 选项</h3><p>select 选项用来确定如何对待查询返回的结果。<br>可取值为: </p><ol><li>all，默认的，保存所有返回结果</li></ol><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_stud<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>distinct，去重，只保留不重复的结果(所有字段值都相同才算重复)</li></ol><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_stud<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="字段列表"><a href="#字段列表" class="headerlink" title="字段列表"></a>字段列表</h3><p>字段我们可以取别名。<br>基本语法: {字段名} [as] {别名}</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> name <span class="token keyword">as</span> name1<span class="token punctuation">,</span> name <span class="token keyword">as</span> name2 <span class="token keyword">from</span> my_stud<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="From-数据源"><a href="#From-数据源" class="headerlink" title="From 数据源"></a>From 数据源</h3><p>数据源只要是复合二位表结构的数据即可。</p><h4 id="单表"><a href="#单表" class="headerlink" title="单表"></a>单表</h4><p>单表数据源就是表名。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_stud<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="多表"><a href="#多表" class="headerlink" title="多表"></a>多表</h4><p>基本语法: from {表名1}, {表名2}, …<br>结果为: 两表记录相乘，字段数拼接。<br>从前一张表的每条记录，去拼凑第二张表的所有记录。这种操作在数学上定义就是笛卡尔积，在实际中要避免笛卡尔积。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_int<span class="token punctuation">,</span> my_set<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="动态"><a href="#动态" class="headerlink" title="动态"></a>动态</h4><p>数据源不是一个实体表，而是从表中查询出来的二维结果表，也称为子查询。<br>基本语法: from (select [select 选项] {字段列表/*} from {数据源}) as {别名};<br>注意: 子查询必须使用括号和别名。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> int_1<span class="token punctuation">,</span> int_3 <span class="token keyword">from</span> my_int<span class="token punctuation">)</span> <span class="token keyword">as</span> int_alias<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Where-子句"><a href="#Where-子句" class="headerlink" title="Where 子句"></a>Where 子句</h3><p>用来从数据表获取数据时，进行条件筛选。</p><h3 id="Group-By-子句"><a href="#Group-By-子句" class="headerlink" title="Group By 子句"></a>Group By 子句</h3><p>根据指定字段，将数据进行分组。分组的目的就是用于统计。<br>基本语法: group by {字段名}<br>注意: MySQL 5.7 之后，默认开启 ONLY_FULL_GROUP_BY 选项提供对 group by 合法性的检查。一条 select 语句，MySQL 允许 target list 中输出的表达式是除聚集函数或 group by column 以外的表达式。否则就是非法的。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_stud <span class="token keyword">group</span> <span class="token keyword">by</span> class_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意: group by 分组之后，只会取出每组的第一条记录。</p><p>有一些聚合函数可以使用: </p><ul><li>Count(): 统计每组数量，如果统计目标是字段，那么不会统计为 null 字段。如果是 *，则统计记录。</li><li>Avg(): 取平均值</li><li>Sum(): 求和</li><li>Max(): 求最大值</li><li>Min(): 求最小值</li><li>Group_concat(): 分组之后拼接字段</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> class_id<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">from</span> my_stu <span class="token keyword">group</span> <span class="token keyword">by</span> class_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="多分组"><a href="#多分组" class="headerlink" title="多分组"></a>多分组</h4><p>按某个字段分组之后，对已分组数据再进行分组。</p><p>基本语法: group by {字段1}, {字段2}, …</p><p>先使用字段1 进行分组，分组之后再使用字段2 进行分组。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> id<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> group_concat<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">from</span> my_stud <span class="token keyword">group</span> <span class="token keyword">by</span> class_id<span class="token punctuation">,</span> gender<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="分组排序"><a href="#分组排序" class="headerlink" title="分组排序"></a>分组排序</h4><p>按分组字段排序，注意: MySQL 8.0 不再进行隐式排序。必须使用 Order by 进行排序。<br>基本语法: </p><ul><li>Mysql 8.0之前: group by {字段1} [asc/desc], {字段2} [asc/desc];</li><li>Mysql 8.0之后: group by {字段1}, {字段2}, … order by {字段a} [asc/desc], {字段b} [asc/desc], … ;</li></ul><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 8.0 之前</span><span class="token keyword">select</span> id<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> group_concat<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">from</span> my_stud <span class="token keyword">group</span> <span class="token keyword">by</span> class_id<span class="token punctuation">,</span> gender <span class="token keyword">desc</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 8.0 之后</span><span class="token keyword">select</span> id<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> group_concat<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">from</span> my_stud <span class="token keyword">group</span> <span class="token keyword">by</span> class_id<span class="token punctuation">,</span> gender <span class="token keyword">order</span> <span class="token keyword">by</span> class_id <span class="token keyword">asc</span><span class="token punctuation">,</span> gender <span class="token keyword">desc</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Having-子句"><a href="#Having-子句" class="headerlink" title="Having 子句"></a>Having 子句</h3><p>having 与 where 类似，都是进行条件筛选，但是也有不同点，having 用于 group by 子句之后，用于分组数据进行筛选。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> class_id<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> number <span class="token keyword">from</span> my_stud <span class="token keyword">group</span> <span class="token keyword">by</span> class_id <span class="token keyword">having</span> number <span class="token operator">>=</span> <span class="token number">4</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Order-By-子句"><a href="#Order-By-子句" class="headerlink" title="Order By 子句"></a>Order By 子句</h3><p>根据字段对数据进行排序。<br>基本语法: order by {字段1} [asc/desc], {字段2} [asc/desc], …</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_stud <span class="token keyword">order</span> <span class="token keyword">by</span> height <span class="token keyword">desc</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Limit-子句"><a href="#Limit-子句" class="headerlink" title="Limit 子句"></a>Limit 子句</h3><p>用来限制记录数量。</p><h4 id="记录数量限制"><a href="#记录数量限制" class="headerlink" title="记录数量限制"></a>记录数量限制</h4><p>基本语法: limit {数量};</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_stud <span class="token keyword">order</span> <span class="token keyword">by</span> height <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><p>利用 limit 限制获取指定区间的数量。<br>基本语法: limit {offset, length};</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_stud <span class="token keyword">order</span> <span class="token keyword">by</span> height <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意: limit 表示最多获取数量，如果不够，就只显示真实数量。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><hr><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>算数运算符包括: +, -, *, /, %<br>算数运算符通常用于运算结果(select 字段中)。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> int_1 <span class="token operator">+</span> int_2 <span class="token keyword">from</span> my_operator<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要注意: </p><ul><li>在 MySQL 中，除法运算结果是浮点数表示</li><li>除法中如果除数如果为 0，结果为 null</li><li>null 进行算术运算，结果都为 null</li></ul><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>关系运算符包括: &gt;, &gt;=, &lt;, &lt;=, =, &lt;&gt;<br>常用于在条件中进行结果限定。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_stud <span class="token keyword">where</span> age <span class="token operator">>=</span> <span class="token number">20</span> <span class="token keyword">order</span> <span class="token keyword">by</span> height<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意: </p><ul><li>MySQL 中数据会自动转换成相同类型，在进行比较</li><li>MySQL 中没有布尔类型，0 表示 false，1 表示 true</li></ul><p>在关系运算符中还可以使用: between and。<br>基本语法: between {条件1} and {条件2};</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_stud <span class="token keyword">where</span> age <span class="token operator">between</span> <span class="token number">20</span> <span class="token operator">and</span> <span class="token number">30</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意: between and 中条件1 必须小于条件2，否则结果为空。</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>逻辑运算符包括: and, or, not</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_stud <span class="token keyword">where</span> age <span class="token operator">>=</span> <span class="token number">20</span> <span class="token operator">and</span> age <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="In-运算符"><a href="#In-运算符" class="headerlink" title="In 运算符"></a>In 运算符</h3><p>基本语法: in (结果1, 结果2, …);</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_stud <span class="token keyword">where</span> age <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Is-运算符"><a href="#Is-运算符" class="headerlink" title="Is 运算符"></a>Is 运算符</h3><p>is 专门用来判断字段值是否为 null。<br>基本语法: is null/is not null</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_stud <span class="token keyword">where</span> name <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Like-运算符"><a href="#Like-运算符" class="headerlink" title="Like 运算符"></a>Like 运算符</h3><p>用来进行模糊匹配。<br>基本语法: like ‘模式匹配’;</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_stud <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%a%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本篇，我们说说 MySQL 对于数据的增删改查操作以及运算符。&lt;/p&gt;
&lt;h2 id=&quot;新增数据&quot;&gt;&lt;a href=&quot;#新增数据&quot; class=&quot;headerlink&quot; title=&quot;新增数据&quot;&gt;&lt;/a&gt;新增数据&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;多数据插入&quot;&gt;&lt;a hre</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/MySQL(%E4%BA%94)/"/>
    <id>https://1ess.github.io/MySQL(%E4%BA%94)/</id>
    <published>2021-07-14T03:55:19.398Z</published>
    <updated>2021-07-14T03:55:19.398Z</updated>
    
    <content type="html"><![CDATA[<p>本篇，我们说说 MySQL 中的联合查询、连接查询以及子查询。</p><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h2><hr><p>基本概念: 可合并多个相似的选择查询结果的结果集，等同于将一个表追加到另一个表，从而实现将两个表的查询结果组合到一起，使用 Union 或 Union all。<br>注意: 这个合并是纵向合并，字段数不变，多个查询的结果合并。</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol><li>同一张表的不同结果，合并到一起展示</li><li>在大数据量情况，会分表操作，会使用联合查询将数据存放到一起显示</li></ol><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>select 语句 union [all/distinct(默认)] select 语句;</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_stud <span class="token keyword">where</span> gender <span class="token operator">=</span> <span class="token string">'男'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> height <span class="token keyword">asc</span><span class="token punctuation">)</span><span class="token keyword">union</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_stud <span class="token keyword">where</span> gender <span class="token operator">=</span> <span class="token string">'女'</span> <span class="token keyword">order</span> <span class="token keyword">by</span> height <span class="token keyword">desc</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意: 如果联合查询中使用 order by，必须把该 select 语句使用括号包裹。并且 MySQL 8.0 之前，为了使 order by 生效，还必须使用 limit {大数量}</p><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><hr><p>基本概念: 将多张表连接到一起进行查询，会导致记录的行数和字段列数发生改变。</p><p>连接查询分类: </p><ol><li>交叉连接</li><li>内连接</li><li>外连接</li></ol><ul><li>左连接</li><li>右连接</li></ul><ol start="4"><li>自然连接</li></ol><h3 id="交叉连接-Cross-Join"><a href="#交叉连接-Cross-Join" class="headerlink" title="交叉连接(Cross Join)"></a>交叉连接(Cross Join)</h3><p>之前咱们说过多表查询时，就说过交叉查询的概念，只是语法不同。<br>基本语法: {表1} cross join {表2};</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_stud <span class="token keyword">cross</span> <span class="token keyword">join</span> my_operator<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="内连接-Inner-Join"><a href="#内连接-Inner-Join" class="headerlink" title="内连接(Inner Join)"></a>内连接(Inner Join)</h3><p>从一张表中取出所有的记录，去另一张表中匹配，利用匹配条件进行匹配，成功保留，失败舍去。<br>基本语法: {表1} [inner] join {表2} on {匹配条件};<br>注意: 如果内连接没有条件，则与交叉连接返回结果一样。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_stud <span class="token keyword">inner</span> <span class="token keyword">join</span> my_class <span class="token keyword">on</span> my_stud<span class="token punctuation">.</span>class_id <span class="token operator">=</span> my_class<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于表名可能很长，我们通常也使用表别名简化操作。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_stud <span class="token keyword">as</span> <span class="token number">a</span> <span class="token keyword">inner</span> <span class="token keyword">join</span> my_class <span class="token keyword">as</span> <span class="token number">b</span> <span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>class_id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意: 内连接只有匹配到的记录才会保留。</p><h3 id="外连接-Outer-Join"><a href="#外连接-Outer-Join" class="headerlink" title="外连接(Outer Join)"></a>外连接(Outer Join)</h3><p>一张表作为主表(表中记录都会保留)，根据条件去匹配另一张从表中的记录，从而得到目标数据。<br>外连接分为: </p><ul><li>左外连接(left join)，左表作为主表</li><li>右外连接(right join)，右表作为主表</li></ul><p>左连接基本语法: {主表} left join {从表} on {匹配条件};<br>右连接基本语法: {从表} right join {主表} on {匹配条件};</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_stud <span class="token keyword">as</span> s <span class="token keyword">left</span> <span class="token keyword">join</span> my_class <span class="token keyword">as</span> <span class="token number">c</span> <span class="token keyword">on</span> s<span class="token punctuation">.</span>class_id <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意: 如果从表数据都不匹配，则返回结果该条记录从表字段值都为 null。</p><h3 id="Using-关键字"><a href="#Using-关键字" class="headerlink" title="Using 关键字"></a>Using 关键字</h3><p>是在连接查询中替代 on 关键字的。<br>使用前提是两张表连接的字段是同名的，并且最终在结果只保留一个字段。</p><p>基本语法: {表1} [inner/left/right join] {表2} using({同名字段列表});</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_stud <span class="token keyword">left</span> <span class="token keyword">join</span> my_class <span class="token keyword">using</span><span class="token punctuation">(</span>class_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><hr><p>当一个查询是另一个查询的条件时，称之为子查询(Sub Query)。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>按功能来分: </p><ul><li>标量子查询: 子查询返回结果是一个数据</li><li>列子查询: 返回结果是一列</li><li>行子查询: 返回结果时一行</li><li>表子查询: 返回结果是多行多列</li><li>Exists 子查询: 返回结果是 1 或 0</li></ul><p>按位置来分: </p><ul><li>Where 子查询: 子查询语句出现在 Where 子句中</li><li>From 子查询: 子查询语句出现在 From 子句中，作为数据源</li></ul><h3 id="标量子查询"><a href="#标量子查询" class="headerlink" title="标量子查询"></a>标量子查询</h3><p>标量子查询 where 子句常使用 = 或 &lt;&gt; 操作符。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_class <span class="token keyword">as</span> <span class="token number">c</span> <span class="token keyword">where</span> <span class="token number">c</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> class_id <span class="token keyword">from</span> my_stud <span class="token keyword">as</span> s <span class="token keyword">where</span> s<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'zhangsan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="列子查询"><a href="#列子查询" class="headerlink" title="列子查询"></a>列子查询</h3><p>列子查询 where 子句常使用 in 操作符。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_class <span class="token keyword">as</span> <span class="token number">c</span> <span class="token keyword">where</span> <span class="token number">c</span><span class="token punctuation">.</span>id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> class_id <span class="token keyword">from</span> my_stud<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="行子查询"><a href="#行子查询" class="headerlink" title="行子查询"></a>行子查询</h3><p>行子查询 where 子句 = 左值要是一个构造的行元素。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_class <span class="token keyword">where</span> <span class="token punctuation">(</span>age<span class="token punctuation">,</span> height<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span> <span class="token keyword">from</span> my_stud<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="表子查询"><a href="#表子查询" class="headerlink" title="表子查询"></a>表子查询</h3><p>表子查询用于 from 数据源，之前在动态查询时已经说过。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_stud <span class="token keyword">order</span> <span class="token keyword">by</span> height <span class="token keyword">desc</span><span class="token punctuation">)</span> <span class="token keyword">as</span> order_stud <span class="token keyword">group</span> <span class="token keyword">by</span> class_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Exists-子查询"><a href="#Exists-子查询" class="headerlink" title="Exists 子查询"></a>Exists 子查询</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_class <span class="token keyword">as</span> <span class="token number">c</span> <span class="token keyword">where</span> <span class="token keyword">exists</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_stud <span class="token keyword">as</span> s <span class="token keyword">where</span> s<span class="token punctuation">.</span>class_id <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本篇，我们说说 MySQL 中的联合查询、连接查询以及子查询。&lt;/p&gt;
&lt;h2 id=&quot;联合查询&quot;&gt;&lt;a href=&quot;#联合查询&quot; class=&quot;headerlink&quot; title=&quot;联合查询&quot;&gt;&lt;/a&gt;联合查询&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;基本概念: 可合并多个相似的选择查询</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/MySQL(%E5%85%AD)/"/>
    <id>https://1ess.github.io/MySQL(%E5%85%AD)/</id>
    <published>2021-07-14T03:55:19.398Z</published>
    <updated>2021-07-14T03:55:19.398Z</updated>
    
    <content type="html"><![CDATA[<p>本篇，我们说说 MySQL 中的外键、视图以及事务安全等问题。</p><h2 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h2><hr><p>如果公共关键字在一个关系中是主关键字，那么这个公共关键字被称为另一个关系的外键。<br>以另一个关系的外键作为主关键字的表称为主表，具有此外键的表称为主表的从表，外键又称为外关键字。</p><h3 id="外键操作"><a href="#外键操作" class="headerlink" title="外键操作"></a>外键操作</h3><h4 id="增加外键"><a href="#增加外键" class="headerlink" title="增加外键"></a>增加外键</h4><p>MySQL 中提供两种方式增加外键: </p><ol><li><p>在创建表时，直接新增外键<br>基本语法: [constraint {外键名}] foregin key({外键字段}) references {主表}(主键);</p></li><li><p>在创建表后，再新增外键<br>基本语法: alter table {从表名} add [constraint {外键名}] foregin key({外键字段}) references {主表}(主键);</p></li></ol><h4 id="外键基本要求"><a href="#外键基本要求" class="headerlink" title="外键基本要求"></a>外键基本要求</h4><ol><li>外键字段需要保证与关联的主表的主键字段类型一致</li><li>基本属性也要相同</li><li>如果在表后增加外键，对数据有一定要求</li><li>外键只能使用 innodb 引擎</li></ol><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>外键约束: 通过建立外键关系之后，对主表和从表都会有一定数据约束。</p><h4 id="约束的基本概念"><a href="#约束的基本概念" class="headerlink" title="约束的基本概念"></a>约束的基本概念</h4><ol><li>当一个外键产生时，从表会受制于主表数据的存在从而导致数据不能进行某些不符合规范的操作(不能插入主表不存在的数据)</li><li>如果一个表被其他表外键引入，那么该表的数据操作就不能随意，必须保证从表数据的有效性(不能删除从表存在的数据)</li></ol><h4 id="外键约束的概念"><a href="#外键约束的概念" class="headerlink" title="外键约束的概念"></a>外键约束的概念</h4><p>可以在创建外键时，对外键约束进行选择性的操作。</p><p>基本语法: add foregin key({外键字段}) references {主表名}(主键) on {约束模式};</p><p>约束模式有三种: </p><ol><li>district，严格模式，默认，不允许操作</li><li>cascade，级联模式，一起操作变化</li><li>set null，置空模式，主表变化，从表字段置空，前提是从表该外键字段允许为空</li></ol><p>常用约束: on update cascade on delete set null;</p><h4 id="约束的作用"><a href="#约束的作用" class="headerlink" title="约束的作用"></a>约束的作用</h4><p>保证数据的完整性: 主表数据与从表数据一致。<br>但是外键很强大，但是很少使用，因为其可能会导致业务无法把握。</p><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><hr><h3 id="视图基本操作"><a href="#视图基本操作" class="headerlink" title="视图基本操作"></a>视图基本操作</h3><h4 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h4><p>视图的本质是 SQL 指令(select 语句)。<br>基本语法: create view {视图名} as select 指令</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 两表具有同名字段会有问题</span><span class="token keyword">create</span> <span class="token keyword">view</span> student_v <span class="token keyword">as</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_student <span class="token keyword">as</span> s <span class="token keyword">left</span> <span class="token keyword">join</span> my_class <span class="token keyword">as</span> <span class="token number">c</span> <span class="token keyword">on</span> s<span class="token punctuation">.</span>class_id <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>class_id<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">view</span> student_v <span class="token keyword">as</span> <span class="token keyword">select</span> s<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token number">c</span><span class="token punctuation">.</span>name <span class="token keyword">from</span> my_student <span class="token keyword">as</span> s <span class="token keyword">left</span> <span class="token keyword">join</span> my_class <span class="token keyword">as</span> <span class="token number">c</span> <span class="token keyword">on</span> s<span class="token punctuation">.</span>class_id <span class="token operator">=</span> <span class="token number">c</span><span class="token punctuation">.</span>class_id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用视图"><a href="#使用视图" class="headerlink" title="使用视图"></a>使用视图</h4><p>视图是一张虚拟表，可以把视图当作”表”来操作，但是视图本身没有数据，是临时执行 select 语句得到对应的结果。<br>基本语法: select 字段列表 from {视图名};</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student_v<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h4><p>本质是修改视图对应的查询语句。<br>基本语法: alter view {视图名} as 新 select 指令</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">view</span> student_v <span class="token keyword">as</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_student <span class="token keyword">as</span> s <span class="token keyword">left</span> <span class="token keyword">join</span> my_class <span class="token keyword">as</span> <span class="token number">c</span> <span class="token keyword">using</span><span class="token punctuation">(</span>class_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h4><p>基本语法: drop view {视图名};</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">view</span> student_v<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><hr><p>事务(Transaction)是访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。事务通常由高级数据库操纵语言或编程语言书写的用户程序的执行所引起的。<br>事务由事务开始(Begin Transaction)和事务结束(End Transaction)之间执行的全体操作组成。</p><h3 id="事务的基本原理"><a href="#事务的基本原理" class="headerlink" title="事务的基本原理"></a>事务的基本原理</h3><p>MySQL(Innodb) 允许将事务统一进行管理，将用户操作暂存，不直接操作数据表，等用户确认结果之后再进行操作。<br>事务在 MySQL 中通常是<strong>自动提交</strong>，也可以<strong>手动事务</strong>。</p><h3 id="自动事务"><a href="#自动事务" class="headerlink" title="自动事务"></a>自动事务</h3><p>自动事务(autocommit): 当客户端发送一条 SQL 指令(写操作)，给服务器时，服务器在执行之后，不用等待用户反馈结果，自动将结果同步到数据表。<br>关闭自动事务: set autocommit = off;<br>一旦关闭自动事务，就需要用户来提供是否同步的指令: </p><ol><li>Commit;: 提交(同步到数据表并清空该事务)</li><li>Rollback;: 回滚(清空该事务)</li></ol><p>执行事务端的客户端，在提供是否同步指令之前，该客户端仍可以根据日志对数据加工，返回同步之后的结果。</p><p>通常我们不关闭自动事务。</p><h3 id="手动事务"><a href="#手动事务" class="headerlink" title="手动事务"></a>手动事务</h3><h4 id="开启事务"><a href="#开启事务" class="headerlink" title="开启事务"></a>开启事务</h4><p>从该语句开始，之后的语句都不会直接写入数据库，而是保存在事务日志中。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 开启事务</span><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">-- 有的数据库使用 begin transaction;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="执行事务"><a href="#执行事务" class="headerlink" title="执行事务"></a>执行事务</h4><p>执行需要在事务中执行的 SQL 指令。</p><h4 id="提交事务或回滚"><a href="#提交事务或回滚" class="headerlink" title="提交事务或回滚"></a>提交事务或回滚</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 提交</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 回滚</span><span class="token keyword">rollback</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="回滚点-savepoint"><a href="#回滚点-savepoint" class="headerlink" title="回滚点(savepoint)"></a>回滚点(savepoint)</h4><p>当有一系列事务操作，可以设置回滚点，使得当有事务操作失败时，可以回到该位置重新开始执行。<br>基本语法: savepoint {回滚点名};</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 设置回滚点</span><span class="token keyword">savepoint</span> sp1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 回到回滚点</span><span class="token keyword">rollback</span> sp1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事务特点"><a href="#事务特点" class="headerlink" title="事务特点"></a>事务特点</h3><p>事务具有四个特性(ACID): </p><ol><li>原子性(Atomicity): 事务被视为不可分割的最小单元，事务的所有操作要么全部提交成功，要么全部失败回滚</li><li>一致性(Consistency): 数据库在事务执行前后都保持一致性状态。在一致性状态下，所有事务对一个数据的读取结果都是相同的</li><li>隔离性(Isolation): 一个事务所做的修改在最终提交以前，对其它事务是不可见的</li><li>持久性(Durability): 一旦事务提交，则其所做的修改将会永远保存到数据库中。即使系统发生崩溃，事务执行的结果也不能丢失</li></ol><p><img src="https://cdn.jsdelivr.net/gh/1ess/cdn/contentImg/mysql/mysql1.jpg"></p><p>事务的 ACID 特性概念简单，但不是很好理解，主要是因为这几个特性不是一种平级关系: </p><ul><li>只有满足一致性，事务的执行结果才是正确的</li><li>在无并发的情况下，事务串行执行，隔离性一定能够满足。此时只要能满足原子性，就一定能满足一致性</li><li>在并发的情况下，多个事务并行执行，事务不仅要满足原子性，还需要满足隔离性，才能满足一致性</li><li>事务满足持久化是为了能应对数据库崩溃的情况</li></ul><h3 id="并发一致性问题"><a href="#并发一致性问题" class="headerlink" title="并发一致性问题"></a>并发一致性问题</h3><p>在并发环境下，事务的隔离性很难保证，因此会出现很多并发一致性问题。产生并发不一致性问题主要原因是破坏了事务的隔离性，解决方法是通过并发控制来保证隔离性。并发控制可以通过封锁来实现，但是封锁操作需要用户自己控制，相当复杂。数据库管理系统提供了事务的隔离级别，让用户以一种更轻松的方式处理并发一致性问题。</p><h3 id="封锁"><a href="#封锁" class="headerlink" title="封锁"></a>封锁</h3><h4 id="封锁粒度"><a href="#封锁粒度" class="headerlink" title="封锁粒度"></a>封锁粒度</h4><p>MySQL 中提供了两种封锁粒度: </p><ul><li>行级锁</li><li>表级锁</li></ul><p>应该尽量只锁定需要修改的那部分数据，而不是所有的资源。锁定的数据量越少，发生锁争用的可能就越小，系统的并发程度就越高。<br>但是加锁需要消耗资源，锁的各种操作(包括获取锁、释放锁、以及检查锁状态)都会增加系统开销。因此封锁粒度越小，系统开销就越大。<br>在选择封锁粒度时，需要在锁开销和并发程度之间做一个权衡。</p><h4 id="封锁类型"><a href="#封锁类型" class="headerlink" title="封锁类型"></a>封锁类型</h4><h5 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h5><ul><li>排它锁(Exclusive)，简写为 X 锁，又称写锁</li><li>共享锁(Shared)，简写为 S 锁，又称读锁</li></ul><p>有以下两个规定: </p><ul><li>一个事务对数据对象 A 加了 X 锁，就可以对 A 进行读取和更新。加锁期间其它事务不能对 A 加任何锁</li><li>一个事务对数据对象 A 加了 S 锁，可以对 A 进行读取操作，但是不能进行更新操作。加锁期间其它事务能对 A 加 S 锁，但是不能加 X 锁</li></ul><h5 id="意向锁"><a href="#意向锁" class="headerlink" title="意向锁"></a>意向锁</h5><p>使用意向锁(Intention Locks)可以更容易地支持多粒度封锁。<br>在存在行级锁和表级锁的情况下，事务 T 想要对表 A 加 X 锁，就需要先检测是否有其它事务对表 A 或者表 A 中的任意一行加了锁，那么就需要对表 A 的每一行都检测一次，这是非常耗时的。</p><p>意向锁在原来的 X/S 锁之上引入了 IX/IS，IX/IS 都是表锁，用来表示一个事务想要在表中的某个数据行上加 X 锁或 S 锁。有以下两个规定: </p><ul><li>一个事务在获得某个数据行对象的 S 锁之前，必须先获得表的 IS 锁或者更强的锁</li><li>一个事务在获得某个数据行对象的 X 锁之前，必须先获得表的 IX 锁</li></ul><p>通过引入意向锁，事务 T 想要对表 A 加 X 锁，只需要先检测是否有其它事务对表 A 加了 X/IX/S/IS 锁，如果加了就表示有其它事务正在使用这个表或者表中某一行的锁，因此事务 T 加 X 锁失败。</p><h4 id="封锁协议"><a href="#封锁协议" class="headerlink" title="封锁协议"></a>封锁协议</h4><ol><li>一级封锁协议: 事务 T 要修改数据 A 时必须加 X 锁，直到 T 结束才释放锁。可以解决丢失修改问题，因为不能同时有两个事务对同一个数据进行修改，那么事务的修改就不会被覆盖</li><li>二级封锁协议: 在一级的基础上，要求读取数据 A 时必须加 S 锁，读取完马上释放 S 锁。可以解决读脏数据问题，因为如果一个事务在对数据 A 进行修改，根据 1 级封锁协议，会加 X 锁，那么就不能再加 S 锁了，也就是不会读入数据</li><li>三级封锁协议: 在二级的基础上，要求读取数据 A 时必须加 S 锁，直到事务结束了才能释放 S 锁。可以解决不可重复读的问题，因为读 A 时，其它事务不能对 A 加 X 锁，从而避免了在读的期间数据发生改变</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本篇，我们说说 MySQL 中的外键、视图以及事务安全等问题。&lt;/p&gt;
&lt;h2 id=&quot;外键&quot;&gt;&lt;a href=&quot;#外键&quot; class=&quot;headerlink&quot; title=&quot;外键&quot;&gt;&lt;/a&gt;外键&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;如果公共关键字在一个关系中是主关键字，那么这个公共关</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/MySQL(%E4%B8%83)/"/>
    <id>https://1ess.github.io/MySQL(%E4%B8%83)/</id>
    <published>2021-07-14T03:55:19.398Z</published>
    <updated>2021-07-14T03:55:19.398Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是 MySQL 的最后一篇，我们最后讲讲变量、函数、存储过程和触发器。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><hr><p>MySQL 需要很多变量来保存数据。</p><h3 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h3><p>系统内部定义的变量，系统变量针对所有用户有效。</p><h4 id="查看系统变量"><a href="#查看系统变量" class="headerlink" title="查看系统变量"></a>查看系统变量</h4><p>基本语法: show variables [{模式匹配}];</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'autocommit'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看系统变量实际值"><a href="#查看系统变量实际值" class="headerlink" title="查看系统变量实际值"></a>查看系统变量实际值</h4><p>基本语法: select @@{变量名};</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> @<span class="token variable">@autocommit</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="修改系统变量"><a href="#修改系统变量" class="headerlink" title="修改系统变量"></a>修改系统变量</h4><h5 id="局部修改"><a href="#局部修改" class="headerlink" title="局部修改"></a>局部修改</h5><p>只针对当前客户端的本次连接。<br>基本语法: set {变量名} = {新变量值};</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> autocommit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="全局修改"><a href="#全局修改" class="headerlink" title="全局修改"></a>全局修改</h5><p>针对”所有”客户端”所有”时刻。<br>基本语法: set global {变量名} = {新变量值}; 或者 set @@global.{变量名} = {新变量值};</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">global</span> autocommit <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 或者</span><span class="token keyword">set</span> @<span class="token variable">@global.autocommit</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意: 全局修改只针对新客户端有效。</p><h3 id="会话变量"><a href="#会话变量" class="headerlink" title="会话变量"></a>会话变量</h3><p>会话变量又称为用户变量，只针对当前用户使用的当前客户端有效。</p><h4 id="定义用户变量"><a href="#定义用户变量" class="headerlink" title="定义用户变量"></a>定义用户变量</h4><p>基本语法: set @{变量名} = {变量值};</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token variable">@name</span> :<span class="token operator">=</span> <span class="token string">'Hello world'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意: 使用 := 是因为 MySQL 中 = 还有比较的含义，为了避免搞混，可以使用 := 来进行赋值操作。</p><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>局部变量使用 declare 关键字声明，并且出现在 begin 和 end 语句之间。<br>基本语法: declare {变量名} {数据类型};</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><hr><p>所有函数都是使用: select 函数名(参数列表);</p><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ul><li>char_length(): 判断字符数</li><li>length(): 判断字节数(与字符集有关)</li><li>concat(): 连接字符串</li><li>instr(): 判断字符在目标字符串中是否存在，存在返回位置(从 1 开始)，不存在返回 0</li><li>lcase(): 全部小写</li><li>left(): 从左侧开始截取到指定位置字符串</li><li>ltrim(): 清除左侧空格</li><li>mid(): 从指定位置开始截取字符串到最后</li></ul><h4 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h4><ul><li>now(): 返回当前时间，日期和时间</li><li>curdate(): 返回当前日期</li><li>curtime(): 返回当前时间</li><li>datediff(): 判断两日期天数差距</li><li>date_add(): 进行时间增加</li><li>unix_timestamp(): 获取时间戳(10 位)</li><li>from_unixtime(): 从时间戳转为日期时间</li></ul><h4 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h4><ul><li>abs(): 绝对值</li><li>ceiling(): 向上取整</li><li>floor(): 向下取整</li><li>pow(): 求指数</li><li>rand(): 取随机数</li><li>round(): 四舍五入</li></ul><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p>简称过程(procedure)，是一组为了完成特定功能的 SQL 语句集。并且在一次编译之后无需再次编译，效率较高。</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="创建过程"><a href="#创建过程" class="headerlink" title="创建过程"></a>创建过程</h4><p>基本语法:<br>create procedure {过程名}([参数列表])<br> begin<br>  {过程体}<br> end<br>{结束符};</p><p>如果过程体中只有一条语句，可以省略 begin 和 end。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> my_proc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_student<span class="token punctuation">;</span><span class="token keyword">delimiter</span> $$<span class="token keyword">create</span> <span class="token keyword">procedure</span> my_proc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>    <span class="token keyword">declare</span> i <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">set</span> <span class="token variable">@sum</span> :<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span> <span class="token keyword">do</span>     <span class="token keyword">set</span> <span class="token variable">@sum</span> <span class="token operator">=</span> <span class="token variable">@sum</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>     <span class="token keyword">set</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span>     <span class="token keyword">select</span> <span class="token variable">@sum</span><span class="token punctuation">;</span><span class="token keyword">end</span>$$<span class="token keyword">delimiter</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看过程"><a href="#查看过程" class="headerlink" title="查看过程"></a>查看过程</h4><p>基本语法: show procedure stutas;</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">procedure</span> stutas<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="调用过程"><a href="#调用过程" class="headerlink" title="调用过程"></a>调用过程</h4><p>基本语法: call {过程名}([参数列表]);</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">call</span> my_proc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="删除过程"><a href="#删除过程" class="headerlink" title="删除过程"></a>删除过程</h4><p>基本语法: drop procedure {过程名};</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">procedure</span> my_proc<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><hr><p>触发器(trigger)是一种特殊类型的存储过程。触发器通过事件触发而被执行。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol><li>在写入数据表之前，强制检验或转换数据</li><li>触发器发生错误，异动的结果会被撤销</li></ol><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li>优点</li></ul><ol><li>可以实现表的级联更改</li></ol><ul><li>缺点</li></ul><ol><li>对触发器过分依赖，会影响数据库结构，增加维护的复杂程度</li><li>造成数据在程序层面不可控</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本篇是 MySQL 的最后一篇，我们最后讲讲变量、函数、存储过程和触发器。&lt;/p&gt;
&lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;MySQL 需要很多变量来保存数据。&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/%E4%B9%9D%E4%B9%9D%E5%BD%92%E4%B8%80/"/>
    <id>https://1ess.github.io/%E4%B9%9D%E4%B9%9D%E5%BD%92%E4%B8%80/</id>
    <published>2021-07-14T03:55:19.398Z</published>
    <updated>2021-07-14T03:55:19.398Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Two things are infinite: the universe and human stupidity; and I’m not sure about the universe.</p></blockquote><p>最近离职了，说不上为什么，就是有一种感觉不能再这样下去了，我不想单纯的经历”吃饭-上班-吃饭-睡觉”这样浑浑噩噩的日子。我希望可以做些什么，我希望可以用我的技术、经验来为这个世界做些什么。</p><p>我一直信奉一句话，种一棵树最好的时间是十年前，其次是现在。很多人劝我年后离职等等，但是我不想也不愿意等，想做的事情我希望立马去做。也正好可以趁这段时间多想想多看看。</p><p><img src="https://cdn.jsdelivr.net/gh/1ess/cdn/contentImg/other/other4.jpg"></p><p><sub>在辞职之后的三天零五小时八分钟，我又路过了景江西路，只是这一次，没有下车。</sub></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Two things are infinite: the universe and human stupidity; and I’m not sure about the universe.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近离职了，说</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/C#(%E4%B8%80)/"/>
    <id>https://1ess.github.io/C#(%E4%B8%80)/</id>
    <published>2021-07-14T03:55:19.394Z</published>
    <updated>2021-07-14T03:55:19.394Z</updated>
    
    <content type="html"><![CDATA[<p>之前本来想学习一下 NodeJS，考虑到最近一直在使用 C#(主要使用 .Net Core 的 MVC 和 API)，并且之前也仔细地研究过一段时间的 C#，.Net 平台的发展也有上升趋势，最近微软收购 Github，打算整合自己的平台，还有 Visual Studio 这一个宇宙第一 IDE 加持，所以就打算把后台技术栈先放在 .Net 上。<br>目前的打算是将 C# 的知识都过一遍，再逐渐学习一些常用类库，最后把 ASP.Net Core MVC 和 API 都好好看看。<br>这次我打算边复习边将 C# 中的概念与其他语言做一下对比，以方便有其他语言基础的同学可以更好地理解在 C# 中的相似概念。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><hr><p>要注意在使用 .Net 进行开发时，我们要知道 Solution 和 Project 的区别: </p><ul><li>Solution 是针对需求的一个总的解决方案</li><li>Project 则用来解决具体的某个问题</li></ul><h3 id="各类-C-可编写的程序"><a href="#各类-C-可编写的程序" class="headerlink" title="各类 C# 可编写的程序"></a>各类 C# 可编写的程序</h3><ul><li>Console</li><li>WinForm(old)</li><li>WPF</li><li>WebForm(old)</li><li>WebMVC</li><li>WCF</li><li>WF</li><li>UWP</li></ul><p>我们可以使用 C# 写出上述各种类型的应用，有的已经过时了，现在主流使用技术是: WebMVC、WebAPI 以及 WCF。</p><h3 id="类型和命名空间"><a href="#类型和命名空间" class="headerlink" title="类型和命名空间"></a>类型和命名空间</h3><p>C# 程序的本质是由多个类型声明组成。命名空间则是与某个名称相关联的一组类型声明。(在写 Objective-C 或者 Swift 时，是没有命名空间的概念，所以官方给出的最佳实践是使用前缀的方式来区分不同类型。)</p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>C# 中标识符规则: </p><ul><li>字母和下划线可以出现在任意位置</li><li>数字可以放在除了首位的任意位置</li><li>@字符只可以出现在首位，但不推荐</li></ul><p>C# 语言的标识符是大小写敏感的，这一点跟 Objective-C，Swift，JavaScript 都一样。</p><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><p>C# 中的语句必须以分号作为结束标志。<br>块是由成对的大括号包围的 0 条或多条语句序列，在语法上，相当于一条语句。</p><ul><li>在语法上只需要一条语句，而一条语句无法表达时，就需要使用块</li><li>某些特定的程序结构只能使用块</li><li>虽然简单语句以号结尾，但块后面不跟分号(这样会多解析一条空语句)</li></ul><h3 id="字符串插值"><a href="#字符串插值" class="headerlink" title="字符串插值"></a>字符串插值</h3><p>新版 C# 可以使用字符串插值，类似 JavaScript 中的字符串插值: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">var</span> str <span class="token operator">=</span> $<span class="token string">"a + b= &amp;#123;a + b&amp;#125;"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>C# 允许三种注释: </p><ul><li>单行注释 //</li><li>多行注释 /**/</li><li>文档注释 ///</li></ul><h2 id="类型，存储和变量"><a href="#类型，存储和变量" class="headerlink" title="类型，存储和变量"></a>类型，存储和变量</h2><hr><p>如果要描述程序代码特征的话，我们可以说 C 程序就是一组函数和数据类型，C++ 程序就是一组函数和类，而 C# 则是一组类型声明。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">namespace</span> MyProgram<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    DeclarationOfTypeA    DeclarationOfTypeB    <span class="token keyword">class</span> <span class="token class-name">C</span>     <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类型是一种模板"><a href="#类型是一种模板" class="headerlink" title="类型是一种模板"></a>类型是一种模板</h3><p>我们学习 C#，其实就是学习如何创建和使用类型，所以我们需要了解什么是类型。<br>我们可以把类型想象成创建数据结构的模板，模板本身不是数据结构，但可以描述由改模板构造的对象特征。<br>类型由下面元素定义: </p><ul><li>名称</li><li>保存数据成员的结构</li><li>一些行为和约束</li></ul><p>比如，int 类型: </p><ul><li>名称: int</li><li>结构: 4 字节</li><li>行为: 32 位整数</li></ul><h3 id="实例化类型"><a href="#实例化类型" class="headerlink" title="实例化类型"></a>实例化类型</h3><p>从模板创建实际对象的过程，就称为实例化该类型。</p><ul><li>通过实例化类型创建的对象，可以称为对象，也可以称为实例</li><li>C# 中，每个数据项都是某种类型的实例</li></ul><h3 id="数据成员和函数成员"><a href="#数据成员和函数成员" class="headerlink" title="数据成员和函数成员"></a>数据成员和函数成员</h3><p>像 short，long 等这样的类型称为简单类型，只能存储一个数据项。</p><p>其他的类型可以存储多个数据项，如数组类型就可以存储多个相同类型的数据项。这些数据项称为数组元素，通过索引来获取每个数组元素。C# 数组这一特征与 Objective-C 相同，与 JavaScript 的特征不同。</p><p>然而，另外一些类型可以包含不同类型的数据项，这些类型中的数据项个体称为 <strong>成员</strong>。<br>有两种成员: </p><ul><li>数据成员</li><li>函数成员</li></ul><h3 id="预定义类型"><a href="#预定义类型" class="headerlink" title="预定义类型"></a>预定义类型</h3><p>C# 提供了 16 种预定义类型，包括 13 种简单类型和 3 种非简单类型。<br>所有预定义类型由全小写字母组成，预定义的简单类型包括以下 3 种: </p><ul><li>11 种数值类型: <ol><li>不同长度的有符号和无符号整数类型</li><li>浮点数类型: float 和 double</li><li>高精度小数类型: decimal</li></ol></li><li>1 种 Unicode 字符类型: char</li><li>1 种布尔类型: bool</li></ul><p>与 Objective-C 或 JavaScript 不同，C# 中的数值类型不具有布尔含义。</p><p>3 种非简单类型: </p><ul><li>string: Unicode 字符数组</li><li>object: 所有其他类型的基类</li><li>dynamic</li></ul><p>注意: 在 C# 程序中，应使用小写的 C# 类型名称而不是大写的 .Net 类型名称。</p><h3 id="用户定义类型"><a href="#用户定义类型" class="headerlink" title="用户定义类型"></a>用户定义类型</h3><p>有 6 种类型可以由用户自己创建: </p><ul><li>class 类型</li><li>struct 类型</li><li>array 类型</li><li>enum 类型</li><li>delegate 类型</li><li>interface 类型</li></ul><p>类型通过类型声明创建，类型声明包含以下信息: </p><ul><li>要创建的类型种类</li><li>新类型名称</li><li>对每个成员的声明(array 和 delegate 除外，他们没有命名成员)</li></ul><p>一旦声明了类型，就可以像预定义类型一样使用了。</p><p>预定义类型已经由系统创建好了，我们直接使用即可，而用户定义类型，我们使用前需要先进行声明，再使用。</p><h3 id="值类型和引用类型"><a href="#值类型和引用类型" class="headerlink" title="值类型和引用类型"></a>值类型和引用类型</h3><p>对于非成员数据的存储(如函数中的局部变量): </p><ul><li>值类型存储于栈内存</li><li>引用类型的 <strong>数据部分</strong> 存储于堆内存，<strong>引用部分</strong> 存放在栈内存</li></ul><p>对于成员数据，存储有些不同: </p><ul><li>引用类型的 <strong>数据部分</strong> 始终存放在堆内存</li><li>值类型的对象，或者引用类型的 <strong>引用部分</strong>，可能存储在栈内存，也可能存储在堆内存，取决于执行环境</li></ul><h3 id="C-类型分类"><a href="#C-类型分类" class="headerlink" title="C# 类型分类"></a>C# 类型分类</h3><ul><li>预定义类型: 对于简单类型都是值类型，非简单类型都是引用类型</li><li>用户定义类型: struct 和 enum 类型是值类型，其他 4 种是引用类型</li></ul><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>C# 提供了 4 中变量: </p><ul><li>本地变量</li><li>字段</li><li>参数</li><li>数组元素</li></ul><p>变量在使用前必须声明。变量声明完成了两件事: </p><ul><li>给变量命名，并关联了一种类型</li><li>让编译器为它分配了一块内存</li></ul><p>我们还可以直接在声明时初始化变量。<br>一些类型的变量如果在声明时没有初始化，那么会被自动设置为默认值。<br>注意: 本地变量和参数不会被自动初始化，类字段，结构字段和数组元素会被自动初始化。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前本来想学习一下 NodeJS，考虑到最近一直在使用 C#(主要使用 .Net Core 的 MVC 和 API)，并且之前也仔细地研究过一段时间的 C#，.Net 平台的发展也有上升趋势，最近微软收购 Github，打算整合自己的平台，还有 Visual Studio </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/C#(%E4%BA%8C)/"/>
    <id>https://1ess.github.io/C#(%E4%BA%8C)/</id>
    <published>2021-07-14T03:55:19.394Z</published>
    <updated>2021-07-14T03:55:19.394Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇，我们看看 C# 中的类有哪些特殊的概念。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><hr><p>上一篇，我们说过用户定义类型有 6 种，其中最重要的就是类类型，类是面向对象的基础。<br>程序的数据和功能被组织为逻辑上相关的数据项和函数的封装集合就称为类(class)。<br>类是一种能存储数据并执行代码的数据结构，包含数据成员和函数成员。<br>数据成员包括: </p><ul><li>字段</li><li>常量</li></ul><p>函数成员包括: </p><ul><li>方法</li><li>属性</li><li>构造函数</li><li>析构函数</li><li>运算符</li><li>索引器</li><li>事件</li></ul><h2 id="声明类-类定义"><a href="#声明类-类定义" class="headerlink" title="声明类(类定义)"></a>声明类(类定义)</h2><hr><p>类的声明提供以下内容: </p><ul><li>类的名称</li><li>类的成员</li><li>类的特征</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//成员声明</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h3><p>字段是属于类的变量，可以被写入和读取。与 Objective-C 和 JavaScript 不同，所有字段都属于类型，必须在内部声明，也就是说没有全局变量的概念。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> MyField<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>之前也说过字段是可以被自动初始化的，每种类型的默认值都是 0，bool 类型为 false，引用类型为 null。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>方法是可执行的代码块。方法声明包括以下组成部分: </p><ul><li>返回值类型，如果没有返回值，则指定为 void</li><li>方法名</li><li>参数列表，至少是一个空圆括号</li><li>方法体，包裹在一对大括号之间</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">MyFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类的实例"><a href="#类的实例" class="headerlink" title="类的实例"></a>类的实例</h3><p>与 JavaScript 类似，使用 new 操作符实例化一个对象。</p><pre class="line-numbers language-csharp"><code class="language-csharp">MyClass mc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>类中的成员可分为: </p><ul><li>实例成员</li><li>静态成员</li></ul><h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><p>访问修饰符是可选部分，放在简单声明之前。<br>5 种成员访问控制如下: </p><ul><li>private</li><li>public</li><li>protected</li><li>internal</li><li>protected internal</li></ul><p>私有访问只能从声明他的类内访问，<strong>私有访问是默认的访问级别</strong>。</p><h3 id="类内类外访问成员"><a href="#类内类外访问成员" class="headerlink" title="类内类外访问成员"></a>类内类外访问成员</h3><p>在类内可以直接使用成员名来访问成员，而要从类外访问实例成员，必须使用点运算符访问。</p><h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2><hr><p>C# 方法体是一个块，包含以下项目: </p><ul><li>本地变量</li><li>控制流结构</li><li>方法调用</li><li>内嵌块</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="本地变量"><a href="#本地变量" class="headerlink" title="本地变量"></a>本地变量</h3><p>字段保存的是与类或对象有关的数据，本地变量保存临时信息。<br>本地变量的生命周期从声明的那一刻开始存在，在块完成执行时结束存在。<br>并且本地变量是没有隐式初始化的，所以在使用之前没有显示初始化的话，编译器会产生错误信息。</p><p>在声明本地变量时可以使用 var 关键字，条件是: </p><ul><li>只能用于本地变量，不能用于字段</li><li>只能用于声明时包含初始化的语句</li><li>一旦编译器推断出类型，他就是固定且不能更改的</li></ul><p>注意: C# 中的 var 与 JavaScript 中的不同。</p><h3 id="本地常量"><a href="#本地常量" class="headerlink" title="本地常量"></a>本地常量</h3><p>本地常量和本地变量类似，只是本地常量一旦初始化，他的值就不能更改: </p><ul><li>本地常量在声明时必须初始化</li><li>常量在声明之后不能更改</li><li>声明时，在类型之前加 const 关键字</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">void</span> <span class="token function">DisplayRadii</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.1416</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><hr><h3 id="形参"><a href="#形参" class="headerlink" title="形参"></a>形参</h3><p>形参是本地变量，它声明在方法的参数列表中，而不是函数体中。</p><h3 id="实参"><a href="#实参" class="headerlink" title="实参"></a>实参</h3><p>用于初始化形参的表达式或变量称为实参(argument)。<br>实参的数量必须与形参的数量一致，并且每个实参的类型也必须与对应的形参类型一致。这种形式的参数称为<strong>位置参数</strong>。</p><h3 id="值参数"><a href="#值参数" class="headerlink" title="值参数"></a>值参数</h3><p>通过将实参的值复制到形参的方式，将数据传递给方法，就称为值参数。<br>使用值参数方法被调用时，系统做如下操作: </p><ul><li>在栈中为形参分配空间</li><li>将实参的值复制给形参</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> Val <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">MyMethod</span><span class="token punctuation">(</span>MyClass f1<span class="token punctuation">,</span> <span class="token keyword">int</span> f2<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        f1<span class="token punctuation">.</span>Val <span class="token operator">=</span> f1<span class="token punctuation">.</span>Val <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>        f2 <span class="token operator">=</span> f2 <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">iteLine</span><span class="token punctuation">(</span><span class="token string">"f1: &amp;#123;0&amp;#125;, f2: &amp;#123;1&amp;#125;"</span><span class="token punctuation">,</span> f1<span class="token punctuation">.</span>Val<span class="token punctuation">,</span> f2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> cls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token function">MyMethod</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 25, 15</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"f1: &amp;#123;0&amp;#125;, f2: &amp;#123;1&amp;#125;"</span><span class="token punctuation">,</span> cls<span class="token punctuation">.</span>Val<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 25, 10</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="引用参数"><a href="#引用参数" class="headerlink" title="引用参数"></a>引用参数</h3><ul><li>在使用引用参数时，在方法声明以及调用时，都要在参数前使用 ref 关键字</li><li>实参必须是变量</li></ul><p>引用参数有如下特征: </p><ul><li>不会为形参在栈上分配空间</li><li>实际情况是，形参的参数名将作为实参的别名，指向相同的内存位置</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> Val <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">MyMethod</span><span class="token punctuation">(</span><span class="token keyword">ref</span> MyClass f1<span class="token punctuation">,</span> <span class="token keyword">ref</span> <span class="token keyword">int</span> f2<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        f1<span class="token punctuation">.</span>Val <span class="token operator">=</span> f1<span class="token punctuation">.</span>Val <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>        f2 <span class="token operator">=</span> f2 <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">iteLine</span><span class="token punctuation">(</span><span class="token string">"f1: &amp;#123;0&amp;#125;, f2: &amp;#123;1&amp;#125;"</span><span class="token punctuation">,</span> f1<span class="token punctuation">.</span>Val<span class="token punctuation">,</span> f2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> cls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token function">MyMethod</span><span class="token punctuation">(</span><span class="token keyword">ref</span> cls<span class="token punctuation">,</span> <span class="token keyword">ref</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 25, 15</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"f1: &amp;#123;0&amp;#125;, f2: &amp;#123;1&amp;#125;"</span><span class="token punctuation">,</span> cls<span class="token punctuation">.</span>Val<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 25, 15</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们要注意引用类型作为值参数和引用参数的不同，他们都可以改变成员的值，但是当在方法内给这个引用重新赋值就不同了: </p><ul><li>当是值参数时，会切断与实参的联系</li><li>当是引用参数时，会改变实参的指向</li></ul><h3 id="输出参数"><a href="#输出参数" class="headerlink" title="输出参数"></a>输出参数</h3><p>输出参数用于从方法体内把数据传递到调用的代码，如同引用参数，输出参数有如下要求: </p><ul><li>必须在声明和调用时同时使用 out 关键字</li><li>实参必须是变量</li><li>在方法内部，输出参数在能被读取之前必须被赋值，这意味着，参数初始值是无用的，没必要在调用输出参数方法时给输出参数初始化</li><li>在方法返回之前，所有路径都必须已经给输出参数进行过一次赋值</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> Val <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">MyMethod</span><span class="token punctuation">(</span><span class="token keyword">out</span> MyClass f1<span class="token punctuation">,</span> <span class="token keyword">out</span> <span class="token keyword">int</span> f2<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">iteLine</span><span class="token punctuation">(</span><span class="token string">"f1: &amp;#123;0&amp;#125;, f2: &amp;#123;1&amp;#125;"</span><span class="token punctuation">,</span> f1<span class="token punctuation">.</span>Val<span class="token punctuation">,</span> f2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        MyClass cls<span class="token punctuation">;</span>        <span class="token keyword">int</span> a<span class="token punctuation">;</span>        <span class="token function">MyMethod</span><span class="token punctuation">(</span><span class="token keyword">out</span> cls<span class="token punctuation">,</span> <span class="token keyword">out</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20, 10</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"f1: &amp;#123;0&amp;#125;, f2: &amp;#123;1&amp;#125;"</span><span class="token punctuation">,</span> cls<span class="token punctuation">.</span>Val<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 20, 10</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参数数组"><a href="#参数数组" class="headerlink" title="参数数组"></a>参数数组</h3><p>参数数组允许零个或多个实参对应一个特殊的形参。参数数组的特征如下: </p><ul><li>在一个参数列表中只能有一个参数数组</li><li>如果有，必须位于参数列表的最后一个</li><li>参数数组中的所有参数必须具有相同类型</li><li>在声明时使用 param 修饰符，并在类型后加 []</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">void</span> <span class="token function">ListInts</span><span class="token punctuation">(</span>param <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intVals<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>有两种方式为参数数组提供实参: </p><ul><li>用逗号分隔的该类型元素的列表(延展式)</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token function">ListInts</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>一个该数据类型的一维数组</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">ListInts</span><span class="token punctuation">(</span>intArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意: 与之前三种参数不同，参数数组不用在调用时使用 params 修饰符。</p><p>当使用延展式调用参数数组函数时，编译器会接受实参列表，并在堆中初始化一个数组，将数组的引用保存到栈中的形参里。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ListInts</span><span class="token punctuation">(</span><span class="token keyword">params</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intVals<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>intVals <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> intVals<span class="token punctuation">.</span>Length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> intVals<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                intVals<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> intVals<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;0&amp;#125;"</span><span class="token punctuation">,</span> intVals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> first <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> second <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> third <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> cls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cls<span class="token punctuation">.</span><span class="token function">ListInts</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> third<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//50, 60, 70</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;0&amp;#125;, &amp;#123;1&amp;#125;, &amp;#123;2&amp;#125;"</span><span class="token punctuation">,</span> first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> third<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//5, 6, 7</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当使用数组作为实参时，编译器直接使用你的数组而不重新创建。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ListInts</span><span class="token punctuation">(</span><span class="token keyword">params</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intVals<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>intVals <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> intVals<span class="token punctuation">.</span>Length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> intVals<span class="token punctuation">.</span>Length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                intVals<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> intVals<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>                Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;0&amp;#125;"</span><span class="token punctuation">,</span> intVals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> cls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cls<span class="token punctuation">.</span><span class="token function">ListInts</span><span class="token punctuation">(</span>intArray<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//50, 60, 70</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;0&amp;#125;, &amp;#123;1&amp;#125;, &amp;#123;2&amp;#125;"</span><span class="token punctuation">,</span> intArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> intArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> intArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//50, 60, 70</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法重载-method-overload"><a href="#方法重载-method-overload" class="headerlink" title="方法重载(method overload)"></a>方法重载(method overload)</h3><p>一个类中可以有一个以上的方法具有相同的名称，这就叫做方法重载。<br>但是每个同名的方法必须有不同的方法签名。<br>方法签名由如下信息组成: </p><ul><li>方法名</li><li>参数数目</li><li>参数类型和顺序</li><li>参数的修饰符</li></ul><p>注意: 返回值类型和参数名不是方法签名的一部分。<br>也要注意与继承概念中的方法重写(method override)的区别</p><h3 id="命名参数"><a href="#命名参数" class="headerlink" title="命名参数"></a>命名参数</h3><p>之前我们讲的都是位置参数，此外 C# 还允许使用命名参数。<br>在调用方法时，形参名后跟冒号和实参: </p><pre class="line-numbers language-csharp"><code class="language-csharp">c<span class="token punctuation">.</span><span class="token function">Calc</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方法在调用时，可以既有位置参数又有命名参数，如果这么做，所有的位置参数必须先列出。<br>与 Swift 中的函数调用很相似。</p><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><p>C# 还允许可选参数，我们需要在函数声明时在可选参数中指定默认值: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">Calc</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">Calc</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法声明中参数的语法顺序: 必填参数 - 可选参数 - 参数数组</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇，我们看看 C# 中的类有哪些特殊的概念。&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;上一篇，我们说过用户定义类型有 6 种，其中最重要的就是类类型，类</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/C#(%E4%B8%89)/"/>
    <id>https://1ess.github.io/C#(%E4%B8%89)/</id>
    <published>2021-07-14T03:55:19.394Z</published>
    <updated>2021-07-14T03:55:19.394Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇，我们深入理解一下 C# 中的类。</p><h2 id="类的成员"><a href="#类的成员" class="headerlink" title="类的成员"></a>类的成员</h2><hr><p>上篇我们说过了 2 个类成员: 字段和方法。这一篇我们介绍除了事件和运算符之外的成员。</p><h3 id="成员修饰符的顺序"><a href="#成员修饰符的顺序" class="headerlink" title="成员修饰符的顺序"></a>成员修饰符的顺序</h3><p>成员声明语句有下列部分组成: 核心声明，可选的修饰符和可选的特性(attribute)。<br>[特性] [修饰符] 核心声明;<br>我们之前说过的 public 和 private 都是修饰符，还有 static 和 const 也都是修饰符。</p><h3 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h3><p>成员可以关联到一个类的实例，也可以关联到类的整体，默认情况下，成员被关联到一个实例，这些成员称为实例成员。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">var</span> cls1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">var</span> cls2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         cls1<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>         cls2<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;0&amp;#125;  --  &amp;#123;1&amp;#125;"</span><span class="token punctuation">,</span> cls1<span class="token punctuation">.</span>a<span class="token punctuation">,</span> cls2<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 10 -- 20</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><p>除了实例成员，类还可以拥有静态成员。静态成员被所有实例共享，访问内存同一位置，使用 static 修饰符将成员声明为静态。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> Mem1<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> Mem2<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">var</span> cls1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">var</span> cls2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         cls1<span class="token punctuation">.</span>Mem1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>         MyClass<span class="token punctuation">.</span>Mem2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>         cls2<span class="token punctuation">.</span>Mem1 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>         MyClass<span class="token punctuation">.</span>Mem2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;0&amp;#125;  --  &amp;#123;1&amp;#125;"</span><span class="token punctuation">,</span> cls1<span class="token punctuation">.</span>Mem1 <span class="token punctuation">,</span> cls2<span class="token punctuation">.</span>Mem1 <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 10 -- 20</span>         Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>MyClass<span class="token punctuation">.</span>Mem2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类外访问静态成员"><a href="#类外访问静态成员" class="headerlink" title="类外访问静态成员"></a>类外访问静态成员</h3><p>与实例成员一样在类外使用点运算符来访问静态成员，只不过是使用类名来访问。<br>静态函数成员不能访问实例成员，他们可以访问其他静态成员。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">X</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> A<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">PrintA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//可以在静态方法访问静态字段</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了<strong>常量</strong>和<strong>索引器</strong>，其他成员都可以是静态成员。</p><h3 id="成员常量"><a href="#成员常量" class="headerlink" title="成员常量"></a>成员常量</h3><p>如同本地常量一样，只是成员常量被声明在类中: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> IntVal <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>成员常量表现得很像静态值，他们对每个实例都是可见的，但是他们没有自己的存储位置，只是在编译期被替换。类似于 C 语言的 #define。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">const</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.14156</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>MyClass<span class="token punctuation">.</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 3.14156</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意: 虽然成员常量表现得像静态量，但是不能使用 static 修饰符修饰。</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>C# 中的属性非常像 Swift 中的计算属性。他们在使用时非常像字段，但是和字段不同的是，他们是函数成员，可以执行代码。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">int</span> MyVal <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">get</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//get</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">set</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//set</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>set 访问器拥有一个隐式的名为 value 的值参数，与属性类型相同，返回值为 void。<br>get 访问器没有参数，有一个与属性相同类型的返回值。<br>我们要注意: 属性本身没有任何存储，通常要有一个关联字段作为存储。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">int</span> _intVal<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">int</span> IntVal<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">set</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        _intVal <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">get</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> _intVal<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们还可以设置只读属性(只有 get 方法)或者只写属性(只有 set 方法)，但是两个访问器至少要定义一个，否则编译器会报错。<br>C# 还提供了自动属性实现，不需要提供关联字段，也不需要提供访问器的方法体，get 和 set 后直接跟分号。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> IntVal <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>属性也可以被声明为静态，与静态字段一样，使用类名访问静态属性。</p><h3 id="实例构造函数"><a href="#实例构造函数" class="headerlink" title="实例构造函数"></a>实例构造函数</h3><p>构造函数是一个特殊的方法，他在创建类实例时执行，用于初始化实例状态。通常声明为 public。<br>它的特点是: </p><ul><li>构造函数没有返回值</li><li>构造函数名称与类名相同</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//...</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造函数也可以被重载，带有不同的参数: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Class1</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> Id<span class="token punctuation">;</span>    <span class="token keyword">string</span> Name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Class1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> Name<span class="token operator">=</span><span class="token string">"1ess"</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Class1</span><span class="token punctuation">(</span><span class="token keyword">int</span> Id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Id <span class="token operator">=</span> Id<span class="token punctuation">;</span> Name<span class="token operator">=</span><span class="token string">"1ess"</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Class1</span><span class="token punctuation">(</span><span class="token keyword">string</span> Name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Name<span class="token operator">=</span>Name<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们没有为类提供构造函数，那么编译器会隐式提供一个无参构造函数，方法体为空。<br>如果我们显示提供了一个构造函数，那么就不会为我们创建一个隐式的无参构造函数。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Class2</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> Id<span class="token punctuation">;</span>    <span class="token keyword">string</span> Name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Class2</span><span class="token punctuation">(</span><span class="token keyword">int</span> Id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Id <span class="token operator">=</span> Id<span class="token punctuation">;</span> Name<span class="token operator">=</span><span class="token string">"1ess"</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Class2</span><span class="token punctuation">(</span><span class="token keyword">string</span> Name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> Id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Name<span class="token operator">=</span>Name<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Class2 cls2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 错误，编译器不会再隐式提供无参构造函数</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="静态构造函数"><a href="#静态构造函数" class="headerlink" title="静态构造函数"></a>静态构造函数</h3><p>这一点与很多语言不同，构造函数也可以是静态的，用来初始化静态成员。调用时机是: </p><ul><li>在引用任何静态成员之前</li><li>在创建类的任何实例之前</li></ul><p>静态构造函数的特点是: </p><ul><li>名称必须与类名相同</li><li>不能有返回值</li><li>只能有一个静态构造函数</li><li>不能有参数</li><li>不能有访问修饰符</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Class1</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token function">Class1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行静态成员初始化</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在静态构造函数不能访问实例成员，我们也不能显示的调用静态构造函数。</p><h3 id="对象初始化语句"><a href="#对象初始化语句" class="headerlink" title="对象初始化语句"></a>对象初始化语句</h3><p>对象初始化语句扩展创建语法，在表达式的尾部放置一组成员初始化语句，允许我们在创建实例时，设置字段和属性值。<br>该语法有两种形式: </p><ul><li>包括构造函数的参数列表</li><li>不包括构造函数的参数列表</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">new</span> <span class="token class-name">TypeName</span><span class="token punctuation">(</span>ArgList<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> FieldOrProp <span class="token operator">=</span> InitVal<span class="token punctuation">,</span> FieldOrProp <span class="token operator">=</span> InitVal<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">TypeName</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> FieldOrProp <span class="token operator">=</span> InitVal<span class="token punctuation">,</span> FieldOrProp <span class="token operator">=</span> InitVal<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>要注意: 初始化列表中的字段和属性都是可访问的(public)，并且<strong>初始化语句执行于构造方法之后</strong>。</p><h3 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h3><p>this 是对当前实例的引用，只能被用于: </p><ul><li>实例构造方法</li><li>实例方法</li><li>属性和索引器的实例访问器</li></ul><p>this 的目的用于区分成员和本地变量: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Class1</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Say</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span>     <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//....</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不推荐参数和字段同名。</p><h3 id="分部类和分部类型"><a href="#分部类和分部类型" class="headerlink" title="分部类和分部类型"></a>分部类和分部类型</h3><p>类的声明可以分割成几个分部类声明: </p><ul><li>每个分部类都含有一些类成员声明</li><li>每个局部声明必须标记为 partial class</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了分部类，还有分部结构和分部接口，我们之后说。</p><h3 id="分部方法"><a href="#分部方法" class="headerlink" title="分部方法"></a>分部方法</h3><p>分部方法是声明在分部类的不同部分的方法。<br>分部方法两部分如下: </p><ul><li>分部方法的声明</li><li>分部方法的实现</li></ul><p>分部方法的特征: </p><ul><li>声明部分和实现部分的返回值和方法签名必须一致，并且，返回值必须是 void</li><li>不能有访问修饰符修饰，也就是分部方法隐式私有</li><li>不能有输出参数</li><li>方法声明和方法实现之前要有 partial 修饰</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">MyClass1</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">partial</span> <span class="token keyword">void</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">PrintSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">Add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">MyClass1</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">partial</span> <span class="token keyword">void</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"a + b = &amp;#123;a + b&amp;#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> cls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cls<span class="token punctuation">.</span><span class="token function">PrintSum</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 11</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇，我们深入理解一下 C# 中的类。&lt;/p&gt;
&lt;h2 id=&quot;类的成员&quot;&gt;&lt;a href=&quot;#类的成员&quot; class=&quot;headerlink&quot; title=&quot;类的成员&quot;&gt;&lt;/a&gt;类的成员&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;上篇我们说过了 2 个类成员: 字段和方法。这一篇我们介绍</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/C#(%E5%9B%9B)/"/>
    <id>https://1ess.github.io/C#(%E5%9B%9B)/</id>
    <published>2021-07-14T03:55:19.394Z</published>
    <updated>2021-07-14T03:55:19.394Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇，我们讲讲 C# 中关于继承的相关知识。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><hr><p>通过继承我们可以定义新的派生类(derived class)，来对基类(base class)进行扩展。<br>派生类的成员包括: </p><ul><li>本身声明的成员</li><li>基类的成员</li></ul><p>注意: 派生类不能删除它所继承的任何成员。</p><p>要声明一个派生类，需要在类名后跟一个冒号，然后跟基类名。与 Objective-C 的继承声明相同。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">DerivedClass</span> <span class="token punctuation">:</span> BaseClass<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>继承的成员可以被访问，就像他们是派生类本身声明的一样: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">SomeClass</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">string</span> Field1 <span class="token operator">=</span> <span class="token string">"base class field"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Method1</span><span class="token punctuation">(</span><span class="token keyword">string</span> <span class="token keyword">value</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Base class -- Method1:    &amp;#123;0&amp;#125;"</span><span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">OtherClass</span> <span class="token punctuation">:</span> SomeClass<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">string</span> Field2 <span class="token operator">=</span> <span class="token string">"derived class"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Method2</span><span class="token punctuation">(</span><span class="token keyword">string</span> <span class="token keyword">value</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"Derived class -- Method2:    &amp;#123;0&amp;#125;"</span><span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        OtherClass oc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OtherClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oc<span class="token punctuation">.</span><span class="token function">Method1</span><span class="token punctuation">(</span>oc<span class="token punctuation">.</span>Field1<span class="token punctuation">)</span><span class="token punctuation">;</span>        oc<span class="token punctuation">.</span><span class="token function">Method1</span><span class="token punctuation">(</span>oc<span class="token punctuation">.</span>Field2<span class="token punctuation">)</span><span class="token punctuation">;</span>                oc<span class="token punctuation">.</span><span class="token function">Method2</span><span class="token punctuation">(</span>oc<span class="token punctuation">.</span>Field1<span class="token punctuation">)</span><span class="token punctuation">;</span>        oc<span class="token punctuation">.</span><span class="token function">Method2</span><span class="token punctuation">(</span>oc<span class="token punctuation">.</span>Field2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了 object，所有的类都是派生类，object 是唯一的非派生类，他是继承层次结构的基础。<br>没有基类声明的类隐式直接派生自 object 类。<br>C# 中的继承是单继承，与 Objective-C、JavaScript 一样。<br>通常我们称一个类为派生类时，我们是说他直接派生自某个类而不是 object。</p><h3 id="屏蔽基类成员"><a href="#屏蔽基类成员" class="headerlink" title="屏蔽基类成员"></a>屏蔽基类成员</h3><p>我们虽然不能删除基类的任何成员，但是我们可以使用与基类名相同名称的成员来屏蔽基类成员。<br>在派生类屏蔽基类成员的要点如下: </p><ul><li>要屏蔽一个数据成员，需要声明一个新的相同类型的同名成员</li><li>要屏蔽一个函数成员，需要在派生类中声明带有相同签名的函数成员</li><li>要然编译器知道我们故意屏蔽基类成员，需要使用 new 修饰符。否则屏蔽成员会报警告</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">SomeClass</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">string</span> Field1 <span class="token operator">=</span> <span class="token string">"SomeClass Field1"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Method1</span><span class="token punctuation">(</span><span class="token keyword">string</span> <span class="token keyword">value</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"SomeClass.Method1: &amp;#123;0&amp;#125;"</span><span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">OtherClass</span> <span class="token punctuation">:</span> SomeClass<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">public</span> <span class="token keyword">string</span> Field1 <span class="token operator">=</span> <span class="token string">"OtherClass Field1"</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">public</span> <span class="token keyword">void</span> <span class="token function">Method1</span><span class="token punctuation">(</span><span class="token keyword">string</span> <span class="token keyword">value</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"OtherClass.Method1: &amp;#123;0&amp;#125;"</span><span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        OtherClass oc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OtherClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oc<span class="token punctuation">.</span><span class="token function">Method1</span><span class="token punctuation">(</span>oc<span class="token punctuation">.</span>Field1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//OtherClass.Method1: OtherClass Field1</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基类访问"><a href="#基类访问" class="headerlink" title="基类访问"></a>基类访问</h3><p>如果要在派生类中需要访问被屏蔽的成员，可以使用基类访问表达式来访问隐藏的成员。<br>基类访问表达式由关键字 base 后跟点操作符加要访问的成员: </p><pre class="line-numbers language-csharp"><code class="language-csharp">Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"&amp;#123;0&amp;#125;"</span><span class="token punctuation">,</span> <span class="token keyword">base</span><span class="token punctuation">.</span>Field1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果程序需要经常使用这个特性，可能需要重新设计了。</p><h3 id="使用基类的引用"><a href="#使用基类的引用" class="headerlink" title="使用基类的引用"></a>使用基类的引用</h3><p>派生类的引用指向整个类结构，包括基类部分。<br>如果有一个派生类引用，我们就可以获取对象基类部分的引用(使用类型转换): </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">BaseClass</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This is base class method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">DerivedClass</span> <span class="token punctuation">:</span> BaseClass<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">public</span> <span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This is derived class method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        DerivedClass dc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DerivedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BaseClass bc <span class="token operator">=</span> <span class="token punctuation">(</span>BaseClass<span class="token punctuation">)</span>dc<span class="token punctuation">;</span>        dc<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// derived class print</span>        bc<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// base class print</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过类型转换而来的”基类”，不能”看”到派生类的部分。</p><h3 id="虚方法和覆写方法"><a href="#虚方法和覆写方法" class="headerlink" title="虚方法和覆写方法"></a>虚方法和覆写方法</h3><p>虚方法可以使基类的引用访问”提升”至派生类，只需满足如下条件: </p><ul><li>派生类的方法和基类的方法的签名和返回值都一致</li><li>基类方法使用 virtual 标注</li><li>派生类方法使用 override 标注</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">BaseClass</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This is base class method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">DerivedClass</span> <span class="token punctuation">:</span> BaseClass<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"This is derived class method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        DerivedClass dc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DerivedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BaseClass bc <span class="token operator">=</span> <span class="token punctuation">(</span>BaseClass<span class="token punctuation">)</span>dc<span class="token punctuation">;</span>        dc<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// derived class print</span>        bc<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// derived class print</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于 virtual 和 override 修饰符的重要信息如下: </p><ul><li>覆写和被覆写的方法必须具有相同的访问性</li><li>不能覆写 static 方法和非虚方法</li><li>方法、属性、索引器和事件可以被声明为 virtual 和 override</li></ul><p>覆写方法可以在继承的任何层次出现，方法的调用会沿着派生层次一直追溯到标记为 override 的最高派生类。</p><p>注意: Objective-C 没有虚方法的概念，Objective-C 中所有的方法都是虚方法: </p><pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token keyword">@interface</span> Animal<span class="token punctuation">:</span> NSObject<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>sing<span class="token punctuation">;</span><span class="token keyword">@implementation</span> Animal<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>sing <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@"animal sing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">@interface</span> Dog<span class="token punctuation">:</span> Animal<span class="token keyword">@implementation</span> Dog<span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>sing <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@"dog sing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>main <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Dog <span class="token operator">*</span>dog <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>Dog alloc<span class="token punctuation">]</span> init<span class="token punctuation">]</span><span class="token punctuation">;</span>    Animal <span class="token operator">*</span>animal <span class="token operator">=</span> dog<span class="token punctuation">;</span>    <span class="token punctuation">[</span>dog sing<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//"dog sing"</span>    <span class="token punctuation">[</span>animal sing<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"dog sing"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>虚方法是面向对象中多态的基础，多态性又叫动态绑定、推迟绑定或运行期绑定。是允许你将父对象设置成为一个或更多的它的子对象相等的技术，赋值之后，父对象就可以根据当前赋值给它的子对象的特性以不同的方式运作。</strong></p><h3 id="构造函数的执行"><a href="#构造函数的执行" class="headerlink" title="构造函数的执行"></a>构造函数的执行</h3><p>派生类对象有一部分就是基类对象: </p><ul><li>要创建对象的基类部分，需要隐式的调用基类的某个构造函数作为实例创建的一部分</li><li>每个类在执行自己的构造函数之前要执行基类的构造函数</li></ul><p><strong>默认情况，构造对象时，将调用基类的无参构造函数</strong>，如果希望派生类调用的是有参构造的话，就需要构造函数初始化语句。<br>有两种形式的构造函数初始化语句: </p><ul><li>使用 base 并指明使用哪一个基类的构造函数</li><li>使用 this 并指明使用哪一个当前类的构造函数</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> MyDerivedClass<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyDerivedClass</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">string</span> s<span class="token punctuation">)</span>     <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> s<span class="token punctuation">)</span>     <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//...</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外，我们可以需要在构造函数中使用当前类的其他构造: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">readonly</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">readonly</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">string</span> FirstName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">string</span> LastName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token keyword">string</span> firstName<span class="token punctuation">)</span>     <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        FirstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//...</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token keyword">string</span> lastName<span class="token punctuation">)</span>     <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        LastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//...</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类的访问修饰符"><a href="#类的访问修饰符" class="headerlink" title="类的访问修饰符"></a>类的访问修饰符</h3><p>类的可访问修饰符有两种: public 和 internal: </p><ul><li>标记为 public 的类可以被系统内任何程序集访问</li><li>标记为 internal 的类只能被该类所在的程序集访问</li></ul><p>注意: internal 是类的默认访问级别。</p><h3 id="成员的访问修饰符"><a href="#成员的访问修饰符" class="headerlink" title="成员的访问修饰符"></a>成员的访问修饰符</h3><p>成员的默认的访问级别是 private，并且成员不能比他的类有更高的可访问性。</p><ul><li>private 成员只能被他自己的类访问，不能被其他类访问，包括继承的类。但能被嵌套在他的类中的类访问</li><li>protected 成员访问级别与 private 一样，只是它允许派生自他的类访问该成员</li><li>internal 成员只对程序集内部可见</li><li>protected internal 成员对所有继承自他的类可以访问，也可以对他所在的程序集可访问(注意是并集而不是交集)</li></ul><h3 id="抽象成员和抽象类"><a href="#抽象成员和抽象类" class="headerlink" title="抽象成员和抽象类"></a>抽象成员和抽象类</h3><p>抽象成员是指被设计为被覆写的函数成员，有以下特征: </p><ul><li>必须是函数成员</li><li>必须是由 abstract 修饰符修饰</li><li>没有方法实现代码块</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>抽象成员只能在抽象类中声明，一共有 4 中类型的成员可以声明为抽象: </p><ul><li>方法</li><li>属性</li><li>事件</li><li>索引</li></ul><p>派生类重写抽象成员要是有 override 标记: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"override abstract method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>抽象类就是被设计为被继承的类，抽象类只能作为其他类的基类: </p><ul><li>我们不能创建抽象类的实例</li><li>抽象类也使用 abstract 修饰符修饰</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">MyAbstractClass</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意: </p><ul><li>抽象类中可以有非抽象成员</li><li>抽象类可以派生自其他抽象类</li><li>任何派生自抽象类的类必须实现所有抽象成员，除非她本身也是派生类</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ClassA</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ClassB</span> <span class="token punctuation">:</span> ClassA<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="密封类"><a href="#密封类" class="headerlink" title="密封类"></a>密封类</h3><p>密封类与抽象类相反，他不能被继承，使用 sealed 修饰。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">MySealedClass</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="静态类"><a href="#静态类" class="headerlink" title="静态类"></a>静态类</h3><ul><li>静态类中所有成员都是静态的</li><li>静态类被标记为 static</li><li>静态类是隐式密封的，也就是说，他不能被继承</li><li>它可以有一个静态构造函数，但不能有实例构造函数</li></ul><h3 id="扩展方法"><a href="#扩展方法" class="headerlink" title="扩展方法"></a>扩展方法</h3><p>如果我们不能修改某个类的源文件，而希望给该类添加方法，可以使用扩展方法: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//必须是静态类</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ExtendMyClass</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//必须声明为 public 和 static 方法，参数传入要扩展的类的实例，并且前面加 this 关键字</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">Avg</span><span class="token punctuation">(</span><span class="token keyword">this</span> MyBaseClass bc<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C-命名约定"><a href="#C-命名约定" class="headerlink" title="C# 命名约定"></a>C# 命名约定</h3><ul><li>帕斯卡命名: 命名空间、类名、方法、属性和公共字段</li><li>驼峰命名: 私有变量和形参</li><li>下划线加驼峰: 私有和受保护字段</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇，我们讲讲 C# 中关于继承的相关知识。&lt;/p&gt;
&lt;h2 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;通过继承我们可以定义新的派生类(derived class)，来对基</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/C#(%E4%BA%94)/"/>
    <id>https://1ess.github.io/C#(%E4%BA%94)/</id>
    <published>2021-07-14T03:55:19.394Z</published>
    <updated>2021-07-14T03:55:19.394Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇，我们讲讲 C# 中的表达式和运算符。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><hr><p>运算符(操作符)是一个符号，表示返回单个结果的操作。<br>一个操作符: </p><ul><li>将操作数作为输入</li><li>执行某个操作</li><li>基于该操作返回一个值</li></ul><p>可以作为操作数的结构有: </p><ul><li>字面量</li><li>常量</li><li>变量</li><li>方法调用</li><li>元素访问器</li><li>其他表达式</li></ul><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p>C# 中字面量有: </p><ul><li>整数字面量: 1024</li><li>双精度浮点数字面量: 3.1415</li><li>单精度浮点数字面量: 3.1415F</li><li>布尔值字面量: true，false</li><li>字符字面量: ‘x’</li><li>字符串字面量: “Hi 1ess”</li><li>空引用字面量: null</li></ul><p>根据不同后缀，每个常数能被编译成不同的整数类型: </p><ul><li>后缀 L，被编译成长整型</li><li>后缀 U，被编译成无符号整型</li></ul><p>整型字面量还可以写成十六进制形式，以 0x 或 0X 开头。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">int</span> KernelPanic <span class="token operator">=</span> <span class="token number">0x12131992</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>与其它语言一样，C# 有加，减，乘，除，取余5种运算符。</p><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>与其它语言一样，C# 有大于、大于等于、小于、小于等于、等于、不等于 6 种关系运算符。<br>需要注意的是: 与 Objective-C 和 JavaScript 中不同，C# 的数字不具有布尔含义。<br>对于比较相等时，除了 string 和 delegate 类型的比较是深比较，其他引用类型的比较都是浅比较，只要指向堆中的对象是同一个对象就相等。</p><h3 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h3><p>与其它语言一样，也分为前自增和后自增，前自增先增加 1，在返回新值，后自增先返回原值，再增加 1。</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>分为逻辑与，逻辑或和逻辑非。与其它语言一样，逻辑运算符也有<strong>短路特性</strong>。</p><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>有位与、位或、位异或、位非、左移和右移操作符。</p><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>分为简单赋值和复合赋值运算符。</p><h3 id="条件运算符-三目运算符"><a href="#条件运算符-三目运算符" class="headerlink" title="条件运算符(三目运算符)"></a>条件运算符(三目运算符)</h3><p>与其它语言一样，三目运算符是基于条件返回两个值中的一个。</p><h3 id="用户定义类型转换"><a href="#用户定义类型转换" class="headerlink" title="用户定义类型转换"></a>用户定义类型转换</h3><p>类型转换我们之后会详细说，这里我们说一下他作为运算符有哪些特点。<br>我们可以为自己的类或者结构定义隐式转换和显式转换: </p><ul><li>对于隐式转换，编译器会自动执行转换</li><li>对于显式转换，编译器只有在使用显式转换运算符时才会转换</li></ul><p>声明隐式转换的语法: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//一定要有 public static</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">implicit</span> <span class="token keyword">operator</span> <span class="token function">TargetType</span><span class="token punctuation">(</span>SourceType Identifier<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>显式转换的语法一样，只是把 implicit 换成 explicit: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">LimitInt</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> TheValue <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">implicit</span> <span class="token keyword">operator</span> <span class="token keyword">int</span><span class="token punctuation">(</span>Limit li<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> li<span class="token punctuation">.</span>TheValue<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">implicit</span> <span class="token keyword">operator</span> <span class="token function">LimitInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        LimitInt li <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LimitInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        li<span class="token punctuation">.</span>TheValue <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">return</span> li<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        LimitInt li <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>        Int a <span class="token operator">=</span> li<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们声明的是显式转换运算符，那么我们就不得不使用强制类型转换: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">LimitInt</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> TheValue <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">explicit</span> <span class="token keyword">operator</span> <span class="token keyword">int</span><span class="token punctuation">(</span>Limit li<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> li<span class="token punctuation">.</span>TheValue<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">explicit</span> <span class="token keyword">operator</span> <span class="token function">LimitInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        LimitInt li <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LimitInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        li<span class="token punctuation">.</span>TheValue <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">return</span> li<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        LimitInt li <span class="token operator">=</span> <span class="token punctuation">(</span>LimitInt<span class="token punctuation">)</span><span class="token number">500</span><span class="token punctuation">;</span>        Int a <span class="token operator">=</span> <span class="token punctuation">(</span>Int<span class="token punctuation">)</span>li<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="typeof-运算符"><a href="#typeof-运算符" class="headerlink" title="typeof 运算符"></a>typeof 运算符</h3><p>typeof 运算符返回作为其参数的任何类型的 System.Type 对象。</p><pre class="line-numbers language-csharp"><code class="language-csharp">Type t <span class="token operator">=</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>SomeClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>GetType 方法也会调用 typeof 运算符。</p><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><hr><p>我们只介绍一下 C# 中比较特殊的语句。<br>C# 中 switch 语句比较特殊的地方在于: 每个 case 语句必须有控制跳转语句如 break，return 等，除非两个 case 语句中没有任何可执行语句: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">switch</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">//...</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//正确</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">//...</span>    <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">//...</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//错误</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以使用 foreach 遍历数组中的元素，就像 Objective-C 中的 forin 一样。</p><p>对于某些非托管对象，有数量限制或很耗费系统资源，在使用完成之后，应该尽快释放他们，我们就应使用 using 语句简化该过程确保资源被适当处置(dispose)。<br><strong>资源是指实现了 System.IDisposable 接口的类或结构。</strong></p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//先分配资源，在使用资源</span><span class="token keyword">using</span> <span class="token punctuation">(</span>ResourceType Identifier <span class="token operator">=</span> Expression<span class="token punctuation">)</span> Statement<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇，我们讲讲 C# 中的表达式和运算符。&lt;/p&gt;
&lt;h2 id=&quot;运算符&quot;&gt;&lt;a href=&quot;#运算符&quot; class=&quot;headerlink&quot; title=&quot;运算符&quot;&gt;&lt;/a&gt;运算符&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;运算符(操作符)是一个符号，表示返回单个结果的操作。&lt;br&gt;一</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/C#(%E5%85%AD)/"/>
    <id>https://1ess.github.io/C#(%E5%85%AD)/</id>
    <published>2021-07-14T03:55:19.394Z</published>
    <updated>2021-07-14T03:55:19.394Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇，讲讲 C# 中的结构体类型和枚举类型。</p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><hr><p>结构与类类似，都是用户定义类型，都有数据成员和函数成员，但有两个最大的区别: </p><ul><li>类是引用类型而结构是值类型</li><li>结构是隐式密封的</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp">strcut StructName<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    MemberDeclarations<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结构是值类型"><a href="#结构是值类型" class="headerlink" title="结构是值类型"></a>结构是值类型</h3><p>因此: </p><ul><li>结构类型的变量不能为 null</li><li>两个结构不能引用同一对象</li></ul><p>把一个结构赋值给另一个结构，就是将这个结构的值复制给另一个结构。需要注意与类的赋值的不同。</p><p>结构允许有实例构造函数和静态构造函数，但不允许有析构函数。</p><p>与类一样，编译器隐式的为结构提供一个无参构造，这个构造将每个成员设置为该类型的默认值。与类不同的是，这个无参构造函数不能被重定义，我们只能创建另外的有参构造，而不能重写无参构造，并且我们提供了有参构造，编译器提供给我们的无参构造依然存在。</p><p>我们也用 new 操作符调用构造函数，即使不从堆中分配内存。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">struct</span> Point<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> X<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> Y<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Point p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//...</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们也可以不使用构造来创建结构的实例，但有一些限制: </p><ul><li>显式设置数据成员之后，才可以使用这些成员的值</li><li>对所有的数据成员赋值之后，才能调用任何函数成员</li></ul><p>结构的字段是不允许有初始化语句的。</p><p>之前说了，结构是隐式密封的，因此 protected，internal，abstruct，virtual 修饰符不可使用。</p><p>与 Swift 类似，C# 中的简单预定义类型在实现方式上是使用结构类型。所以可以调用一些方法，如: 所有类型都有的 GetType 方法。<br>另外说一句: JavaScript 中的简单类型如 string 也可以调用方法，他们是在使用值时被临时包装成一个对象。</p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><hr><p>枚举只有一个类型的成员: 命名的整数值常量。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">enum</span> TrafficLight<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Yellow<span class="token punctuation">,</span>    Green<span class="token punctuation">,</span>    Red<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>枚举的底层都是一个整数类型，默认是 int。<br>默认情况编译器把第一个值赋值为 0，之后的成员加 1。<br>我们把枚举值赋值成枚举对象: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    TrafficLight yellow <span class="token operator">=</span> TrafficLight<span class="token punctuation">.</span>Yellow<span class="token punctuation">;</span>    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>yellow<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//Yellow 打印成员名</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们也可以显式的设置每个枚举成员的值和类型: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">enum</span> TrafficLight<span class="token punctuation">:</span> <span class="token keyword">uint</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Yellow <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">,</span>    Green <span class="token operator">=</span>  <span class="token number">20</span><span class="token punctuation">,</span>    Red <span class="token operator">=</span> <span class="token number">20</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="位标记"><a href="#位标记" class="headerlink" title="位标记"></a>位标记</h3><p>我们使用 Flags 特性实现位标记: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token punctuation">[</span>Flags<span class="token punctuation">]</span><span class="token keyword">enum</span> Setting <span class="token punctuation">:</span> <span class="token keyword">uint</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    A <span class="token operator">=</span> <span class="token number">0x0001</span><span class="token punctuation">,</span>    B <span class="token operator">=</span> <span class="token number">0x0010</span><span class="token punctuation">,</span>    C <span class="token operator">=</span> <span class="token number">0x0100</span><span class="token punctuation">,</span>    D <span class="token operator">=</span> <span class="token number">0x1000</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Setting opts <span class="token operator">=</span> Setting<span class="token punctuation">.</span>A <span class="token operator">|</span> Setting<span class="token punctuation">.</span>B <span class="token operator">|</span> Setting<span class="token punctuation">.</span>C<span class="token punctuation">;</span>opts<span class="token punctuation">.</span><span class="token function">HasFlags</span><span class="token punctuation">(</span>Setting<span class="token punctuation">.</span>D<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C# 中的枚举与 Objective-C 的实现 NS_ENUM 和 NS_OPTIONS 类似。</p><p>注意: 枚举是一个独特的类型，比较不同类型的枚举对象会导致编译错误，即使他们的底层都是整数。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇，讲讲 C# 中的结构体类型和枚举类型。&lt;/p&gt;
&lt;h2 id=&quot;结构&quot;&gt;&lt;a href=&quot;#结构&quot; class=&quot;headerlink&quot; title=&quot;结构&quot;&gt;&lt;/a&gt;结构&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;结构与类类似，都是用户定义类型，都有数据成员和函数成员，但有两个最大</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/C#(%E4%B8%83)/"/>
    <id>https://1ess.github.io/C#(%E4%B8%83)/</id>
    <published>2021-07-14T03:55:19.394Z</published>
    <updated>2021-07-14T03:55:19.394Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇，我们讲讲 C# 中的数组对象及其协变概念。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><hr><p>数组是由变量名表示的一组同类型的数据元素，每个元素可以通过索引来访问。</p><p>C# 数组的特点: </p><ul><li>C# 不支持动态数组，也就是数组一旦创建，就不可以更改大小</li><li>索引从 0 开始</li></ul><h3 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h3><p>C# 支持一维数组和多维数组，多维数组又分为矩形数组和交错数组。</p><h3 id="数组是对象"><a href="#数组是对象" class="headerlink" title="数组是对象"></a>数组是对象</h3><p>数组实例是从 System.Array 继承来的对象，继承了很多属性和方法: </p><ul><li>Rank 属性，返回数组的维数</li><li>Length 属性，返回数组的长度</li></ul><p>注意: 数组是引用类型，数组元素可以是值类型也可以是引用类型，这一点与 Ocjective-C 不同，Ocjective-C 中的数组元素不能是基本类型。</p><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><p>我们可以在类型和变量名之间加中括号来声明一维数组: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要实例化一维数组，我们使用数组创建表达式，使用 new 操作符，后跟基类名称和中括号，中括号里要有数组长度: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要访问数组元素，要使用索引: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> intVal <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="初始化数组"><a href="#初始化数组" class="headerlink" title="初始化数组"></a>初始化数组</h3><p>当数组创建后，每个元素会自动初始化默认值: </p><ul><li>整型: 0</li><li>浮点数: 0.0</li><li>布尔型: false</li><li>对象: null</li></ul><p>我们还可以使用初始化列表显式初始化数组元素: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当在一条语句声明并初始化数组时，可以使用快捷语法: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们可以使用 foreach 语句遍历数组元素: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> array<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...item</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组的协变"><a href="#数组的协变" class="headerlink" title="数组的协变"></a>数组的协变</h3><p>协变和逆变我们之后说泛型的时候会细讲，这里我们只是提一下数组中的协变。<br>协变是指: 即使某个对象不是数组的基类型，我们也可以把他赋值给数组元素。以下情况可以使用数组协变: </p><ul><li>数组是引用类型数组</li><li>赋值类型和数组基类类型存在显式或隐式转换</li></ul><p>由于基类和派生类总存在隐式转换，因此我们可以把派生类对象赋值给基类型数组元素: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">:</span> A <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        A<span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇，我们讲讲 C# 中的数组对象及其协变概念。&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;数组是由变量名表示的一组同类型的数据元素，每个元素可以通过索引来</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/C#(%E5%85%AB)/"/>
    <id>https://1ess.github.io/C#(%E5%85%AB)/</id>
    <published>2021-07-14T03:55:19.394Z</published>
    <updated>2021-07-14T03:55:19.394Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇，我们讲讲 C# 中特殊的委托(delegate)。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><hr><p>委托和类一样，都是用户定义类型。类表示数据和方法的集和，而委托则是持有一个或多个方法，以及一系列预定义操作。</p><p>我们通过以下步骤来使用委托: </p><ul><li>声明一个委托，委托的声明看上去和方法声明类似，只是没有实现块</li><li>使用委托类型声明一个委托变量</li><li>创建委托类型的变量，赋值为委托变量，这个委托类型变量指向方法的引用，这个方法和委托定义的签名和返回值类型一样</li><li>可以为委托对象增加其他方法</li><li>可以像调用方法一样调用委托，调用委托时，其包含的每一个方法都会被执行</li></ul><h3 id="声明委托"><a href="#声明委托" class="headerlink" title="声明委托"></a>声明委托</h3><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">delegate</span> <span class="token keyword">void</span> <span class="token function">MyDel</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建委托对象"><a href="#创建委托对象" class="headerlink" title="创建委托对象"></a>创建委托对象</h3><p>有两种方式创建委托对象: </p><ul><li>第一种是使用 new 操作符的创建表达式，参数是调用列表第一个方法的名字</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp">delVal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyDel</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>MyM1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//实例方法</span>dVal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyDel</span><span class="token punctuation">(</span>SClass<span class="token punctuation">.</span>OtherM2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//静态方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>我们还可以使用快捷语法，直接赋值为方法名即可</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp">delVal <span class="token operator">=</span> instance<span class="token punctuation">.</span>MyM1<span class="token punctuation">;</span>dVal <span class="token operator">=</span> SClass<span class="token punctuation">.</span>OtherM2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="为委托增加方法"><a href="#为委托增加方法" class="headerlink" title="为委托增加方法"></a>为委托增加方法</h3><p>我们使用 += 操作符为委托增加方法。</p><pre class="line-numbers language-csharp"><code class="language-csharp">MyDel  del <span class="token operator">=</span> inst<span class="token punctuation">.</span>M1<span class="token punctuation">;</span>del <span class="token operator">+</span><span class="token operator">=</span> SCl<span class="token punctuation">.</span>M3<span class="token punctuation">;</span>del <span class="token operator">+</span><span class="token operator">=</span> X<span class="token punctuation">.</span>Act<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>同样使用 -= 从委托移除方法。</p><h3 id="调用委托"><a href="#调用委托" class="headerlink" title="调用委托"></a>调用委托</h3><p>我们可以像调用方法一样调用委托: </p><pre class="line-numbers language-csharp"><code class="language-csharp">MyDel  del <span class="token operator">=</span> inst<span class="token punctuation">.</span>M1<span class="token punctuation">;</span>del <span class="token operator">+</span><span class="token operator">=</span> SCl<span class="token punctuation">.</span>M3<span class="token punctuation">;</span>del <span class="token operator">+</span><span class="token operator">=</span> X<span class="token punctuation">.</span>Act<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//...</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="调用带有返回值的委托"><a href="#调用带有返回值的委托" class="headerlink" title="调用带有返回值的委托"></a>调用带有返回值的委托</h3><ul><li>调用列表最后一个方法返回的值就是委托返回值</li><li>调用列表的其他方法返回值将被忽略</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">delegate</span> <span class="token keyword">int</span> <span class="token function">MyDel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyCls</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> IntVal <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">Add2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> IntVal <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">return</span> IntVal<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">Add3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> IntVal <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token keyword">return</span> IntVal<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        MyCls cls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyDel del <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyDel</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span>Add2<span class="token punctuation">)</span><span class="token punctuation">;</span>        del <span class="token operator">+</span><span class="token operator">=</span> cls<span class="token punctuation">.</span>Add3<span class="token punctuation">;</span>        del <span class="token operator">+</span><span class="token operator">=</span> cls<span class="token punctuation">.</span>Add2<span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//12</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="调用带引用参数的委托"><a href="#调用带引用参数的委托" class="headerlink" title="调用带引用参数的委托"></a>调用带引用参数的委托</h3><p>再调用方法列表的下一个方法时，参数的新值会传给下一个方法。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">delegate</span> <span class="token keyword">void</span> <span class="token function">MyDel</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyCls</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Add2</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> x <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Add3</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> x <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        MyCls cls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MyDel del <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyDel</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span>Add2<span class="token punctuation">)</span><span class="token punctuation">;</span>        del <span class="token operator">+</span><span class="token operator">=</span> cls<span class="token punctuation">.</span>Add3<span class="token punctuation">;</span>        del <span class="token operator">+</span><span class="token operator">=</span> cls<span class="token punctuation">.</span>Add2<span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token function">del</span><span class="token punctuation">(</span><span class="token keyword">ref</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//12</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h3><p>我们可以使用 Lambda 表达式创建委托对象。<br>C# 中的 Lambda 表达式与 JavaScript 中的很像。如果只有一个参数，可以省略括号，如果只有一个返回值语句，可以省略大括号和 reuturn 关键字。</p><pre class="line-numbers language-csharp"><code class="language-csharp">MyDel del <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//简写形式</span>MyDel del <span class="token operator">=</span> x <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇，我们讲讲 C# 中特殊的委托(delegate)。&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;委托和类一样，都是用户定义类型。类表示数据和方法的集和，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/C#(%E4%B9%9D)/"/>
    <id>https://1ess.github.io/C#(%E4%B9%9D)/</id>
    <published>2021-07-14T03:55:19.394Z</published>
    <updated>2021-07-14T03:55:19.394Z</updated>
    
    <content type="html"><![CDATA[<p>前几篇，我们都在讲类型，这一篇，我们来说说事件成员。</p><h2 id="发布者和订阅者"><a href="#发布者和订阅者" class="headerlink" title="发布者和订阅者"></a>发布者和订阅者</h2><hr><p>很多程序都会有一个需求: 当一个特定事件发生时，程序的其他部分可以得到这个事件发生的通知。<br>发布者/订阅者模式可以满足这个需求:<br>发布者定义了一系列事件，其他类可以注册某些事件，以便在事件发生时，订阅者可以收到通知响应事件。订阅者注册事件时提供的方法称为回调函数或者事件处理程序。</p><p>在 Objective-C 中，我们可以在某些类 addObserver 注册一些事件处理程序，当事件发生时，pushNotifacitation。在 JavaScript 中，我们同样可以 addEventListener 注册一些事件处理程序。</p><p>发布者: 发布某个事件的类或结构<br>订阅者: 注册并在事件发生时得到通知执行事件处理程序的类或结构<br>事件处理程序: 当事件发生时执行的回调函数</p><p><strong>事件包含了一个私有委托</strong>。<br>关于事件的私有委托: </p><ul><li>事件提供了对他的私有委托的结构化访问，我们无法直接访问私有委托</li><li>对于事件，我们只可以添加，删除和调用事件处理程序</li><li>事件触发时，会依次调用调用列表的方法</li></ul><h2 id="声明事件"><a href="#声明事件" class="headerlink" title="声明事件"></a>声明事件</h2><hr><p>发布者类必须提供事件对象。声明事件需要委托类型和事件名: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">MyCls</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//声明事件: event 关键字，EventHandler 委托类型，CountedADozen 事件名</span>    <span class="token keyword">public</span> <span class="token keyword">event</span> EventHandler CountedADozen<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意: 事件是成员而不是类型，由于他是成员: </p><ul><li>我们不能在可执行代码中声明事件</li><li>必须声明在类或结构中</li><li>声明事件需要委托类型，我们可以声明一个委托或使用已存在的。</li></ul><p>BCL 声明了一个 EventHandler 的委托，专门处理系统事件。</p><h2 id="订阅事件"><a href="#订阅事件" class="headerlink" title="订阅事件"></a>订阅事件</h2><hr><p>订阅者向事件添加处理程序: </p><ul><li>使用 += 运算符为事件添加事件处理程序</li><li>事件处理程序可以是: <ol><li>实例方法名称</li><li>静态方法名称</li><li>匿名方法</li><li>Lambda 表达式</li></ol></li></ul><pre class="line-numbers language-csharp"><code class="language-csharp">cls<span class="token punctuation">.</span>CountedADozen <span class="token operator">+</span><span class="token operator">=</span> IncreatmentCountedADozen<span class="token punctuation">;</span>cls<span class="token punctuation">.</span>CountedADozen <span class="token operator">+</span><span class="token operator">=</span> ClassB<span class="token punctuation">.</span>CountedHandlerB<span class="token punctuation">;</span>cls<span class="token punctuation">.</span>CountedADozen <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> DozensCount <span class="token operator">++</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="触发事件"><a href="#触发事件" class="headerlink" title="触发事件"></a>触发事件</h2><hr><p>触发事件时要注意: </p><ul><li>触发前要与 null 比较，如果是 null，则不能执行</li><li>触发事件的语法与调用方法一样</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前几篇，我们都在讲类型，这一篇，我们来说说事件成员。&lt;/p&gt;
&lt;h2 id=&quot;发布者和订阅者&quot;&gt;&lt;a href=&quot;#发布者和订阅者&quot; class=&quot;headerlink&quot; title=&quot;发布者和订阅者&quot;&gt;&lt;/a&gt;发布者和订阅者&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;很多程序都会有一个需求</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/C#(%E5%8D%81)/"/>
    <id>https://1ess.github.io/C#(%E5%8D%81)/</id>
    <published>2021-07-14T03:55:19.394Z</published>
    <updated>2021-07-14T03:55:19.394Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇，我们再回来说说最后一种类型: 接口(interface)。</p><h3 id="什么是接口"><a href="#什么是接口" class="headerlink" title="什么是接口"></a>什么是接口</h3><p>接口是指定一组函数成员而不实现他们的引用类型。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">interface</span> <span class="token class-name">IInfo</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">string</span> <span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">string</span> <span class="token function">GetAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以用类或结构来实现接口。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">MyCls</span><span class="token punctuation">:</span> IComparable<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> TheValue<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span>  <span class="token function">CompareTo</span><span class="token punctuation">(</span><span class="token keyword">object</span> obj<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        MyCls cls <span class="token operator">=</span> <span class="token punctuation">(</span>MyCls<span class="token punctuation">)</span>obj<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>TheValue <span class="token operator">></span> cls<span class="token punctuation">.</span>TheValue<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>TheValue <span class="token operator">&lt;</span> cls<span class="token punctuation">.</span>TheValue<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="接口声明"><a href="#接口声明" class="headerlink" title="接口声明"></a>接口声明</h3><ul><li><p>接口声明不能包含数据成员和静态成员</p></li><li><p>接口只能包含如下非静态成员: </p><ol><li>方法</li><li>属性</li><li>事件</li><li>索引器</li></ol></li><li><p>接口应该以大写字母 I 开始</p></li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IMyInterface</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注意: 接口函数成员不能有访问修饰符</span>    <span class="token keyword">int</span> <span class="token function">DoStuff</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h3><p>要实现接口: </p><ul><li>与继承类似，类或结构后跟冒号，再跟接口名</li><li>为每一个接口成员提供实现</li></ul><p>注意: 如果有继承，并实现接口，基类名必须出现在接口之前: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token punctuation">:</span> BaseClass<span class="token punctuation">,</span> IIfc1<span class="token punctuation">,</span> IIfc2<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现多个接口"><a href="#实现多个接口" class="headerlink" title="实现多个接口"></a>实现多个接口</h3><ul><li>类或结构可以实现任意数量的接口</li><li>所有实现的接口，必须列在基类列表以逗号分隔</li></ul><h3 id="接口可以继承接口"><a href="#接口可以继承接口" class="headerlink" title="接口可以继承接口"></a>接口可以继承接口</h3><p>与类的继承不同，接口可以多继承。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">interface</span> <span class="token class-name">IData</span> <span class="token punctuation">:</span> IDataR<span class="token punctuation">,</span> IDataS<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇，我们再回来说说最后一种类型: 接口(interface)。&lt;/p&gt;
&lt;h3 id=&quot;什么是接口&quot;&gt;&lt;a href=&quot;#什么是接口&quot; class=&quot;headerlink&quot; title=&quot;什么是接口&quot;&gt;&lt;/a&gt;什么是接口&lt;/h3&gt;&lt;p&gt;接口是指定一组函数成员而不实现他们</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/C#(%E5%8D%81%E4%B8%80)/"/>
    <id>https://1ess.github.io/C#(%E5%8D%81%E4%B8%80)/</id>
    <published>2021-07-14T03:55:19.394Z</published>
    <updated>2021-07-14T03:55:19.394Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇，我们再来看看 C# 中的显式转换以及隐式转换。</p><h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><p>有些类型的转换不会丢失数据或精度: </p><ul><li>C# 会自动做这些转换，称为隐式转换</li><li>从位数少的源转换为位数更多的源，目标多出来的位使用 0 或 1 补充</li><li>当从小的无符号类型转换为更大的无符号类型，多出来的位以 0 进行填充，称为 0 扩展</li><li>对于有符号类型，额外的高位使用符号位进行扩展，称为符号扩展</li></ul><h3 id="显式转换"><a href="#显式转换" class="headerlink" title="显式转换"></a>显式转换</h3><p>对于源类型的任意值在被转换为目标类型时会丢失的情况，C# 语言是不提供两种类型的自动转换，如果我们希望这两种类型进行转换，就必须使用显式转换，这叫做强制转换表达式。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">ushort</span> var1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">sbyte</span> var2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">sbyte</span><span class="token punctuation">)</span>var1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="装箱转换"><a href="#装箱转换" class="headerlink" title="装箱转换"></a>装箱转换</h3><p>C# 所有类型都继承自 object 类型，然而，值类型是高效轻量的类型，但是当我们需要对象组件，可以使用装箱。<br>装箱是一种隐式转换，接受值类型的值，在堆上创建一个引用类型对象，返回该引用。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">object</span> oi <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>oi <span class="token operator">=</span> i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>需要注意的是: 装箱操作的时一个副本，装箱之后，原始值和引用副本可以独立操作。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">object</span> oi <span class="token operator">=</span> i<span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"i: &amp;#123;0&amp;#125;, oi: &amp;#123;1&amp;#125;"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> oi<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10, 10</span>i <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>oi <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">"i: &amp;#123;0&amp;#125;, oi: &amp;#123;1&amp;#125;"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> oi<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 12, 15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拆箱转换"><a href="#拆箱转换" class="headerlink" title="拆箱转换"></a>拆箱转换</h3><p>拆箱是将装箱后的引用返回值类型的操作。<br>注意: 拆箱是显式转换。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">object</span> oi <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>oi<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>拆箱非值类型会抛出异常。</p><h3 id="is-运算符"><a href="#is-运算符" class="headerlink" title="is 运算符"></a>is 运算符</h3><p>我们可以使用 is 运算符检测转换是否会成功，避免盲目转换。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">:</span> Person <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">string</span> Name <span class="token operator">=</span> <span class="token string">"1ess"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> Age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Employee emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>emp <span class="token keyword">is</span> Person p<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果转换失败，返回 false</span>            <span class="token comment" spellcheck="true">//如果转换成功，返回 true，并赋值给 p</span>            <span class="token comment" spellcheck="true">//...</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="as-运算符"><a href="#as-运算符" class="headerlink" title="as 运算符"></a>as 运算符</h3><p>as 运算符和强制转换类似，只是他不会抛出异常。如果转换失败，会返回 null。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">:</span> Person <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">string</span> Name <span class="token operator">=</span> <span class="token string">"1ess"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> Age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Employee emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p <span class="token operator">=</span> emp <span class="token keyword">as</span> Person<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//...</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这一篇，我们再来看看 C# 中的显式转换以及隐式转换。&lt;/p&gt;
&lt;h3 id=&quot;隐式转换&quot;&gt;&lt;a href=&quot;#隐式转换&quot; class=&quot;headerlink&quot; title=&quot;隐式转换&quot;&gt;&lt;/a&gt;隐式转换&lt;/h3&gt;&lt;p&gt;有些类型的转换不会丢失数据或精度: &lt;/p&gt;
&lt;ul&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://1ess.github.io/C#(%E5%8D%81%E4%BA%8C)/"/>
    <id>https://1ess.github.io/C#(%E5%8D%81%E4%BA%8C)/</id>
    <published>2021-07-14T03:55:19.394Z</published>
    <updated>2021-07-14T03:55:19.394Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>理想有两种: 一种，我实现了我的理想；另一种: 理想通过我而实现。</p></blockquote><p>这一篇，讲讲泛型。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><hr><p>没有泛型的时候，我们封装的行为都是作用在特定类型上的，但是，很多时候如果我们把行为提取或重构出来，使其可以应用到很多类型上去的话，那么就会更有意义。这也是泛型出现的原因。</p><p>我们可以额外增加一层抽象，这样类型就不用再硬编码了，这样就可以使得多段代码在不同类型执行相同的指令成为可能。</p><p>之前写 Objective-C 的时候，感觉他的泛型太弱了，现在写 C#，感觉他的泛型系统太好用了！</p><h3 id="无泛型栈示例"><a href="#无泛型栈示例" class="headerlink" title="无泛型栈示例"></a>无泛型栈示例</h3><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">MyIntStack</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> StackPoint <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> StackArray<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//...</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//...</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果希望将相同的功能应用于 float 类型，我们就必须复制粘贴上面的代码再改成 float。<br>这样做可行，但是缺点明显: </p><ul><li>我们要仔细检查类型的修改</li><li>每当新增类型，就要复制粘贴修改</li><li>调试维护这些类似的代码易出错</li></ul><h3 id="C-中的泛型"><a href="#C-中的泛型" class="headerlink" title="C# 中的泛型"></a>C# 中的泛型</h3><p>泛型(generic)提供了更优雅的解决方案，让多个类型共享一组代码。我们可以使用类型占位符书写代码，在创建实例时指明实际类型即可。</p><p>C# 提供了 5 种泛型可用在的地方: 类、结构、接口、委托、方法。前四种是类型，最后一种是成员。</p><h3 id="泛型栈示例"><a href="#泛型栈示例" class="headerlink" title="泛型栈示例"></a>泛型栈示例</h3><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">MyStack</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> StackPointer <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    T<span class="token punctuation">[</span><span class="token punctuation">]</span> StackArray<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>T x<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//...</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> T <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//...</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="声明泛型类"><a href="#声明泛型类" class="headerlink" title="声明泛型类"></a>声明泛型类</h3><p>上面我们已经展示了一个示例来演示泛型类，这里我们具体介绍一下，看看如何创建并使用泛型类。<br>创建使用非泛型类有两步: 声明类和创建类的实例。<br>但是泛型类不是实际类，而是类的模板，所以我们必须先从模板构建出实际类型，然后创建这个构建后的类型的实例。</p><p>声明步骤: </p><ul><li>在类名后放置一对尖括号&lt;&gt;</li><li>在尖括号中用逗号分隔占位字符串来表示希望提供的类型，这叫做类型参数(type parameters)</li><li>在泛型类的主体使用类型参数代替实际类型</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> T1 SomeVal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> T2 OtherVal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">T2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建构造类型"><a href="#创建构造类型" class="headerlink" title="创建构造类型"></a>创建构造类型</h3><p>列出类名并在尖括号中提供真实类型代替类型参数，我们将替代类型参数的真实类型称为类型实参(type argument)。</p><pre class="line-numbers language-csharp"><code class="language-csharp">SomeClass<span class="token operator">&lt;</span><span class="token keyword">short</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h3><p>非泛型类创建实例: </p><pre class="line-numbers language-csharp"><code class="language-csharp">MyNonGenClass myNGC <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyNonGenClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>泛型类创建实例: </p><pre class="line-numbers language-csharp"><code class="language-csharp">SomeClass<span class="token operator">&lt;</span><span class="token keyword">short</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> mySc1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SomeClass</span><span class="token operator">&lt;</span><span class="token keyword">short</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="类型参数约束"><a href="#类型参数约束" class="headerlink" title="类型参数约束"></a>类型参数约束</h3><p>为了让泛型变得更有用，我们需要提供额外信息让编译器知道 type parameter 可以接受哪些类型。<br>这些额外信息称为约束(constraint)。</p><h4 id="Where-子句"><a href="#Where-子句" class="headerlink" title="Where 子句"></a>Where 子句</h4><ul><li>每个 type parameter 都有自己的 where 子句</li><li>如果有多个约束，在约束列表用逗号分隔</li></ul><p>where 子句使用要点: </p><ul><li>在关闭尖括号后列出</li><li>where 子句之间不用逗号分隔</li><li>子句之间可以以任何顺序列出</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">,</span> T3<span class="token operator">></span>                      <span class="token keyword">where</span> T2<span class="token punctuation">:</span> Customer                      <span class="token keyword">where</span> T3<span class="token punctuation">:</span> IComparable<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="约束类型和次序"><a href="#约束类型和次序" class="headerlink" title="约束类型和次序"></a>约束类型和次序</h4><p>共有 5 种类型的约束: </p><ul><li>类名: 某种类或类的子类才能做 type argument</li><li>class: 任何引用类型才能做 type argument</li><li>struct: 任何值类型才能做 type argument</li><li>接口名: 只有这个接口或实现这个接口的类型才能做 type argument</li><li>new(): 任何带有无参构造的类型才能做 type argument</li></ul><p>顺序: </p><ul><li>主约束必须放在第一位且只有一个: 主约束只能是类名、class 或者 struct</li><li>接口名约束可以有任意多个</li><li>如果存在构造约束，必须放在最后</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">SortedList</span><span class="token operator">&lt;</span>S<span class="token operator">></span>                         <span class="token keyword">where</span> S<span class="token punctuation">:</span> IComparable<span class="token operator">&lt;</span>S<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>M<span class="token punctuation">,</span> N<span class="token operator">></span>                         <span class="token keyword">where</span> M<span class="token punctuation">:</span> IComparable<span class="token operator">&lt;</span>M<span class="token operator">></span>                         <span class="token keyword">where</span> N<span class="token punctuation">:</span> ICloneable <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyDictionary</span><span class="token operator">&lt;</span>KeyType<span class="token punctuation">,</span> ValueType<span class="token operator">></span>                              <span class="token keyword">where</span> KeyType<span class="token punctuation">:</span> IEnumerable<span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><p>与其他的泛型不同，泛型方法是成员而不是类型，它可以用于泛型、非泛型类、结构或接口。</p><h4 id="声明泛型方法"><a href="#声明泛型方法" class="headerlink" title="声明泛型方法"></a>声明泛型方法</h4><p>泛型方法具有类型参数和可选的约束。<br>泛型方法有两个参数列表: </p><ul><li>封闭在圆括号内的方法参数列表</li><li>封闭在尖括号内的类型参数列表</li></ul><p>要声明泛型方法: </p><ul><li>在方法名之后，方法参数之前放置类型参数列表</li><li>在方法参数之后放置可选的约束子句</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token generic-method function">PrintData<span class="token punctuation">&lt;</span>S<span class="token punctuation">,</span> T<span class="token punctuation">></span> </span><span class="token punctuation">(</span>S s<span class="token punctuation">,</span> T t<span class="token punctuation">)</span> <span class="token keyword">where</span> S<span class="token punctuation">:</span> Person<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="调用泛型方法"><a href="#调用泛型方法" class="headerlink" title="调用泛型方法"></a>调用泛型方法</h4><p>要调用泛型方法，需要在调用时提供类型实参: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token generic-method function">MyMethod<span class="token punctuation">&lt;</span><span class="token keyword">short</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果我们在调用泛型方法时，可以从方法参数推断出类型实参，则可以省略类型实参: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token generic-method function">MyMethod<span class="token punctuation">&lt;</span>T<span class="token punctuation">></span> </span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> IntVal <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">MyMethod</span><span class="token punctuation">(</span>IntVal<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="泛型结构"><a href="#泛型结构" class="headerlink" title="泛型结构"></a>泛型结构</h3><p>与泛型类一样，泛型结构也有类型参数和约束子句。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">struct</span> PieceOfData <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> T _Data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">PieceOfData</span><span class="token punctuation">(</span>T data<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        _data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> T Data     <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">set</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> _data <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">get</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> _data<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> intData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PieceOfData</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"&amp;#123;intData.Data&amp;#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="泛型委托"><a href="#泛型委托" class="headerlink" title="泛型委托"></a>泛型委托</h3><p>泛型委托与非泛型委托类似，要声明泛型委托，需要在委托名称之后，委托参数列表之前放置类型参数列表: </p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">delegate</span> R <span class="token generic-method function">MyDelegate <span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> R<span class="token punctuation">></span></span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>C# 中有两个常用的预定义的泛型委托: Func 和 Action: </p><ul><li>Action 是无返回值的泛型委托，有 16 个重载(即最多 16 个参数)</li><li>Func 是有返回值的泛型委托，有 17 个重载(即最多 16 个参数和 1 个返回值)</li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">delegate</span> TR <span class="token generic-method function">Func <span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">,</span> TR<span class="token punctuation">></span></span><span class="token punctuation">(</span>T1 p1<span class="token punctuation">,</span> T2 p2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Simple</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">string</span> <span class="token function">PrintString</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> total <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token keyword">return</span> total<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> myDel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Func</span> <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span>Simple<span class="token punctuation">.</span>PrintString<span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"&amp;#123;myDel(2, 3)&amp;#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 5</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><p>泛型接口允许我们编写参数和返回值是泛型类型参数的接口。我们需要在接口名之后用尖括号放置类型参数列表。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">interface</span> <span class="token class-name">IMyIfc</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    T <span class="token function">ReturnIt</span><span class="token punctuation">(</span>T val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Simple</span><span class="token operator">&lt;</span>S<span class="token operator">></span><span class="token punctuation">:</span> IMyIfc<span class="token operator">&lt;</span>S<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> S <span class="token function">ReturnIt</span><span class="token punctuation">(</span>S s<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Program</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> simple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Simple</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>$<span class="token string">"&amp;#123;simple.ReturnIt(3)&amp;#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 3</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;理想有两种: 一种，我实现了我的理想；另一种: 理想通过我而实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这一篇，讲讲泛型。&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;</summary>
      
    
    
    
    
  </entry>
  
</feed>
