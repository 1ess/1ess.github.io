<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A Sort Of A Blog</title>
  
  
  <link href="https://1ess.github.io/atom.xml" rel="self"/>
  
  <link href="https://1ess.github.io/"/>
  <updated>2022-03-01T08:44:21.558Z</updated>
  <id>https://1ess.github.io/</id>
  
  <author>
    <name>Stephen Chang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode-Longest Palindromic Substring</title>
    <link href="https://1ess.github.io/LeetCode-Longest%20Palindromic%20Substring/"/>
    <id>https://1ess.github.io/LeetCode-Longest%20Palindromic%20Substring/</id>
    <published>2022-03-13T00:00:00.000Z</published>
    <updated>2022-03-01T08:44:21.558Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;Given a string s, return the longest palindromic substring in</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LeetCode-Median of Two Sorted Arrays</title>
    <link href="https://1ess.github.io/LeetCode-Median%20of%20Two%20Sorted%20Arrays/"/>
    <id>https://1ess.github.io/LeetCode-Median%20of%20Two%20Sorted%20Arrays/</id>
    <published>2022-03-12T00:00:00.000Z</published>
    <updated>2022-03-01T08:44:21.558Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;There are two sorted arrays nums1 and nums2 of size m and n</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LeetCode-Longest Substring Without Repeating Characters</title>
    <link href="https://1ess.github.io/LeetCode-Longest%20Substring%20Without%20Repeating%20Characters/"/>
    <id>https://1ess.github.io/LeetCode-Longest%20Substring%20Without%20Repeating%20Characters/</id>
    <published>2022-03-11T00:00:00.000Z</published>
    <updated>2022-03-01T08:44:21.558Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;Given a string, find the length of the longest substring without</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LeetCode-Add Two Numbers</title>
    <link href="https://1ess.github.io/LeetCode-Add%20Two%20Numbers/"/>
    <id>https://1ess.github.io/LeetCode-Add%20Two%20Numbers/</id>
    <published>2022-03-10T00:00:00.000Z</published>
    <updated>2022-03-01T08:44:21.558Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;You are given two non-empty linked lists representing two</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LeetCode-Two Sum</title>
    <link href="https://1ess.github.io/LeetCode-Two%20Sum/"/>
    <id>https://1ess.github.io/LeetCode-Two%20Sum/</id>
    <published>2022-03-09T00:00:00.000Z</published>
    <updated>2022-03-01T08:44:21.558Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;Given an array of integers, return indices of the two numbers</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LeetCode</title>
    <link href="https://1ess.github.io/LeetCode/"/>
    <id>https://1ess.github.io/LeetCode/</id>
    <published>2022-03-08T00:00:00.000Z</published>
    <updated>2022-03-01T08:44:21.558Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;strong&gt;Practice Makes Perfect&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;目前打算今年要刷完 LeetCode 中的 HOT 100 以及剑指 Offer</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-访问者</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BF%E9%97%AE%E8%80%85/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BF%E9%97%AE%E8%80%85/</id>
    <published>2022-03-07T00:00:00.000Z</published>
    <updated>2022-03-01T08:44:21.558Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;访问者模式(Visitor Pattern)是一种行为型设计模式，它能将算法与其所作用的对象隔离开来。&lt;/p&gt;
&lt;h2 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-模板方法</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/</id>
    <published>2022-03-06T00:00:00.000Z</published>
    <updated>2022-03-01T08:44:21.558Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;模板方法模式(Template Method Pattern)是一种行为型设计模式，它在超类中定义了一个算法的框架，允许子类在不修改结构的情况下重写算法的特定步骤。&lt;/p&gt;
&lt;h2 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-策略</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5/</id>
    <published>2022-03-05T00:00:00.000Z</published>
    <updated>2022-03-01T08:44:21.558Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;策略模式(Strategy Pattern)是一种行为型设计模式，它能让你定义一系列算法，并将每种算法分别放入独立的类中，以使算法的对象能够相互替换。&lt;/p&gt;
&lt;h2 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-状态</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81/</id>
    <published>2022-03-04T00:00:00.000Z</published>
    <updated>2022-03-01T08:44:21.558Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;状态模式(State Pattern)是一种行为型设计模式，让你能在一个对象的内部状态变化时改变其行为，使其看上去就像改变了自身所属的类一样。&lt;/p&gt;
&lt;h2 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-观察者</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85/</id>
    <published>2022-03-03T00:00:00.000Z</published>
    <updated>2022-03-01T08:44:21.558Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;观察者模式(Observer Pattern)是一种行为型设计模式，允许你定义一种订阅机制，可在对象事件发生时通知多个”观察”该对象的其他对象。&lt;/p&gt;
&lt;h2 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-备忘录</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E5%BF%98%E5%BD%95/</id>
    <published>2022-03-02T00:00:00.000Z</published>
    <updated>2022-03-01T08:44:21.558Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;备忘录模式(Memento Pattern)是一种行为型设计模式，允许在不暴露对象实现细节的情况下保存和恢复对象之前的状态。&lt;/p&gt;
&lt;h2 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-中介者</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E8%80%85/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E8%80%85/</id>
    <published>2022-03-01T00:00:00.000Z</published>
    <updated>2022-03-01T08:44:21.558Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;中介者模式(Mediator Pattern)是一种行为型设计模式，能让你减少对象之间混乱无序的依赖关系。该模式会限制对象之间的直接交互，迫使它们通过一个中介者对象进行合作。&lt;/p&gt;
&lt;h2 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-迭代器</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8/</id>
    <published>2022-02-28T00:00:00.000Z</published>
    <updated>2022-03-01T08:44:21.558Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;迭代器模式(Iterator Pattern)是一种行为型设计模式，让你能在不暴露集合底层表现形式(列表、栈和树等)的情况下遍历集合中所有的元素。&lt;/p&gt;
&lt;h2 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-命令</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4/</id>
    <published>2022-02-27T00:00:00.000Z</published>
    <updated>2022-03-01T08:44:21.558Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;命令模式(Command Pattern)是一种行为型设计模式，它可将请求转换为一个包含与请求相关的所有信息的独立对象。该转换让你能根据不同的请求将方法参数化、 延迟请求执行或将其放入队列中，且能实现可撤销操作。&lt;/p&gt;
&lt;h2 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-责任链</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%B4%A3%E4%BB%BB%E9%93%BE/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%B4%A3%E4%BB%BB%E9%93%BE/</id>
    <published>2022-02-26T00:00:00.000Z</published>
    <updated>2022-03-01T08:44:21.558Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;责任链模式(Chain of Responsibility Pattern)是一种行为型设计模式，允许你将请求沿着处理者链进行发送。收到请求后，每个处理者均可对请求进行处理，或将其传递给链上的下个处理者。&lt;/p&gt;
&lt;h2 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-代理</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86/</id>
    <published>2022-02-25T00:00:00.000Z</published>
    <updated>2022-03-01T08:44:21.558Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;代理模式(Proxy Pattern)是一种结构型设计模式，让你能够提供对象的替代品或其占位符。代理控制着对于原对象的访问，并允许在将请求提交给对象前后进行一些处理。&lt;/p&gt;
&lt;h2 id=&quot;代理模式-UML&quot;&gt;&lt;a href=&quot;#代理模式-UML&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-享元</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83/</id>
    <published>2022-02-24T00:00:00.000Z</published>
    <updated>2022-03-01T08:44:21.558Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;享元模式(Flyweight Pattern)是一种结构型设计模式，它摒弃了在每个对象中保存所有数据的方式，通过共享多个对象所共有的相同状态，让你能在有限的内存容量中载入更多对象。&lt;/p&gt;
&lt;h2 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-门面</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%97%A8%E9%9D%A2/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%97%A8%E9%9D%A2/</id>
    <published>2022-02-23T00:00:00.000Z</published>
    <updated>2022-03-01T08:44:21.558Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;门面模式(Facade Pattern)是一种结构型设计模式，能为程序库、框架或其他复杂类提供一个简单的接口。&lt;/p&gt;
&lt;h2 id=&quot;门面模式-UML&quot;&gt;&lt;a href=&quot;#门面模式-UML&quot; class=&quot;headerlink&quot; title=&quot;门面模式</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>设计模式-装饰器</title>
    <link href="https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>https://1ess.github.io/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E5%99%A8/</id>
    <published>2022-02-22T00:00:00.000Z</published>
    <updated>2022-03-01T08:44:21.558Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;装饰器模式(Decorator Pattern)是一种结构型设计模式，允许你通过将对象放入包含行为的特殊封装对象中来为原对象绑定新的行为。&lt;/p&gt;
&lt;h2 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
  </entry>
  
</feed>
